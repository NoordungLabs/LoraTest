
LoRaTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000032f8  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  080034d0  080034d0  000044d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080034ec  080034ec  0000500c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080034ec  080034ec  000044ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080034f4  080034f4  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080034f4  080034f4  000044f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080034f8  080034f8  000044f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080034fc  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001c8  2000000c  08003508  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001d4  08003508  000051d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a846  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000021c4  00000000  00000000  0000f882  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000aa0  00000000  00000000  00011a48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000007ed  00000000  00000000  000124e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c91a  00000000  00000000  00012cd5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ca8b  00000000  00000000  0002f5ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b394b  00000000  00000000  0003c07a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ef9c5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002924  00000000  00000000  000efa08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000054  00000000  00000000  000f232c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	080034b8 	.word	0x080034b8

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	080034b8 	.word	0x080034b8

08000218 <strlen>:
 8000218:	4603      	mov	r3, r0
 800021a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800021e:	2a00      	cmp	r2, #0
 8000220:	d1fb      	bne.n	800021a <strlen+0x2>
 8000222:	1a18      	subs	r0, r3, r0
 8000224:	3801      	subs	r0, #1
 8000226:	4770      	bx	lr

08000228 <HAL_GPIO_EXTI_Callback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000228:	b580      	push	{r7, lr}
 800022a:	b082      	sub	sp, #8
 800022c:	af00      	add	r7, sp, #0
 800022e:	4603      	mov	r3, r0
 8000230:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == SX1272_DIO0_PIN)
 8000232:	88fb      	ldrh	r3, [r7, #6]
 8000234:	2b01      	cmp	r3, #1
 8000236:	d108      	bne.n	800024a <HAL_GPIO_EXTI_Callback+0x22>
    {
        irqFlags = SX1272_ReadReg(REG_IRQ_FLAGS);
 8000238:	2012      	movs	r0, #18
 800023a:	f000 fae5 	bl	8000808 <SX1272_ReadReg>
 800023e:	4603      	mov	r3, r0
 8000240:	461a      	mov	r2, r3
 8000242:	4b04      	ldr	r3, [pc, #16]	@ (8000254 <HAL_GPIO_EXTI_Callback+0x2c>)
 8000244:	701a      	strb	r2, [r3, #0]
        //printf("EXTI! IRQ=0x%02X\r\n", irqFlags);
        SX1272_HandleDIO0();
 8000246:	f000 fbab 	bl	80009a0 <SX1272_HandleDIO0>
    }
}
 800024a:	bf00      	nop
 800024c:	3708      	adds	r7, #8
 800024e:	46bd      	mov	sp, r7
 8000250:	bd80      	pop	{r7, pc}
 8000252:	bf00      	nop
 8000254:	200000c5 	.word	0x200000c5

08000258 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000258:	b580      	push	{r7, lr}
 800025a:	b084      	sub	sp, #16
 800025c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800025e:	f000 fc2c 	bl	8000aba <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000262:	f000 f855 	bl	8000310 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000266:	f000 f915 	bl	8000494 <MX_GPIO_Init>
  MX_CRC_Init();
 800026a:	f000 f89d 	bl	80003a8 <MX_CRC_Init>
  MX_SPI1_Init();
 800026e:	f000 f8d3 	bl	8000418 <MX_SPI1_Init>
  MX_RNG_Init();
 8000272:	f000 f8bb 	bl	80003ec <MX_RNG_Init>
  /* USER CODE BEGIN 2 */
  SX1272_Init();
 8000276:	f000 fb52 	bl	800091e <SX1272_Init>
  status = SX1272_ReadReg(0x42);
 800027a:	2042      	movs	r0, #66	@ 0x42
 800027c:	f000 fac4 	bl	8000808 <SX1272_ReadReg>
 8000280:	4603      	mov	r3, r0
 8000282:	461a      	mov	r2, r3
 8000284:	4b1f      	ldr	r3, [pc, #124]	@ (8000304 <main+0xac>)
 8000286:	701a      	strb	r2, [r3, #0]
  SX1272_Receive();
 8000288:	f000 fb7a 	bl	8000980 <SX1272_Receive>
  int8_t msg[] = "Hello World";
 800028c:	4a1e      	ldr	r2, [pc, #120]	@ (8000308 <main+0xb0>)
 800028e:	463b      	mov	r3, r7
 8000290:	ca07      	ldmia	r2, {r0, r1, r2}
 8000292:	e883 0007 	stmia.w	r3, {r0, r1, r2}

 // Start receiving
 HAL_Delay(2000);
 8000296:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800029a:	f000 fc7f 	bl	8000b9c <HAL_Delay>
 uint8_t counter = 0;
 800029e:	2300      	movs	r3, #0
 80002a0:	73fb      	strb	r3, [r7, #15]
 SX1272_Transmit(msg, strlen((char*)msg));
 80002a2:	463b      	mov	r3, r7
 80002a4:	4618      	mov	r0, r3
 80002a6:	f7ff ffb7 	bl	8000218 <strlen>
 80002aa:	4603      	mov	r3, r0
 80002ac:	b2da      	uxtb	r2, r3
 80002ae:	463b      	mov	r3, r7
 80002b0:	4611      	mov	r1, r2
 80002b2:	4618      	mov	r0, r3
 80002b4:	f000 fb3b 	bl	800092e <SX1272_Transmit>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  static uint32_t lastSend = 0;
	  if(HAL_GetTick() - lastSend >= 5000) {
 80002b8:	f000 fc64 	bl	8000b84 <HAL_GetTick>
 80002bc:	4602      	mov	r2, r0
 80002be:	4b13      	ldr	r3, [pc, #76]	@ (800030c <main+0xb4>)
 80002c0:	681b      	ldr	r3, [r3, #0]
 80002c2:	1ad3      	subs	r3, r2, r3
 80002c4:	f241 3287 	movw	r2, #4999	@ 0x1387
 80002c8:	4293      	cmp	r3, r2
 80002ca:	d90f      	bls.n	80002ec <main+0x94>
		  SX1272_Transmit(msg, strlen((char*)msg));
 80002cc:	463b      	mov	r3, r7
 80002ce:	4618      	mov	r0, r3
 80002d0:	f7ff ffa2 	bl	8000218 <strlen>
 80002d4:	4603      	mov	r3, r0
 80002d6:	b2da      	uxtb	r2, r3
 80002d8:	463b      	mov	r3, r7
 80002da:	4611      	mov	r1, r2
 80002dc:	4618      	mov	r0, r3
 80002de:	f000 fb26 	bl	800092e <SX1272_Transmit>
		  lastSend = HAL_GetTick();
 80002e2:	f000 fc4f 	bl	8000b84 <HAL_GetTick>
 80002e6:	4603      	mov	r3, r0
 80002e8:	4a08      	ldr	r2, [pc, #32]	@ (800030c <main+0xb4>)
 80002ea:	6013      	str	r3, [r2, #0]
	  }

	  if (SX1272_ReadReg(REG_IRQ_FLAGS) & IRQ_RX_DONE_MASK)
 80002ec:	2012      	movs	r0, #18
 80002ee:	f000 fa8b 	bl	8000808 <SX1272_ReadReg>
 80002f2:	4603      	mov	r3, r0
 80002f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d0dd      	beq.n	80002b8 <main+0x60>
	  {
	      //printf("POLLED RX DONE\r\n");
	      SX1272_HandleDIO0();
 80002fc:	f000 fb50 	bl	80009a0 <SX1272_HandleDIO0>
  {
 8000300:	e7da      	b.n	80002b8 <main+0x60>
 8000302:	bf00      	nop
 8000304:	200000c4 	.word	0x200000c4
 8000308:	080034d0 	.word	0x080034d0
 800030c:	200000c8 	.word	0x200000c8

08000310 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000310:	b580      	push	{r7, lr}
 8000312:	b094      	sub	sp, #80	@ 0x50
 8000314:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000316:	f107 0318 	add.w	r3, r7, #24
 800031a:	2238      	movs	r2, #56	@ 0x38
 800031c:	2100      	movs	r1, #0
 800031e:	4618      	mov	r0, r3
 8000320:	f003 f89e 	bl	8003460 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000324:	1d3b      	adds	r3, r7, #4
 8000326:	2200      	movs	r2, #0
 8000328:	601a      	str	r2, [r3, #0]
 800032a:	605a      	str	r2, [r3, #4]
 800032c:	609a      	str	r2, [r3, #8]
 800032e:	60da      	str	r2, [r3, #12]
 8000330:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000332:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000336:	f001 f86f 	bl	8001418 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800033a:	2302      	movs	r3, #2
 800033c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800033e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000342:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000344:	2340      	movs	r3, #64	@ 0x40
 8000346:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000348:	2302      	movs	r3, #2
 800034a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800034c:	2302      	movs	r3, #2
 800034e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000350:	2301      	movs	r3, #1
 8000352:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 12;
 8000354:	230c      	movs	r3, #12
 8000356:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000358:	2302      	movs	r3, #2
 800035a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 800035c:	2304      	movs	r3, #4
 800035e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000360:	2302      	movs	r3, #2
 8000362:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000364:	f107 0318 	add.w	r3, r7, #24
 8000368:	4618      	mov	r0, r3
 800036a:	f001 f909 	bl	8001580 <HAL_RCC_OscConfig>
 800036e:	4603      	mov	r3, r0
 8000370:	2b00      	cmp	r3, #0
 8000372:	d001      	beq.n	8000378 <SystemClock_Config+0x68>
  {
    Error_Handler();
 8000374:	f000 f8f0 	bl	8000558 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000378:	230f      	movs	r3, #15
 800037a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800037c:	2303      	movs	r3, #3
 800037e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000380:	2300      	movs	r3, #0
 8000382:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000384:	2300      	movs	r3, #0
 8000386:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000388:	2300      	movs	r3, #0
 800038a:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800038c:	1d3b      	adds	r3, r7, #4
 800038e:	2103      	movs	r1, #3
 8000390:	4618      	mov	r0, r3
 8000392:	f001 fc07 	bl	8001ba4 <HAL_RCC_ClockConfig>
 8000396:	4603      	mov	r3, r0
 8000398:	2b00      	cmp	r3, #0
 800039a:	d001      	beq.n	80003a0 <SystemClock_Config+0x90>
  {
    Error_Handler();
 800039c:	f000 f8dc 	bl	8000558 <Error_Handler>
  }
}
 80003a0:	bf00      	nop
 80003a2:	3750      	adds	r7, #80	@ 0x50
 80003a4:	46bd      	mov	sp, r7
 80003a6:	bd80      	pop	{r7, pc}

080003a8 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80003a8:	b580      	push	{r7, lr}
 80003aa:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80003ac:	4b0d      	ldr	r3, [pc, #52]	@ (80003e4 <MX_CRC_Init+0x3c>)
 80003ae:	4a0e      	ldr	r2, [pc, #56]	@ (80003e8 <MX_CRC_Init+0x40>)
 80003b0:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 80003b2:	4b0c      	ldr	r3, [pc, #48]	@ (80003e4 <MX_CRC_Init+0x3c>)
 80003b4:	2200      	movs	r2, #0
 80003b6:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 80003b8:	4b0a      	ldr	r3, [pc, #40]	@ (80003e4 <MX_CRC_Init+0x3c>)
 80003ba:	2200      	movs	r2, #0
 80003bc:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80003be:	4b09      	ldr	r3, [pc, #36]	@ (80003e4 <MX_CRC_Init+0x3c>)
 80003c0:	2200      	movs	r2, #0
 80003c2:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80003c4:	4b07      	ldr	r3, [pc, #28]	@ (80003e4 <MX_CRC_Init+0x3c>)
 80003c6:	2200      	movs	r2, #0
 80003c8:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80003ca:	4b06      	ldr	r3, [pc, #24]	@ (80003e4 <MX_CRC_Init+0x3c>)
 80003cc:	2201      	movs	r2, #1
 80003ce:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80003d0:	4804      	ldr	r0, [pc, #16]	@ (80003e4 <MX_CRC_Init+0x3c>)
 80003d2:	f000 fd15 	bl	8000e00 <HAL_CRC_Init>
 80003d6:	4603      	mov	r3, r0
 80003d8:	2b00      	cmp	r3, #0
 80003da:	d001      	beq.n	80003e0 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 80003dc:	f000 f8bc 	bl	8000558 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80003e0:	bf00      	nop
 80003e2:	bd80      	pop	{r7, pc}
 80003e4:	20000028 	.word	0x20000028
 80003e8:	40023000 	.word	0x40023000

080003ec <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 80003ec:	b580      	push	{r7, lr}
 80003ee:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 80003f0:	4b07      	ldr	r3, [pc, #28]	@ (8000410 <MX_RNG_Init+0x24>)
 80003f2:	4a08      	ldr	r2, [pc, #32]	@ (8000414 <MX_RNG_Init+0x28>)
 80003f4:	601a      	str	r2, [r3, #0]
  hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
 80003f6:	4b06      	ldr	r3, [pc, #24]	@ (8000410 <MX_RNG_Init+0x24>)
 80003f8:	2200      	movs	r2, #0
 80003fa:	605a      	str	r2, [r3, #4]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 80003fc:	4804      	ldr	r0, [pc, #16]	@ (8000410 <MX_RNG_Init+0x24>)
 80003fe:	f001 ffa5 	bl	800234c <HAL_RNG_Init>
 8000402:	4603      	mov	r3, r0
 8000404:	2b00      	cmp	r3, #0
 8000406:	d001      	beq.n	800040c <MX_RNG_Init+0x20>
  {
    Error_Handler();
 8000408:	f000 f8a6 	bl	8000558 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 800040c:	bf00      	nop
 800040e:	bd80      	pop	{r7, pc}
 8000410:	2000004c 	.word	0x2000004c
 8000414:	50060800 	.word	0x50060800

08000418 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000418:	b580      	push	{r7, lr}
 800041a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800041c:	4b1b      	ldr	r3, [pc, #108]	@ (800048c <MX_SPI1_Init+0x74>)
 800041e:	4a1c      	ldr	r2, [pc, #112]	@ (8000490 <MX_SPI1_Init+0x78>)
 8000420:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000422:	4b1a      	ldr	r3, [pc, #104]	@ (800048c <MX_SPI1_Init+0x74>)
 8000424:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000428:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800042a:	4b18      	ldr	r3, [pc, #96]	@ (800048c <MX_SPI1_Init+0x74>)
 800042c:	2200      	movs	r2, #0
 800042e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000430:	4b16      	ldr	r3, [pc, #88]	@ (800048c <MX_SPI1_Init+0x74>)
 8000432:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8000436:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000438:	4b14      	ldr	r3, [pc, #80]	@ (800048c <MX_SPI1_Init+0x74>)
 800043a:	2200      	movs	r2, #0
 800043c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800043e:	4b13      	ldr	r3, [pc, #76]	@ (800048c <MX_SPI1_Init+0x74>)
 8000440:	2200      	movs	r2, #0
 8000442:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000444:	4b11      	ldr	r3, [pc, #68]	@ (800048c <MX_SPI1_Init+0x74>)
 8000446:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800044a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800044c:	4b0f      	ldr	r3, [pc, #60]	@ (800048c <MX_SPI1_Init+0x74>)
 800044e:	2220      	movs	r2, #32
 8000450:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000452:	4b0e      	ldr	r3, [pc, #56]	@ (800048c <MX_SPI1_Init+0x74>)
 8000454:	2200      	movs	r2, #0
 8000456:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000458:	4b0c      	ldr	r3, [pc, #48]	@ (800048c <MX_SPI1_Init+0x74>)
 800045a:	2200      	movs	r2, #0
 800045c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800045e:	4b0b      	ldr	r3, [pc, #44]	@ (800048c <MX_SPI1_Init+0x74>)
 8000460:	2200      	movs	r2, #0
 8000462:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000464:	4b09      	ldr	r3, [pc, #36]	@ (800048c <MX_SPI1_Init+0x74>)
 8000466:	2207      	movs	r2, #7
 8000468:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800046a:	4b08      	ldr	r3, [pc, #32]	@ (800048c <MX_SPI1_Init+0x74>)
 800046c:	2200      	movs	r2, #0
 800046e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000470:	4b06      	ldr	r3, [pc, #24]	@ (800048c <MX_SPI1_Init+0x74>)
 8000472:	2200      	movs	r2, #0
 8000474:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000476:	4805      	ldr	r0, [pc, #20]	@ (800048c <MX_SPI1_Init+0x74>)
 8000478:	f001 ff9d 	bl	80023b6 <HAL_SPI_Init>
 800047c:	4603      	mov	r3, r0
 800047e:	2b00      	cmp	r3, #0
 8000480:	d001      	beq.n	8000486 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000482:	f000 f869 	bl	8000558 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000486:	bf00      	nop
 8000488:	bd80      	pop	{r7, pc}
 800048a:	bf00      	nop
 800048c:	20000060 	.word	0x20000060
 8000490:	40013000 	.word	0x40013000

08000494 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000494:	b580      	push	{r7, lr}
 8000496:	b088      	sub	sp, #32
 8000498:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800049a:	f107 030c 	add.w	r3, r7, #12
 800049e:	2200      	movs	r2, #0
 80004a0:	601a      	str	r2, [r3, #0]
 80004a2:	605a      	str	r2, [r3, #4]
 80004a4:	609a      	str	r2, [r3, #8]
 80004a6:	60da      	str	r2, [r3, #12]
 80004a8:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80004aa:	4b29      	ldr	r3, [pc, #164]	@ (8000550 <MX_GPIO_Init+0xbc>)
 80004ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80004ae:	4a28      	ldr	r2, [pc, #160]	@ (8000550 <MX_GPIO_Init+0xbc>)
 80004b0:	f043 0320 	orr.w	r3, r3, #32
 80004b4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80004b6:	4b26      	ldr	r3, [pc, #152]	@ (8000550 <MX_GPIO_Init+0xbc>)
 80004b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80004ba:	f003 0320 	and.w	r3, r3, #32
 80004be:	60bb      	str	r3, [r7, #8]
 80004c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004c2:	4b23      	ldr	r3, [pc, #140]	@ (8000550 <MX_GPIO_Init+0xbc>)
 80004c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80004c6:	4a22      	ldr	r2, [pc, #136]	@ (8000550 <MX_GPIO_Init+0xbc>)
 80004c8:	f043 0301 	orr.w	r3, r3, #1
 80004cc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80004ce:	4b20      	ldr	r3, [pc, #128]	@ (8000550 <MX_GPIO_Init+0xbc>)
 80004d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80004d2:	f003 0301 	and.w	r3, r3, #1
 80004d6:	607b      	str	r3, [r7, #4]
 80004d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004da:	4b1d      	ldr	r3, [pc, #116]	@ (8000550 <MX_GPIO_Init+0xbc>)
 80004dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80004de:	4a1c      	ldr	r2, [pc, #112]	@ (8000550 <MX_GPIO_Init+0xbc>)
 80004e0:	f043 0302 	orr.w	r3, r3, #2
 80004e4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80004e6:	4b1a      	ldr	r3, [pc, #104]	@ (8000550 <MX_GPIO_Init+0xbc>)
 80004e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80004ea:	f003 0302 	and.w	r3, r3, #2
 80004ee:	603b      	str	r3, [r7, #0]
 80004f0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_SET);
 80004f2:	2201      	movs	r2, #1
 80004f4:	2118      	movs	r1, #24
 80004f6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80004fa:	f000 ff5d 	bl	80013b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA3 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 80004fe:	2318      	movs	r3, #24
 8000500:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000502:	2301      	movs	r3, #1
 8000504:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000506:	2300      	movs	r3, #0
 8000508:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800050a:	2302      	movs	r3, #2
 800050c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800050e:	f107 030c 	add.w	r3, r7, #12
 8000512:	4619      	mov	r1, r3
 8000514:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000518:	f000 fdcc 	bl	80010b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800051c:	2301      	movs	r3, #1
 800051e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000520:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000524:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000526:	2302      	movs	r3, #2
 8000528:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800052a:	f107 030c 	add.w	r3, r7, #12
 800052e:	4619      	mov	r1, r3
 8000530:	4808      	ldr	r0, [pc, #32]	@ (8000554 <MX_GPIO_Init+0xc0>)
 8000532:	f000 fdbf 	bl	80010b4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000536:	2200      	movs	r2, #0
 8000538:	2100      	movs	r1, #0
 800053a:	2006      	movs	r0, #6
 800053c:	f000 fc2b 	bl	8000d96 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000540:	2006      	movs	r0, #6
 8000542:	f000 fc42 	bl	8000dca <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000546:	bf00      	nop
 8000548:	3720      	adds	r7, #32
 800054a:	46bd      	mov	sp, r7
 800054c:	bd80      	pop	{r7, pc}
 800054e:	bf00      	nop
 8000550:	40021000 	.word	0x40021000
 8000554:	48000400 	.word	0x48000400

08000558 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000558:	b480      	push	{r7}
 800055a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800055c:	b672      	cpsid	i
}
 800055e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000560:	bf00      	nop
 8000562:	e7fd      	b.n	8000560 <Error_Handler+0x8>

08000564 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b082      	sub	sp, #8
 8000568:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800056a:	4b0f      	ldr	r3, [pc, #60]	@ (80005a8 <HAL_MspInit+0x44>)
 800056c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800056e:	4a0e      	ldr	r2, [pc, #56]	@ (80005a8 <HAL_MspInit+0x44>)
 8000570:	f043 0301 	orr.w	r3, r3, #1
 8000574:	6613      	str	r3, [r2, #96]	@ 0x60
 8000576:	4b0c      	ldr	r3, [pc, #48]	@ (80005a8 <HAL_MspInit+0x44>)
 8000578:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800057a:	f003 0301 	and.w	r3, r3, #1
 800057e:	607b      	str	r3, [r7, #4]
 8000580:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000582:	4b09      	ldr	r3, [pc, #36]	@ (80005a8 <HAL_MspInit+0x44>)
 8000584:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000586:	4a08      	ldr	r2, [pc, #32]	@ (80005a8 <HAL_MspInit+0x44>)
 8000588:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800058c:	6593      	str	r3, [r2, #88]	@ 0x58
 800058e:	4b06      	ldr	r3, [pc, #24]	@ (80005a8 <HAL_MspInit+0x44>)
 8000590:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000592:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000596:	603b      	str	r3, [r7, #0]
 8000598:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800059a:	f000 ffe1 	bl	8001560 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800059e:	bf00      	nop
 80005a0:	3708      	adds	r7, #8
 80005a2:	46bd      	mov	sp, r7
 80005a4:	bd80      	pop	{r7, pc}
 80005a6:	bf00      	nop
 80005a8:	40021000 	.word	0x40021000

080005ac <HAL_CRC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcrc: CRC handle pointer
  * @retval None
  */
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80005ac:	b480      	push	{r7}
 80005ae:	b085      	sub	sp, #20
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	4a0a      	ldr	r2, [pc, #40]	@ (80005e4 <HAL_CRC_MspInit+0x38>)
 80005ba:	4293      	cmp	r3, r2
 80005bc:	d10b      	bne.n	80005d6 <HAL_CRC_MspInit+0x2a>
  {
    /* USER CODE BEGIN CRC_MspInit 0 */

    /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80005be:	4b0a      	ldr	r3, [pc, #40]	@ (80005e8 <HAL_CRC_MspInit+0x3c>)
 80005c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80005c2:	4a09      	ldr	r2, [pc, #36]	@ (80005e8 <HAL_CRC_MspInit+0x3c>)
 80005c4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80005c8:	6493      	str	r3, [r2, #72]	@ 0x48
 80005ca:	4b07      	ldr	r3, [pc, #28]	@ (80005e8 <HAL_CRC_MspInit+0x3c>)
 80005cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80005ce:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80005d2:	60fb      	str	r3, [r7, #12]
 80005d4:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END CRC_MspInit 1 */

  }

}
 80005d6:	bf00      	nop
 80005d8:	3714      	adds	r7, #20
 80005da:	46bd      	mov	sp, r7
 80005dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop
 80005e4:	40023000 	.word	0x40023000
 80005e8:	40021000 	.word	0x40021000

080005ec <HAL_RNG_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrng: RNG handle pointer
  * @retval None
  */
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b094      	sub	sp, #80	@ 0x50
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80005f4:	f107 030c 	add.w	r3, r7, #12
 80005f8:	2244      	movs	r2, #68	@ 0x44
 80005fa:	2100      	movs	r1, #0
 80005fc:	4618      	mov	r0, r3
 80005fe:	f002 ff2f 	bl	8003460 <memset>
  if(hrng->Instance==RNG)
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	681b      	ldr	r3, [r3, #0]
 8000606:	4a11      	ldr	r2, [pc, #68]	@ (800064c <HAL_RNG_MspInit+0x60>)
 8000608:	4293      	cmp	r3, r2
 800060a:	d11b      	bne.n	8000644 <HAL_RNG_MspInit+0x58>

    /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 800060c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000610:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RngClockSelection = RCC_RNGCLKSOURCE_PLL;
 8000612:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000616:	647b      	str	r3, [r7, #68]	@ 0x44
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000618:	f107 030c 	add.w	r3, r7, #12
 800061c:	4618      	mov	r0, r3
 800061e:	f001 fca5 	bl	8001f6c <HAL_RCCEx_PeriphCLKConfig>
 8000622:	4603      	mov	r3, r0
 8000624:	2b00      	cmp	r3, #0
 8000626:	d001      	beq.n	800062c <HAL_RNG_MspInit+0x40>
    {
      Error_Handler();
 8000628:	f7ff ff96 	bl	8000558 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 800062c:	4b08      	ldr	r3, [pc, #32]	@ (8000650 <HAL_RNG_MspInit+0x64>)
 800062e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000630:	4a07      	ldr	r2, [pc, #28]	@ (8000650 <HAL_RNG_MspInit+0x64>)
 8000632:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000636:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000638:	4b05      	ldr	r3, [pc, #20]	@ (8000650 <HAL_RNG_MspInit+0x64>)
 800063a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800063c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000640:	60bb      	str	r3, [r7, #8]
 8000642:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END RNG_MspInit 1 */

  }

}
 8000644:	bf00      	nop
 8000646:	3750      	adds	r7, #80	@ 0x50
 8000648:	46bd      	mov	sp, r7
 800064a:	bd80      	pop	{r7, pc}
 800064c:	50060800 	.word	0x50060800
 8000650:	40021000 	.word	0x40021000

08000654 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b08a      	sub	sp, #40	@ 0x28
 8000658:	af00      	add	r7, sp, #0
 800065a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800065c:	f107 0314 	add.w	r3, r7, #20
 8000660:	2200      	movs	r2, #0
 8000662:	601a      	str	r2, [r3, #0]
 8000664:	605a      	str	r2, [r3, #4]
 8000666:	609a      	str	r2, [r3, #8]
 8000668:	60da      	str	r2, [r3, #12]
 800066a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	4a1b      	ldr	r2, [pc, #108]	@ (80006e0 <HAL_SPI_MspInit+0x8c>)
 8000672:	4293      	cmp	r3, r2
 8000674:	d130      	bne.n	80006d8 <HAL_SPI_MspInit+0x84>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000676:	4b1b      	ldr	r3, [pc, #108]	@ (80006e4 <HAL_SPI_MspInit+0x90>)
 8000678:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800067a:	4a1a      	ldr	r2, [pc, #104]	@ (80006e4 <HAL_SPI_MspInit+0x90>)
 800067c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000680:	6613      	str	r3, [r2, #96]	@ 0x60
 8000682:	4b18      	ldr	r3, [pc, #96]	@ (80006e4 <HAL_SPI_MspInit+0x90>)
 8000684:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000686:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800068a:	613b      	str	r3, [r7, #16]
 800068c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800068e:	4b15      	ldr	r3, [pc, #84]	@ (80006e4 <HAL_SPI_MspInit+0x90>)
 8000690:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000692:	4a14      	ldr	r2, [pc, #80]	@ (80006e4 <HAL_SPI_MspInit+0x90>)
 8000694:	f043 0301 	orr.w	r3, r3, #1
 8000698:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800069a:	4b12      	ldr	r3, [pc, #72]	@ (80006e4 <HAL_SPI_MspInit+0x90>)
 800069c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800069e:	f003 0301 	and.w	r3, r3, #1
 80006a2:	60fb      	str	r3, [r7, #12]
 80006a4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80006a6:	23e0      	movs	r3, #224	@ 0xe0
 80006a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006aa:	2302      	movs	r3, #2
 80006ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ae:	2300      	movs	r3, #0
 80006b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006b2:	2300      	movs	r3, #0
 80006b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80006b6:	2305      	movs	r3, #5
 80006b8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006ba:	f107 0314 	add.w	r3, r7, #20
 80006be:	4619      	mov	r1, r3
 80006c0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006c4:	f000 fcf6 	bl	80010b4 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 80006c8:	2200      	movs	r2, #0
 80006ca:	2100      	movs	r1, #0
 80006cc:	2023      	movs	r0, #35	@ 0x23
 80006ce:	f000 fb62 	bl	8000d96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80006d2:	2023      	movs	r0, #35	@ 0x23
 80006d4:	f000 fb79 	bl	8000dca <HAL_NVIC_EnableIRQ>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 80006d8:	bf00      	nop
 80006da:	3728      	adds	r7, #40	@ 0x28
 80006dc:	46bd      	mov	sp, r7
 80006de:	bd80      	pop	{r7, pc}
 80006e0:	40013000 	.word	0x40013000
 80006e4:	40021000 	.word	0x40021000

080006e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006e8:	b480      	push	{r7}
 80006ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80006ec:	bf00      	nop
 80006ee:	e7fd      	b.n	80006ec <NMI_Handler+0x4>

080006f0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006f0:	b480      	push	{r7}
 80006f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006f4:	bf00      	nop
 80006f6:	e7fd      	b.n	80006f4 <HardFault_Handler+0x4>

080006f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006f8:	b480      	push	{r7}
 80006fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006fc:	bf00      	nop
 80006fe:	e7fd      	b.n	80006fc <MemManage_Handler+0x4>

08000700 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000700:	b480      	push	{r7}
 8000702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000704:	bf00      	nop
 8000706:	e7fd      	b.n	8000704 <BusFault_Handler+0x4>

08000708 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000708:	b480      	push	{r7}
 800070a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800070c:	bf00      	nop
 800070e:	e7fd      	b.n	800070c <UsageFault_Handler+0x4>

08000710 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000710:	b480      	push	{r7}
 8000712:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000714:	bf00      	nop
 8000716:	46bd      	mov	sp, r7
 8000718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071c:	4770      	bx	lr

0800071e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800071e:	b480      	push	{r7}
 8000720:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000722:	bf00      	nop
 8000724:	46bd      	mov	sp, r7
 8000726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072a:	4770      	bx	lr

0800072c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800072c:	b480      	push	{r7}
 800072e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000730:	bf00      	nop
 8000732:	46bd      	mov	sp, r7
 8000734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000738:	4770      	bx	lr

0800073a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800073a:	b580      	push	{r7, lr}
 800073c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800073e:	f000 fa0f 	bl	8000b60 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000742:	bf00      	nop
 8000744:	bd80      	pop	{r7, pc}

08000746 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000746:	b580      	push	{r7, lr}
 8000748:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 800074a:	2001      	movs	r0, #1
 800074c:	f000 fe4c 	bl	80013e8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000750:	bf00      	nop
 8000752:	bd80      	pop	{r7, pc}

08000754 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8000758:	4802      	ldr	r0, [pc, #8]	@ (8000764 <SPI1_IRQHandler+0x10>)
 800075a:	f002 fba5 	bl	8002ea8 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800075e:	bf00      	nop
 8000760:	bd80      	pop	{r7, pc}
 8000762:	bf00      	nop
 8000764:	20000060 	.word	0x20000060

08000768 <SX1272_Select>:
#include <string.h>

uint8_t SX1272_RxBuffer[256];
volatile uint8_t SX1272_RxLength = 0;

static void SX1272_Select(void)   { HAL_GPIO_WritePin(SX1272_NSS_PORT, SX1272_NSS_PIN, GPIO_PIN_RESET); }
 8000768:	b580      	push	{r7, lr}
 800076a:	af00      	add	r7, sp, #0
 800076c:	2200      	movs	r2, #0
 800076e:	2110      	movs	r1, #16
 8000770:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000774:	f000 fe20 	bl	80013b8 <HAL_GPIO_WritePin>
 8000778:	bf00      	nop
 800077a:	bd80      	pop	{r7, pc}

0800077c <SX1272_Unselect>:
static void SX1272_Unselect(void) { HAL_GPIO_WritePin(SX1272_NSS_PORT, SX1272_NSS_PIN, GPIO_PIN_SET); }
 800077c:	b580      	push	{r7, lr}
 800077e:	af00      	add	r7, sp, #0
 8000780:	2201      	movs	r2, #1
 8000782:	2110      	movs	r1, #16
 8000784:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000788:	f000 fe16 	bl	80013b8 <HAL_GPIO_WritePin>
 800078c:	bf00      	nop
 800078e:	bd80      	pop	{r7, pc}

08000790 <SX1272_Reset>:

void SX1272_Reset(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(SX1272_RESET_PORT, SX1272_RESET_PIN, GPIO_PIN_RESET);
 8000794:	2200      	movs	r2, #0
 8000796:	2108      	movs	r1, #8
 8000798:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800079c:	f000 fe0c 	bl	80013b8 <HAL_GPIO_WritePin>
    HAL_Delay(1); // >100 µs
 80007a0:	2001      	movs	r0, #1
 80007a2:	f000 f9fb 	bl	8000b9c <HAL_Delay>
    HAL_GPIO_WritePin(SX1272_RESET_PORT, SX1272_RESET_PIN, GPIO_PIN_SET);
 80007a6:	2201      	movs	r2, #1
 80007a8:	2108      	movs	r1, #8
 80007aa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007ae:	f000 fe03 	bl	80013b8 <HAL_GPIO_WritePin>
    HAL_Delay(5); // >5 ms
 80007b2:	2005      	movs	r0, #5
 80007b4:	f000 f9f2 	bl	8000b9c <HAL_Delay>
}
 80007b8:	bf00      	nop
 80007ba:	bd80      	pop	{r7, pc}

080007bc <SX1272_WriteReg>:

void SX1272_WriteReg(uint8_t addr, uint8_t data)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b082      	sub	sp, #8
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	4603      	mov	r3, r0
 80007c4:	460a      	mov	r2, r1
 80007c6:	71fb      	strb	r3, [r7, #7]
 80007c8:	4613      	mov	r3, r2
 80007ca:	71bb      	strb	r3, [r7, #6]
    addr |= 0x80; // MSB=1 for write
 80007cc:	79fb      	ldrb	r3, [r7, #7]
 80007ce:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80007d2:	b2db      	uxtb	r3, r3
 80007d4:	71fb      	strb	r3, [r7, #7]
    SX1272_Select();
 80007d6:	f7ff ffc7 	bl	8000768 <SX1272_Select>
    HAL_SPI_Transmit(&hspi1, &addr, 1, HAL_MAX_DELAY);
 80007da:	1df9      	adds	r1, r7, #7
 80007dc:	f04f 33ff 	mov.w	r3, #4294967295
 80007e0:	2201      	movs	r2, #1
 80007e2:	4808      	ldr	r0, [pc, #32]	@ (8000804 <SX1272_WriteReg+0x48>)
 80007e4:	f001 fe92 	bl	800250c <HAL_SPI_Transmit>
    HAL_SPI_Transmit(&hspi1, &data, 1, HAL_MAX_DELAY);
 80007e8:	1db9      	adds	r1, r7, #6
 80007ea:	f04f 33ff 	mov.w	r3, #4294967295
 80007ee:	2201      	movs	r2, #1
 80007f0:	4804      	ldr	r0, [pc, #16]	@ (8000804 <SX1272_WriteReg+0x48>)
 80007f2:	f001 fe8b 	bl	800250c <HAL_SPI_Transmit>
    SX1272_Unselect();
 80007f6:	f7ff ffc1 	bl	800077c <SX1272_Unselect>
}
 80007fa:	bf00      	nop
 80007fc:	3708      	adds	r7, #8
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}
 8000802:	bf00      	nop
 8000804:	20000060 	.word	0x20000060

08000808 <SX1272_ReadReg>:

uint8_t SX1272_ReadReg(uint8_t addr)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b084      	sub	sp, #16
 800080c:	af00      	add	r7, sp, #0
 800080e:	4603      	mov	r3, r0
 8000810:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    SX1272_Select();
 8000812:	f7ff ffa9 	bl	8000768 <SX1272_Select>
    HAL_SPI_Transmit(&hspi1, &addr, 1, HAL_MAX_DELAY);
 8000816:	1df9      	adds	r1, r7, #7
 8000818:	f04f 33ff 	mov.w	r3, #4294967295
 800081c:	2201      	movs	r2, #1
 800081e:	4809      	ldr	r0, [pc, #36]	@ (8000844 <SX1272_ReadReg+0x3c>)
 8000820:	f001 fe74 	bl	800250c <HAL_SPI_Transmit>
    HAL_SPI_Receive(&hspi1, &value, 1, HAL_MAX_DELAY);
 8000824:	f107 010f 	add.w	r1, r7, #15
 8000828:	f04f 33ff 	mov.w	r3, #4294967295
 800082c:	2201      	movs	r2, #1
 800082e:	4805      	ldr	r0, [pc, #20]	@ (8000844 <SX1272_ReadReg+0x3c>)
 8000830:	f001 ffe2 	bl	80027f8 <HAL_SPI_Receive>
    SX1272_Unselect();
 8000834:	f7ff ffa2 	bl	800077c <SX1272_Unselect>
    return value;
 8000838:	7bfb      	ldrb	r3, [r7, #15]
}
 800083a:	4618      	mov	r0, r3
 800083c:	3710      	adds	r7, #16
 800083e:	46bd      	mov	sp, r7
 8000840:	bd80      	pop	{r7, pc}
 8000842:	bf00      	nop
 8000844:	20000060 	.word	0x20000060

08000848 <SX1272_WriteBuffer>:

void SX1272_WriteBuffer(uint8_t addr, uint8_t *buffer, uint8_t size)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b082      	sub	sp, #8
 800084c:	af00      	add	r7, sp, #0
 800084e:	4603      	mov	r3, r0
 8000850:	6039      	str	r1, [r7, #0]
 8000852:	71fb      	strb	r3, [r7, #7]
 8000854:	4613      	mov	r3, r2
 8000856:	71bb      	strb	r3, [r7, #6]
    addr |= 0x80;
 8000858:	79fb      	ldrb	r3, [r7, #7]
 800085a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800085e:	b2db      	uxtb	r3, r3
 8000860:	71fb      	strb	r3, [r7, #7]
    SX1272_Select();
 8000862:	f7ff ff81 	bl	8000768 <SX1272_Select>
    HAL_SPI_Transmit(&hspi1, &addr, 1, HAL_MAX_DELAY);
 8000866:	1df9      	adds	r1, r7, #7
 8000868:	f04f 33ff 	mov.w	r3, #4294967295
 800086c:	2201      	movs	r2, #1
 800086e:	4808      	ldr	r0, [pc, #32]	@ (8000890 <SX1272_WriteBuffer+0x48>)
 8000870:	f001 fe4c 	bl	800250c <HAL_SPI_Transmit>
    HAL_SPI_Transmit(&hspi1, buffer, size, HAL_MAX_DELAY);
 8000874:	79bb      	ldrb	r3, [r7, #6]
 8000876:	b29a      	uxth	r2, r3
 8000878:	f04f 33ff 	mov.w	r3, #4294967295
 800087c:	6839      	ldr	r1, [r7, #0]
 800087e:	4804      	ldr	r0, [pc, #16]	@ (8000890 <SX1272_WriteBuffer+0x48>)
 8000880:	f001 fe44 	bl	800250c <HAL_SPI_Transmit>
    SX1272_Unselect();
 8000884:	f7ff ff7a 	bl	800077c <SX1272_Unselect>
}
 8000888:	bf00      	nop
 800088a:	3708      	adds	r7, #8
 800088c:	46bd      	mov	sp, r7
 800088e:	bd80      	pop	{r7, pc}
 8000890:	20000060 	.word	0x20000060

08000894 <SX1272_ReadBuffer>:

void SX1272_ReadBuffer(uint8_t addr, uint8_t *buffer, uint8_t size)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b082      	sub	sp, #8
 8000898:	af00      	add	r7, sp, #0
 800089a:	4603      	mov	r3, r0
 800089c:	6039      	str	r1, [r7, #0]
 800089e:	71fb      	strb	r3, [r7, #7]
 80008a0:	4613      	mov	r3, r2
 80008a2:	71bb      	strb	r3, [r7, #6]
    SX1272_Select();
 80008a4:	f7ff ff60 	bl	8000768 <SX1272_Select>
    HAL_SPI_Transmit(&hspi1, &addr, 1, HAL_MAX_DELAY);
 80008a8:	1df9      	adds	r1, r7, #7
 80008aa:	f04f 33ff 	mov.w	r3, #4294967295
 80008ae:	2201      	movs	r2, #1
 80008b0:	4808      	ldr	r0, [pc, #32]	@ (80008d4 <SX1272_ReadBuffer+0x40>)
 80008b2:	f001 fe2b 	bl	800250c <HAL_SPI_Transmit>
    HAL_SPI_Receive(&hspi1, buffer, size, HAL_MAX_DELAY);
 80008b6:	79bb      	ldrb	r3, [r7, #6]
 80008b8:	b29a      	uxth	r2, r3
 80008ba:	f04f 33ff 	mov.w	r3, #4294967295
 80008be:	6839      	ldr	r1, [r7, #0]
 80008c0:	4804      	ldr	r0, [pc, #16]	@ (80008d4 <SX1272_ReadBuffer+0x40>)
 80008c2:	f001 ff99 	bl	80027f8 <HAL_SPI_Receive>
    SX1272_Unselect();
 80008c6:	f7ff ff59 	bl	800077c <SX1272_Unselect>
}
 80008ca:	bf00      	nop
 80008cc:	3708      	adds	r7, #8
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	bf00      	nop
 80008d4:	20000060 	.word	0x20000060

080008d8 <SX1272_SetupLora>:

void SX1272_SetupLora(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	af00      	add	r7, sp, #0
    // Sleep then LoRa mode
    SX1272_WriteReg(REG_OP_MODE, SX1272_MODE_SLEEP | SX1272_MODE_LORA);
 80008dc:	2180      	movs	r1, #128	@ 0x80
 80008de:	2001      	movs	r0, #1
 80008e0:	f7ff ff6c 	bl	80007bc <SX1272_WriteReg>
    HAL_Delay(10);
 80008e4:	200a      	movs	r0, #10
 80008e6:	f000 f959 	bl	8000b9c <HAL_Delay>

    // Standby
    SX1272_WriteReg(REG_OP_MODE, SX1272_MODE_STDBY | SX1272_MODE_LORA);
 80008ea:	2181      	movs	r1, #129	@ 0x81
 80008ec:	2001      	movs	r0, #1
 80008ee:	f7ff ff65 	bl	80007bc <SX1272_WriteReg>

    // Base addresses
    SX1272_WriteReg(REG_FIFO_TX_BASE_ADDR, 0x00);
 80008f2:	2100      	movs	r1, #0
 80008f4:	200e      	movs	r0, #14
 80008f6:	f7ff ff61 	bl	80007bc <SX1272_WriteReg>
    SX1272_WriteReg(REG_FIFO_RX_BASE_ADDR, 0x00);
 80008fa:	2100      	movs	r1, #0
 80008fc:	200f      	movs	r0, #15
 80008fe:	f7ff ff5d 	bl	80007bc <SX1272_WriteReg>

    // Modem config (BW=125kHz, CR=4/5, SF=7)
    SX1272_WriteReg(REG_MODEM_CONFIG1, 0x72);
 8000902:	2172      	movs	r1, #114	@ 0x72
 8000904:	201d      	movs	r0, #29
 8000906:	f7ff ff59 	bl	80007bc <SX1272_WriteReg>
    SX1272_WriteReg(REG_MODEM_CONFIG2, 0x74);
 800090a:	2174      	movs	r1, #116	@ 0x74
 800090c:	201e      	movs	r0, #30
 800090e:	f7ff ff55 	bl	80007bc <SX1272_WriteReg>


    // Map DIO0: RxDone=00, TxDone=01 depending on mode
    SX1272_WriteReg(REG_DIO_MAPPING1, 0x00);
 8000912:	2100      	movs	r1, #0
 8000914:	2040      	movs	r0, #64	@ 0x40
 8000916:	f7ff ff51 	bl	80007bc <SX1272_WriteReg>
}
 800091a:	bf00      	nop
 800091c:	bd80      	pop	{r7, pc}

0800091e <SX1272_Init>:

void SX1272_Init(void)
{
 800091e:	b580      	push	{r7, lr}
 8000920:	af00      	add	r7, sp, #0
    SX1272_Reset();
 8000922:	f7ff ff35 	bl	8000790 <SX1272_Reset>
    SX1272_SetupLora();
 8000926:	f7ff ffd7 	bl	80008d8 <SX1272_SetupLora>
}
 800092a:	bf00      	nop
 800092c:	bd80      	pop	{r7, pc}

0800092e <SX1272_Transmit>:

void SX1272_Transmit(uint8_t *data, uint8_t size)
{
 800092e:	b580      	push	{r7, lr}
 8000930:	b082      	sub	sp, #8
 8000932:	af00      	add	r7, sp, #0
 8000934:	6078      	str	r0, [r7, #4]
 8000936:	460b      	mov	r3, r1
 8000938:	70fb      	strb	r3, [r7, #3]
    // Map DIO0 to TxDone
    SX1272_WriteReg(REG_DIO_MAPPING1, 0x40);
 800093a:	2140      	movs	r1, #64	@ 0x40
 800093c:	2040      	movs	r0, #64	@ 0x40
 800093e:	f7ff ff3d 	bl	80007bc <SX1272_WriteReg>

    SX1272_WriteReg(REG_OP_MODE, SX1272_MODE_STDBY | SX1272_MODE_LORA);
 8000942:	2181      	movs	r1, #129	@ 0x81
 8000944:	2001      	movs	r0, #1
 8000946:	f7ff ff39 	bl	80007bc <SX1272_WriteReg>
    SX1272_WriteReg(REG_FIFO_ADDR_PTR, 0x00);
 800094a:	2100      	movs	r1, #0
 800094c:	200d      	movs	r0, #13
 800094e:	f7ff ff35 	bl	80007bc <SX1272_WriteReg>
    SX1272_WriteBuffer(REG_FIFO, data, size);
 8000952:	78fb      	ldrb	r3, [r7, #3]
 8000954:	461a      	mov	r2, r3
 8000956:	6879      	ldr	r1, [r7, #4]
 8000958:	2000      	movs	r0, #0
 800095a:	f7ff ff75 	bl	8000848 <SX1272_WriteBuffer>
    SX1272_WriteReg(REG_PAYLOAD_LENGTH, size);
 800095e:	78fb      	ldrb	r3, [r7, #3]
 8000960:	4619      	mov	r1, r3
 8000962:	2022      	movs	r0, #34	@ 0x22
 8000964:	f7ff ff2a 	bl	80007bc <SX1272_WriteReg>

    SX1272_WriteReg(REG_IRQ_FLAGS, 0xFF); // Clear all IRQs
 8000968:	21ff      	movs	r1, #255	@ 0xff
 800096a:	2012      	movs	r0, #18
 800096c:	f7ff ff26 	bl	80007bc <SX1272_WriteReg>
    SX1272_WriteReg(REG_OP_MODE, SX1272_MODE_TX | SX1272_MODE_LORA);
 8000970:	2183      	movs	r1, #131	@ 0x83
 8000972:	2001      	movs	r0, #1
 8000974:	f7ff ff22 	bl	80007bc <SX1272_WriteReg>
}
 8000978:	bf00      	nop
 800097a:	3708      	adds	r7, #8
 800097c:	46bd      	mov	sp, r7
 800097e:	bd80      	pop	{r7, pc}

08000980 <SX1272_Receive>:

void SX1272_Receive(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	af00      	add	r7, sp, #0
    // Map DIO0 to RxDone
    SX1272_WriteReg(REG_DIO_MAPPING1, 0x00);
 8000984:	2100      	movs	r1, #0
 8000986:	2040      	movs	r0, #64	@ 0x40
 8000988:	f7ff ff18 	bl	80007bc <SX1272_WriteReg>

    SX1272_WriteReg(REG_IRQ_FLAGS, 0xFF); // Clear all IRQs
 800098c:	21ff      	movs	r1, #255	@ 0xff
 800098e:	2012      	movs	r0, #18
 8000990:	f7ff ff14 	bl	80007bc <SX1272_WriteReg>
    SX1272_WriteReg(REG_OP_MODE, SX1272_MODE_RX_CONT | SX1272_MODE_LORA);
 8000994:	2185      	movs	r1, #133	@ 0x85
 8000996:	2001      	movs	r0, #1
 8000998:	f7ff ff10 	bl	80007bc <SX1272_WriteReg>
}
 800099c:	bf00      	nop
 800099e:	bd80      	pop	{r7, pc}

080009a0 <SX1272_HandleDIO0>:

void SX1272_HandleDIO0(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b082      	sub	sp, #8
 80009a4:	af00      	add	r7, sp, #0
    uint8_t irqFlags = SX1272_ReadReg(REG_IRQ_FLAGS);
 80009a6:	2012      	movs	r0, #18
 80009a8:	f7ff ff2e 	bl	8000808 <SX1272_ReadReg>
 80009ac:	4603      	mov	r3, r0
 80009ae:	71fb      	strb	r3, [r7, #7]

    // Always clear ALL interrupts first
    SX1272_WriteReg(REG_IRQ_FLAGS, 0xFF);  // Clear all flags
 80009b0:	21ff      	movs	r1, #255	@ 0xff
 80009b2:	2012      	movs	r0, #18
 80009b4:	f7ff ff02 	bl	80007bc <SX1272_WriteReg>

    if (irqFlags & IRQ_RX_DONE_MASK)
 80009b8:	79fb      	ldrb	r3, [r7, #7]
 80009ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d031      	beq.n	8000a26 <SX1272_HandleDIO0+0x86>
    {
        if (!(irqFlags & IRQ_CRC_ERROR_MASK))
 80009c2:	79fb      	ldrb	r3, [r7, #7]
 80009c4:	f003 0320 	and.w	r3, r3, #32
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d133      	bne.n	8000a34 <SX1272_HandleDIO0+0x94>
        {
            // 1. Get payload length FIRST
            SX1272_RxLength = SX1272_ReadReg(REG_RX_NB_BYTES);
 80009cc:	2013      	movs	r0, #19
 80009ce:	f7ff ff1b 	bl	8000808 <SX1272_ReadReg>
 80009d2:	4603      	mov	r3, r0
 80009d4:	461a      	mov	r2, r3
 80009d6:	4b19      	ldr	r3, [pc, #100]	@ (8000a3c <SX1272_HandleDIO0+0x9c>)
 80009d8:	701a      	strb	r2, [r3, #0]

            // 2. Get current FIFO address
            uint8_t currentAddr = SX1272_ReadReg(REG_FIFO_RX_CURRENT);
 80009da:	2010      	movs	r0, #16
 80009dc:	f7ff ff14 	bl	8000808 <SX1272_ReadReg>
 80009e0:	4603      	mov	r3, r0
 80009e2:	71bb      	strb	r3, [r7, #6]

            // 3. Set FIFO pointer
            SX1272_WriteReg(REG_FIFO_ADDR_PTR, currentAddr);
 80009e4:	79bb      	ldrb	r3, [r7, #6]
 80009e6:	4619      	mov	r1, r3
 80009e8:	200d      	movs	r0, #13
 80009ea:	f7ff fee7 	bl	80007bc <SX1272_WriteReg>

            // 4. Read FIFO
            if(SX1272_RxLength > 0 && SX1272_RxLength <= 256) {
 80009ee:	4b13      	ldr	r3, [pc, #76]	@ (8000a3c <SX1272_HandleDIO0+0x9c>)
 80009f0:	781b      	ldrb	r3, [r3, #0]
 80009f2:	b2db      	uxtb	r3, r3
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d009      	beq.n	8000a0c <SX1272_HandleDIO0+0x6c>
 80009f8:	4b10      	ldr	r3, [pc, #64]	@ (8000a3c <SX1272_HandleDIO0+0x9c>)
 80009fa:	781b      	ldrb	r3, [r3, #0]
                SX1272_ReadBuffer(REG_FIFO, SX1272_RxBuffer, SX1272_RxLength);
 80009fc:	4b0f      	ldr	r3, [pc, #60]	@ (8000a3c <SX1272_HandleDIO0+0x9c>)
 80009fe:	781b      	ldrb	r3, [r3, #0]
 8000a00:	b2db      	uxtb	r3, r3
 8000a02:	461a      	mov	r2, r3
 8000a04:	490e      	ldr	r1, [pc, #56]	@ (8000a40 <SX1272_HandleDIO0+0xa0>)
 8000a06:	2000      	movs	r0, #0
 8000a08:	f7ff ff44 	bl	8000894 <SX1272_ReadBuffer>
            }

            // Optional: Null terminate if needed
            if (SX1272_RxLength < 255) {
 8000a0c:	4b0b      	ldr	r3, [pc, #44]	@ (8000a3c <SX1272_HandleDIO0+0x9c>)
 8000a0e:	781b      	ldrb	r3, [r3, #0]
 8000a10:	b2db      	uxtb	r3, r3
 8000a12:	2bff      	cmp	r3, #255	@ 0xff
 8000a14:	d00e      	beq.n	8000a34 <SX1272_HandleDIO0+0x94>
                SX1272_RxBuffer[SX1272_RxLength] = '\0';
 8000a16:	4b09      	ldr	r3, [pc, #36]	@ (8000a3c <SX1272_HandleDIO0+0x9c>)
 8000a18:	781b      	ldrb	r3, [r3, #0]
 8000a1a:	b2db      	uxtb	r3, r3
 8000a1c:	461a      	mov	r2, r3
 8000a1e:	4b08      	ldr	r3, [pc, #32]	@ (8000a40 <SX1272_HandleDIO0+0xa0>)
 8000a20:	2100      	movs	r1, #0
 8000a22:	5499      	strb	r1, [r3, r2]
    else if (irqFlags & IRQ_TX_DONE_MASK)
    {
        // Immediately return to RX mode after TX
        SX1272_Receive();
    }
}
 8000a24:	e006      	b.n	8000a34 <SX1272_HandleDIO0+0x94>
    else if (irqFlags & IRQ_TX_DONE_MASK)
 8000a26:	79fb      	ldrb	r3, [r7, #7]
 8000a28:	f003 0308 	and.w	r3, r3, #8
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d001      	beq.n	8000a34 <SX1272_HandleDIO0+0x94>
        SX1272_Receive();
 8000a30:	f7ff ffa6 	bl	8000980 <SX1272_Receive>
}
 8000a34:	bf00      	nop
 8000a36:	3708      	adds	r7, #8
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	bd80      	pop	{r7, pc}
 8000a3c:	200001cc 	.word	0x200001cc
 8000a40:	200000cc 	.word	0x200000cc

08000a44 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000a44:	b480      	push	{r7}
 8000a46:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000a48:	4b06      	ldr	r3, [pc, #24]	@ (8000a64 <SystemInit+0x20>)
 8000a4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a4e:	4a05      	ldr	r2, [pc, #20]	@ (8000a64 <SystemInit+0x20>)
 8000a50:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000a54:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a58:	bf00      	nop
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a60:	4770      	bx	lr
 8000a62:	bf00      	nop
 8000a64:	e000ed00 	.word	0xe000ed00

08000a68 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000a68:	480d      	ldr	r0, [pc, #52]	@ (8000aa0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000a6a:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a6c:	f7ff ffea 	bl	8000a44 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a70:	480c      	ldr	r0, [pc, #48]	@ (8000aa4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a72:	490d      	ldr	r1, [pc, #52]	@ (8000aa8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a74:	4a0d      	ldr	r2, [pc, #52]	@ (8000aac <LoopForever+0xe>)
  movs r3, #0
 8000a76:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000a78:	e002      	b.n	8000a80 <LoopCopyDataInit>

08000a7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a7e:	3304      	adds	r3, #4

08000a80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a84:	d3f9      	bcc.n	8000a7a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a86:	4a0a      	ldr	r2, [pc, #40]	@ (8000ab0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a88:	4c0a      	ldr	r4, [pc, #40]	@ (8000ab4 <LoopForever+0x16>)
  movs r3, #0
 8000a8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a8c:	e001      	b.n	8000a92 <LoopFillZerobss>

08000a8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a90:	3204      	adds	r2, #4

08000a92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a94:	d3fb      	bcc.n	8000a8e <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8000a96:	f002 fceb 	bl	8003470 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000a9a:	f7ff fbdd 	bl	8000258 <main>

08000a9e <LoopForever>:

LoopForever:
    b LoopForever
 8000a9e:	e7fe      	b.n	8000a9e <LoopForever>
  ldr   r0, =_estack
 8000aa0:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000aa4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000aa8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000aac:	080034fc 	.word	0x080034fc
  ldr r2, =_sbss
 8000ab0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000ab4:	200001d4 	.word	0x200001d4

08000ab8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ab8:	e7fe      	b.n	8000ab8 <ADC1_2_IRQHandler>

08000aba <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000aba:	b580      	push	{r7, lr}
 8000abc:	b082      	sub	sp, #8
 8000abe:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ac4:	2003      	movs	r0, #3
 8000ac6:	f000 f95b 	bl	8000d80 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000aca:	200f      	movs	r0, #15
 8000acc:	f000 f80e 	bl	8000aec <HAL_InitTick>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d002      	beq.n	8000adc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000ad6:	2301      	movs	r3, #1
 8000ad8:	71fb      	strb	r3, [r7, #7]
 8000ada:	e001      	b.n	8000ae0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000adc:	f7ff fd42 	bl	8000564 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ae0:	79fb      	ldrb	r3, [r7, #7]

}
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	3708      	adds	r7, #8
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bd80      	pop	{r7, pc}
	...

08000aec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b084      	sub	sp, #16
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000af4:	2300      	movs	r3, #0
 8000af6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000af8:	4b16      	ldr	r3, [pc, #88]	@ (8000b54 <HAL_InitTick+0x68>)
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d022      	beq.n	8000b46 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000b00:	4b15      	ldr	r3, [pc, #84]	@ (8000b58 <HAL_InitTick+0x6c>)
 8000b02:	681a      	ldr	r2, [r3, #0]
 8000b04:	4b13      	ldr	r3, [pc, #76]	@ (8000b54 <HAL_InitTick+0x68>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000b0c:	fbb1 f3f3 	udiv	r3, r1, r3
 8000b10:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b14:	4618      	mov	r0, r3
 8000b16:	f000 f966 	bl	8000de6 <HAL_SYSTICK_Config>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d10f      	bne.n	8000b40 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	2b0f      	cmp	r3, #15
 8000b24:	d809      	bhi.n	8000b3a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b26:	2200      	movs	r2, #0
 8000b28:	6879      	ldr	r1, [r7, #4]
 8000b2a:	f04f 30ff 	mov.w	r0, #4294967295
 8000b2e:	f000 f932 	bl	8000d96 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b32:	4a0a      	ldr	r2, [pc, #40]	@ (8000b5c <HAL_InitTick+0x70>)
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	6013      	str	r3, [r2, #0]
 8000b38:	e007      	b.n	8000b4a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000b3a:	2301      	movs	r3, #1
 8000b3c:	73fb      	strb	r3, [r7, #15]
 8000b3e:	e004      	b.n	8000b4a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000b40:	2301      	movs	r3, #1
 8000b42:	73fb      	strb	r3, [r7, #15]
 8000b44:	e001      	b.n	8000b4a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000b46:	2301      	movs	r3, #1
 8000b48:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000b4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	3710      	adds	r7, #16
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bd80      	pop	{r7, pc}
 8000b54:	20000008 	.word	0x20000008
 8000b58:	20000000 	.word	0x20000000
 8000b5c:	20000004 	.word	0x20000004

08000b60 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b64:	4b05      	ldr	r3, [pc, #20]	@ (8000b7c <HAL_IncTick+0x1c>)
 8000b66:	681a      	ldr	r2, [r3, #0]
 8000b68:	4b05      	ldr	r3, [pc, #20]	@ (8000b80 <HAL_IncTick+0x20>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	4413      	add	r3, r2
 8000b6e:	4a03      	ldr	r2, [pc, #12]	@ (8000b7c <HAL_IncTick+0x1c>)
 8000b70:	6013      	str	r3, [r2, #0]
}
 8000b72:	bf00      	nop
 8000b74:	46bd      	mov	sp, r7
 8000b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7a:	4770      	bx	lr
 8000b7c:	200001d0 	.word	0x200001d0
 8000b80:	20000008 	.word	0x20000008

08000b84 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	af00      	add	r7, sp, #0
  return uwTick;
 8000b88:	4b03      	ldr	r3, [pc, #12]	@ (8000b98 <HAL_GetTick+0x14>)
 8000b8a:	681b      	ldr	r3, [r3, #0]
}
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop
 8000b98:	200001d0 	.word	0x200001d0

08000b9c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b084      	sub	sp, #16
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ba4:	f7ff ffee 	bl	8000b84 <HAL_GetTick>
 8000ba8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000bae:	68fb      	ldr	r3, [r7, #12]
 8000bb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000bb4:	d004      	beq.n	8000bc0 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000bb6:	4b09      	ldr	r3, [pc, #36]	@ (8000bdc <HAL_Delay+0x40>)
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	68fa      	ldr	r2, [r7, #12]
 8000bbc:	4413      	add	r3, r2
 8000bbe:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000bc0:	bf00      	nop
 8000bc2:	f7ff ffdf 	bl	8000b84 <HAL_GetTick>
 8000bc6:	4602      	mov	r2, r0
 8000bc8:	68bb      	ldr	r3, [r7, #8]
 8000bca:	1ad3      	subs	r3, r2, r3
 8000bcc:	68fa      	ldr	r2, [r7, #12]
 8000bce:	429a      	cmp	r2, r3
 8000bd0:	d8f7      	bhi.n	8000bc2 <HAL_Delay+0x26>
  {
  }
}
 8000bd2:	bf00      	nop
 8000bd4:	bf00      	nop
 8000bd6:	3710      	adds	r7, #16
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bd80      	pop	{r7, pc}
 8000bdc:	20000008 	.word	0x20000008

08000be0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000be0:	b480      	push	{r7}
 8000be2:	b085      	sub	sp, #20
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	f003 0307 	and.w	r3, r3, #7
 8000bee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bf0:	4b0c      	ldr	r3, [pc, #48]	@ (8000c24 <__NVIC_SetPriorityGrouping+0x44>)
 8000bf2:	68db      	ldr	r3, [r3, #12]
 8000bf4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bf6:	68ba      	ldr	r2, [r7, #8]
 8000bf8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000bfc:	4013      	ands	r3, r2
 8000bfe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c00:	68fb      	ldr	r3, [r7, #12]
 8000c02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c04:	68bb      	ldr	r3, [r7, #8]
 8000c06:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c08:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000c0c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c12:	4a04      	ldr	r2, [pc, #16]	@ (8000c24 <__NVIC_SetPriorityGrouping+0x44>)
 8000c14:	68bb      	ldr	r3, [r7, #8]
 8000c16:	60d3      	str	r3, [r2, #12]
}
 8000c18:	bf00      	nop
 8000c1a:	3714      	adds	r7, #20
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c22:	4770      	bx	lr
 8000c24:	e000ed00 	.word	0xe000ed00

08000c28 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c2c:	4b04      	ldr	r3, [pc, #16]	@ (8000c40 <__NVIC_GetPriorityGrouping+0x18>)
 8000c2e:	68db      	ldr	r3, [r3, #12]
 8000c30:	0a1b      	lsrs	r3, r3, #8
 8000c32:	f003 0307 	and.w	r3, r3, #7
}
 8000c36:	4618      	mov	r0, r3
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3e:	4770      	bx	lr
 8000c40:	e000ed00 	.word	0xe000ed00

08000c44 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c44:	b480      	push	{r7}
 8000c46:	b083      	sub	sp, #12
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	db0b      	blt.n	8000c6e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c56:	79fb      	ldrb	r3, [r7, #7]
 8000c58:	f003 021f 	and.w	r2, r3, #31
 8000c5c:	4907      	ldr	r1, [pc, #28]	@ (8000c7c <__NVIC_EnableIRQ+0x38>)
 8000c5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c62:	095b      	lsrs	r3, r3, #5
 8000c64:	2001      	movs	r0, #1
 8000c66:	fa00 f202 	lsl.w	r2, r0, r2
 8000c6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000c6e:	bf00      	nop
 8000c70:	370c      	adds	r7, #12
 8000c72:	46bd      	mov	sp, r7
 8000c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c78:	4770      	bx	lr
 8000c7a:	bf00      	nop
 8000c7c:	e000e100 	.word	0xe000e100

08000c80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c80:	b480      	push	{r7}
 8000c82:	b083      	sub	sp, #12
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	4603      	mov	r3, r0
 8000c88:	6039      	str	r1, [r7, #0]
 8000c8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	db0a      	blt.n	8000caa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c94:	683b      	ldr	r3, [r7, #0]
 8000c96:	b2da      	uxtb	r2, r3
 8000c98:	490c      	ldr	r1, [pc, #48]	@ (8000ccc <__NVIC_SetPriority+0x4c>)
 8000c9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c9e:	0112      	lsls	r2, r2, #4
 8000ca0:	b2d2      	uxtb	r2, r2
 8000ca2:	440b      	add	r3, r1
 8000ca4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ca8:	e00a      	b.n	8000cc0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000caa:	683b      	ldr	r3, [r7, #0]
 8000cac:	b2da      	uxtb	r2, r3
 8000cae:	4908      	ldr	r1, [pc, #32]	@ (8000cd0 <__NVIC_SetPriority+0x50>)
 8000cb0:	79fb      	ldrb	r3, [r7, #7]
 8000cb2:	f003 030f 	and.w	r3, r3, #15
 8000cb6:	3b04      	subs	r3, #4
 8000cb8:	0112      	lsls	r2, r2, #4
 8000cba:	b2d2      	uxtb	r2, r2
 8000cbc:	440b      	add	r3, r1
 8000cbe:	761a      	strb	r2, [r3, #24]
}
 8000cc0:	bf00      	nop
 8000cc2:	370c      	adds	r7, #12
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cca:	4770      	bx	lr
 8000ccc:	e000e100 	.word	0xe000e100
 8000cd0:	e000ed00 	.word	0xe000ed00

08000cd4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	b089      	sub	sp, #36	@ 0x24
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	60f8      	str	r0, [r7, #12]
 8000cdc:	60b9      	str	r1, [r7, #8]
 8000cde:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ce0:	68fb      	ldr	r3, [r7, #12]
 8000ce2:	f003 0307 	and.w	r3, r3, #7
 8000ce6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ce8:	69fb      	ldr	r3, [r7, #28]
 8000cea:	f1c3 0307 	rsb	r3, r3, #7
 8000cee:	2b04      	cmp	r3, #4
 8000cf0:	bf28      	it	cs
 8000cf2:	2304      	movcs	r3, #4
 8000cf4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cf6:	69fb      	ldr	r3, [r7, #28]
 8000cf8:	3304      	adds	r3, #4
 8000cfa:	2b06      	cmp	r3, #6
 8000cfc:	d902      	bls.n	8000d04 <NVIC_EncodePriority+0x30>
 8000cfe:	69fb      	ldr	r3, [r7, #28]
 8000d00:	3b03      	subs	r3, #3
 8000d02:	e000      	b.n	8000d06 <NVIC_EncodePriority+0x32>
 8000d04:	2300      	movs	r3, #0
 8000d06:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d08:	f04f 32ff 	mov.w	r2, #4294967295
 8000d0c:	69bb      	ldr	r3, [r7, #24]
 8000d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d12:	43da      	mvns	r2, r3
 8000d14:	68bb      	ldr	r3, [r7, #8]
 8000d16:	401a      	ands	r2, r3
 8000d18:	697b      	ldr	r3, [r7, #20]
 8000d1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d1c:	f04f 31ff 	mov.w	r1, #4294967295
 8000d20:	697b      	ldr	r3, [r7, #20]
 8000d22:	fa01 f303 	lsl.w	r3, r1, r3
 8000d26:	43d9      	mvns	r1, r3
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d2c:	4313      	orrs	r3, r2
         );
}
 8000d2e:	4618      	mov	r0, r3
 8000d30:	3724      	adds	r7, #36	@ 0x24
 8000d32:	46bd      	mov	sp, r7
 8000d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d38:	4770      	bx	lr
	...

08000d3c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b082      	sub	sp, #8
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	3b01      	subs	r3, #1
 8000d48:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000d4c:	d301      	bcc.n	8000d52 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d4e:	2301      	movs	r3, #1
 8000d50:	e00f      	b.n	8000d72 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d52:	4a0a      	ldr	r2, [pc, #40]	@ (8000d7c <SysTick_Config+0x40>)
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	3b01      	subs	r3, #1
 8000d58:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d5a:	210f      	movs	r1, #15
 8000d5c:	f04f 30ff 	mov.w	r0, #4294967295
 8000d60:	f7ff ff8e 	bl	8000c80 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d64:	4b05      	ldr	r3, [pc, #20]	@ (8000d7c <SysTick_Config+0x40>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d6a:	4b04      	ldr	r3, [pc, #16]	@ (8000d7c <SysTick_Config+0x40>)
 8000d6c:	2207      	movs	r2, #7
 8000d6e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d70:	2300      	movs	r3, #0
}
 8000d72:	4618      	mov	r0, r3
 8000d74:	3708      	adds	r7, #8
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	bf00      	nop
 8000d7c:	e000e010 	.word	0xe000e010

08000d80 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b082      	sub	sp, #8
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d88:	6878      	ldr	r0, [r7, #4]
 8000d8a:	f7ff ff29 	bl	8000be0 <__NVIC_SetPriorityGrouping>
}
 8000d8e:	bf00      	nop
 8000d90:	3708      	adds	r7, #8
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}

08000d96 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d96:	b580      	push	{r7, lr}
 8000d98:	b086      	sub	sp, #24
 8000d9a:	af00      	add	r7, sp, #0
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	60b9      	str	r1, [r7, #8]
 8000da0:	607a      	str	r2, [r7, #4]
 8000da2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000da4:	f7ff ff40 	bl	8000c28 <__NVIC_GetPriorityGrouping>
 8000da8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000daa:	687a      	ldr	r2, [r7, #4]
 8000dac:	68b9      	ldr	r1, [r7, #8]
 8000dae:	6978      	ldr	r0, [r7, #20]
 8000db0:	f7ff ff90 	bl	8000cd4 <NVIC_EncodePriority>
 8000db4:	4602      	mov	r2, r0
 8000db6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dba:	4611      	mov	r1, r2
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	f7ff ff5f 	bl	8000c80 <__NVIC_SetPriority>
}
 8000dc2:	bf00      	nop
 8000dc4:	3718      	adds	r7, #24
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}

08000dca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dca:	b580      	push	{r7, lr}
 8000dcc:	b082      	sub	sp, #8
 8000dce:	af00      	add	r7, sp, #0
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000dd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dd8:	4618      	mov	r0, r3
 8000dda:	f7ff ff33 	bl	8000c44 <__NVIC_EnableIRQ>
}
 8000dde:	bf00      	nop
 8000de0:	3708      	adds	r7, #8
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}

08000de6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000de6:	b580      	push	{r7, lr}
 8000de8:	b082      	sub	sp, #8
 8000dea:	af00      	add	r7, sp, #0
 8000dec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000dee:	6878      	ldr	r0, [r7, #4]
 8000df0:	f7ff ffa4 	bl	8000d3c <SysTick_Config>
 8000df4:	4603      	mov	r3, r0
}
 8000df6:	4618      	mov	r0, r3
 8000df8:	3708      	adds	r7, #8
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}
	...

08000e00 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b082      	sub	sp, #8
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d101      	bne.n	8000e12 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8000e0e:	2301      	movs	r3, #1
 8000e10:	e054      	b.n	8000ebc <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	7f5b      	ldrb	r3, [r3, #29]
 8000e16:	b2db      	uxtb	r3, r3
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d105      	bne.n	8000e28 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	2200      	movs	r2, #0
 8000e20:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8000e22:	6878      	ldr	r0, [r7, #4]
 8000e24:	f7ff fbc2 	bl	80005ac <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	2202      	movs	r2, #2
 8000e2c:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	791b      	ldrb	r3, [r3, #4]
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d10c      	bne.n	8000e50 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	4a22      	ldr	r2, [pc, #136]	@ (8000ec4 <HAL_CRC_Init+0xc4>)
 8000e3c:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	689a      	ldr	r2, [r3, #8]
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	f022 0218 	bic.w	r2, r2, #24
 8000e4c:	609a      	str	r2, [r3, #8]
 8000e4e:	e00c      	b.n	8000e6a <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	6899      	ldr	r1, [r3, #8]
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	68db      	ldr	r3, [r3, #12]
 8000e58:	461a      	mov	r2, r3
 8000e5a:	6878      	ldr	r0, [r7, #4]
 8000e5c:	f000 f834 	bl	8000ec8 <HAL_CRCEx_Polynomial_Set>
 8000e60:	4603      	mov	r3, r0
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d001      	beq.n	8000e6a <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8000e66:	2301      	movs	r3, #1
 8000e68:	e028      	b.n	8000ebc <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	795b      	ldrb	r3, [r3, #5]
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d105      	bne.n	8000e7e <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	f04f 32ff 	mov.w	r2, #4294967295
 8000e7a:	611a      	str	r2, [r3, #16]
 8000e7c:	e004      	b.n	8000e88 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	687a      	ldr	r2, [r7, #4]
 8000e84:	6912      	ldr	r2, [r2, #16]
 8000e86:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	689b      	ldr	r3, [r3, #8]
 8000e8e:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	695a      	ldr	r2, [r3, #20]
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	430a      	orrs	r2, r1
 8000e9c:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	689b      	ldr	r3, [r3, #8]
 8000ea4:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	699a      	ldr	r2, [r3, #24]
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	430a      	orrs	r2, r1
 8000eb2:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	2201      	movs	r2, #1
 8000eb8:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8000eba:	2300      	movs	r3, #0
}
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	3708      	adds	r7, #8
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bd80      	pop	{r7, pc}
 8000ec4:	04c11db7 	.word	0x04c11db7

08000ec8 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	b087      	sub	sp, #28
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	60f8      	str	r0, [r7, #12]
 8000ed0:	60b9      	str	r1, [r7, #8]
 8000ed2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8000ed8:	231f      	movs	r3, #31
 8000eda:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8000edc:	68bb      	ldr	r3, [r7, #8]
 8000ede:	f003 0301 	and.w	r3, r3, #1
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d102      	bne.n	8000eec <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 8000ee6:	2301      	movs	r3, #1
 8000ee8:	75fb      	strb	r3, [r7, #23]
 8000eea:	e063      	b.n	8000fb4 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8000eec:	bf00      	nop
 8000eee:	693b      	ldr	r3, [r7, #16]
 8000ef0:	1e5a      	subs	r2, r3, #1
 8000ef2:	613a      	str	r2, [r7, #16]
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d009      	beq.n	8000f0c <HAL_CRCEx_Polynomial_Set+0x44>
 8000ef8:	693b      	ldr	r3, [r7, #16]
 8000efa:	f003 031f 	and.w	r3, r3, #31
 8000efe:	68ba      	ldr	r2, [r7, #8]
 8000f00:	fa22 f303 	lsr.w	r3, r2, r3
 8000f04:	f003 0301 	and.w	r3, r3, #1
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d0f0      	beq.n	8000eee <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	2b18      	cmp	r3, #24
 8000f10:	d846      	bhi.n	8000fa0 <HAL_CRCEx_Polynomial_Set+0xd8>
 8000f12:	a201      	add	r2, pc, #4	@ (adr r2, 8000f18 <HAL_CRCEx_Polynomial_Set+0x50>)
 8000f14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f18:	08000fa7 	.word	0x08000fa7
 8000f1c:	08000fa1 	.word	0x08000fa1
 8000f20:	08000fa1 	.word	0x08000fa1
 8000f24:	08000fa1 	.word	0x08000fa1
 8000f28:	08000fa1 	.word	0x08000fa1
 8000f2c:	08000fa1 	.word	0x08000fa1
 8000f30:	08000fa1 	.word	0x08000fa1
 8000f34:	08000fa1 	.word	0x08000fa1
 8000f38:	08000f95 	.word	0x08000f95
 8000f3c:	08000fa1 	.word	0x08000fa1
 8000f40:	08000fa1 	.word	0x08000fa1
 8000f44:	08000fa1 	.word	0x08000fa1
 8000f48:	08000fa1 	.word	0x08000fa1
 8000f4c:	08000fa1 	.word	0x08000fa1
 8000f50:	08000fa1 	.word	0x08000fa1
 8000f54:	08000fa1 	.word	0x08000fa1
 8000f58:	08000f89 	.word	0x08000f89
 8000f5c:	08000fa1 	.word	0x08000fa1
 8000f60:	08000fa1 	.word	0x08000fa1
 8000f64:	08000fa1 	.word	0x08000fa1
 8000f68:	08000fa1 	.word	0x08000fa1
 8000f6c:	08000fa1 	.word	0x08000fa1
 8000f70:	08000fa1 	.word	0x08000fa1
 8000f74:	08000fa1 	.word	0x08000fa1
 8000f78:	08000f7d 	.word	0x08000f7d
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 8000f7c:	693b      	ldr	r3, [r7, #16]
 8000f7e:	2b06      	cmp	r3, #6
 8000f80:	d913      	bls.n	8000faa <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 8000f82:	2301      	movs	r3, #1
 8000f84:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8000f86:	e010      	b.n	8000faa <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 8000f88:	693b      	ldr	r3, [r7, #16]
 8000f8a:	2b07      	cmp	r3, #7
 8000f8c:	d90f      	bls.n	8000fae <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 8000f8e:	2301      	movs	r3, #1
 8000f90:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8000f92:	e00c      	b.n	8000fae <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 8000f94:	693b      	ldr	r3, [r7, #16]
 8000f96:	2b0f      	cmp	r3, #15
 8000f98:	d90b      	bls.n	8000fb2 <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8000f9e:	e008      	b.n	8000fb2 <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 8000fa0:	2301      	movs	r3, #1
 8000fa2:	75fb      	strb	r3, [r7, #23]
        break;
 8000fa4:	e006      	b.n	8000fb4 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8000fa6:	bf00      	nop
 8000fa8:	e004      	b.n	8000fb4 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8000faa:	bf00      	nop
 8000fac:	e002      	b.n	8000fb4 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8000fae:	bf00      	nop
 8000fb0:	e000      	b.n	8000fb4 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8000fb2:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 8000fb4:	7dfb      	ldrb	r3, [r7, #23]
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d10d      	bne.n	8000fd6 <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	68ba      	ldr	r2, [r7, #8]
 8000fc0:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	689b      	ldr	r3, [r3, #8]
 8000fc8:	f023 0118 	bic.w	r1, r3, #24
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	687a      	ldr	r2, [r7, #4]
 8000fd2:	430a      	orrs	r2, r1
 8000fd4:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8000fd6:	7dfb      	ldrb	r3, [r7, #23]
}
 8000fd8:	4618      	mov	r0, r3
 8000fda:	371c      	adds	r7, #28
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe2:	4770      	bx	lr

08000fe4 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b084      	sub	sp, #16
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000fec:	2300      	movs	r3, #0
 8000fee:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8000ff6:	b2db      	uxtb	r3, r3
 8000ff8:	2b02      	cmp	r3, #2
 8000ffa:	d00d      	beq.n	8001018 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	2204      	movs	r2, #4
 8001000:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	2201      	movs	r2, #1
 8001006:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	2200      	movs	r2, #0
 800100e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8001012:	2301      	movs	r3, #1
 8001014:	73fb      	strb	r3, [r7, #15]
 8001016:	e047      	b.n	80010a8 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	681a      	ldr	r2, [r3, #0]
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	f022 020e 	bic.w	r2, r2, #14
 8001026:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	681a      	ldr	r2, [r3, #0]
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	f022 0201 	bic.w	r2, r2, #1
 8001036:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800103c:	681a      	ldr	r2, [r3, #0]
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001042:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001046:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800104c:	f003 021f 	and.w	r2, r3, #31
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001054:	2101      	movs	r1, #1
 8001056:	fa01 f202 	lsl.w	r2, r1, r2
 800105a:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001060:	687a      	ldr	r2, [r7, #4]
 8001062:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001064:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800106a:	2b00      	cmp	r3, #0
 800106c:	d00c      	beq.n	8001088 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001072:	681a      	ldr	r2, [r3, #0]
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001078:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800107c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001082:	687a      	ldr	r2, [r7, #4]
 8001084:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001086:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	2201      	movs	r2, #1
 800108c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	2200      	movs	r2, #0
 8001094:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800109c:	2b00      	cmp	r3, #0
 800109e:	d003      	beq.n	80010a8 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80010a4:	6878      	ldr	r0, [r7, #4]
 80010a6:	4798      	blx	r3
    }
  }
  return status;
 80010a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80010aa:	4618      	mov	r0, r3
 80010ac:	3710      	adds	r7, #16
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}
	...

080010b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010b4:	b480      	push	{r7}
 80010b6:	b087      	sub	sp, #28
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
 80010bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80010be:	2300      	movs	r3, #0
 80010c0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80010c2:	e15a      	b.n	800137a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	681a      	ldr	r2, [r3, #0]
 80010c8:	2101      	movs	r1, #1
 80010ca:	697b      	ldr	r3, [r7, #20]
 80010cc:	fa01 f303 	lsl.w	r3, r1, r3
 80010d0:	4013      	ands	r3, r2
 80010d2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	f000 814c 	beq.w	8001374 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	685b      	ldr	r3, [r3, #4]
 80010e0:	f003 0303 	and.w	r3, r3, #3
 80010e4:	2b01      	cmp	r3, #1
 80010e6:	d005      	beq.n	80010f4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	685b      	ldr	r3, [r3, #4]
 80010ec:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80010f0:	2b02      	cmp	r3, #2
 80010f2:	d130      	bne.n	8001156 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	689b      	ldr	r3, [r3, #8]
 80010f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80010fa:	697b      	ldr	r3, [r7, #20]
 80010fc:	005b      	lsls	r3, r3, #1
 80010fe:	2203      	movs	r2, #3
 8001100:	fa02 f303 	lsl.w	r3, r2, r3
 8001104:	43db      	mvns	r3, r3
 8001106:	693a      	ldr	r2, [r7, #16]
 8001108:	4013      	ands	r3, r2
 800110a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	68da      	ldr	r2, [r3, #12]
 8001110:	697b      	ldr	r3, [r7, #20]
 8001112:	005b      	lsls	r3, r3, #1
 8001114:	fa02 f303 	lsl.w	r3, r2, r3
 8001118:	693a      	ldr	r2, [r7, #16]
 800111a:	4313      	orrs	r3, r2
 800111c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	693a      	ldr	r2, [r7, #16]
 8001122:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	685b      	ldr	r3, [r3, #4]
 8001128:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800112a:	2201      	movs	r2, #1
 800112c:	697b      	ldr	r3, [r7, #20]
 800112e:	fa02 f303 	lsl.w	r3, r2, r3
 8001132:	43db      	mvns	r3, r3
 8001134:	693a      	ldr	r2, [r7, #16]
 8001136:	4013      	ands	r3, r2
 8001138:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	685b      	ldr	r3, [r3, #4]
 800113e:	091b      	lsrs	r3, r3, #4
 8001140:	f003 0201 	and.w	r2, r3, #1
 8001144:	697b      	ldr	r3, [r7, #20]
 8001146:	fa02 f303 	lsl.w	r3, r2, r3
 800114a:	693a      	ldr	r2, [r7, #16]
 800114c:	4313      	orrs	r3, r2
 800114e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	693a      	ldr	r2, [r7, #16]
 8001154:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	685b      	ldr	r3, [r3, #4]
 800115a:	f003 0303 	and.w	r3, r3, #3
 800115e:	2b03      	cmp	r3, #3
 8001160:	d017      	beq.n	8001192 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	68db      	ldr	r3, [r3, #12]
 8001166:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001168:	697b      	ldr	r3, [r7, #20]
 800116a:	005b      	lsls	r3, r3, #1
 800116c:	2203      	movs	r2, #3
 800116e:	fa02 f303 	lsl.w	r3, r2, r3
 8001172:	43db      	mvns	r3, r3
 8001174:	693a      	ldr	r2, [r7, #16]
 8001176:	4013      	ands	r3, r2
 8001178:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	689a      	ldr	r2, [r3, #8]
 800117e:	697b      	ldr	r3, [r7, #20]
 8001180:	005b      	lsls	r3, r3, #1
 8001182:	fa02 f303 	lsl.w	r3, r2, r3
 8001186:	693a      	ldr	r2, [r7, #16]
 8001188:	4313      	orrs	r3, r2
 800118a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	693a      	ldr	r2, [r7, #16]
 8001190:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	685b      	ldr	r3, [r3, #4]
 8001196:	f003 0303 	and.w	r3, r3, #3
 800119a:	2b02      	cmp	r3, #2
 800119c:	d123      	bne.n	80011e6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800119e:	697b      	ldr	r3, [r7, #20]
 80011a0:	08da      	lsrs	r2, r3, #3
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	3208      	adds	r2, #8
 80011a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011aa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80011ac:	697b      	ldr	r3, [r7, #20]
 80011ae:	f003 0307 	and.w	r3, r3, #7
 80011b2:	009b      	lsls	r3, r3, #2
 80011b4:	220f      	movs	r2, #15
 80011b6:	fa02 f303 	lsl.w	r3, r2, r3
 80011ba:	43db      	mvns	r3, r3
 80011bc:	693a      	ldr	r2, [r7, #16]
 80011be:	4013      	ands	r3, r2
 80011c0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	691a      	ldr	r2, [r3, #16]
 80011c6:	697b      	ldr	r3, [r7, #20]
 80011c8:	f003 0307 	and.w	r3, r3, #7
 80011cc:	009b      	lsls	r3, r3, #2
 80011ce:	fa02 f303 	lsl.w	r3, r2, r3
 80011d2:	693a      	ldr	r2, [r7, #16]
 80011d4:	4313      	orrs	r3, r2
 80011d6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80011d8:	697b      	ldr	r3, [r7, #20]
 80011da:	08da      	lsrs	r2, r3, #3
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	3208      	adds	r2, #8
 80011e0:	6939      	ldr	r1, [r7, #16]
 80011e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80011ec:	697b      	ldr	r3, [r7, #20]
 80011ee:	005b      	lsls	r3, r3, #1
 80011f0:	2203      	movs	r2, #3
 80011f2:	fa02 f303 	lsl.w	r3, r2, r3
 80011f6:	43db      	mvns	r3, r3
 80011f8:	693a      	ldr	r2, [r7, #16]
 80011fa:	4013      	ands	r3, r2
 80011fc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	685b      	ldr	r3, [r3, #4]
 8001202:	f003 0203 	and.w	r2, r3, #3
 8001206:	697b      	ldr	r3, [r7, #20]
 8001208:	005b      	lsls	r3, r3, #1
 800120a:	fa02 f303 	lsl.w	r3, r2, r3
 800120e:	693a      	ldr	r2, [r7, #16]
 8001210:	4313      	orrs	r3, r2
 8001212:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	693a      	ldr	r2, [r7, #16]
 8001218:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	685b      	ldr	r3, [r3, #4]
 800121e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001222:	2b00      	cmp	r3, #0
 8001224:	f000 80a6 	beq.w	8001374 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001228:	4b5b      	ldr	r3, [pc, #364]	@ (8001398 <HAL_GPIO_Init+0x2e4>)
 800122a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800122c:	4a5a      	ldr	r2, [pc, #360]	@ (8001398 <HAL_GPIO_Init+0x2e4>)
 800122e:	f043 0301 	orr.w	r3, r3, #1
 8001232:	6613      	str	r3, [r2, #96]	@ 0x60
 8001234:	4b58      	ldr	r3, [pc, #352]	@ (8001398 <HAL_GPIO_Init+0x2e4>)
 8001236:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001238:	f003 0301 	and.w	r3, r3, #1
 800123c:	60bb      	str	r3, [r7, #8]
 800123e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001240:	4a56      	ldr	r2, [pc, #344]	@ (800139c <HAL_GPIO_Init+0x2e8>)
 8001242:	697b      	ldr	r3, [r7, #20]
 8001244:	089b      	lsrs	r3, r3, #2
 8001246:	3302      	adds	r3, #2
 8001248:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800124c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800124e:	697b      	ldr	r3, [r7, #20]
 8001250:	f003 0303 	and.w	r3, r3, #3
 8001254:	009b      	lsls	r3, r3, #2
 8001256:	220f      	movs	r2, #15
 8001258:	fa02 f303 	lsl.w	r3, r2, r3
 800125c:	43db      	mvns	r3, r3
 800125e:	693a      	ldr	r2, [r7, #16]
 8001260:	4013      	ands	r3, r2
 8001262:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800126a:	d01f      	beq.n	80012ac <HAL_GPIO_Init+0x1f8>
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	4a4c      	ldr	r2, [pc, #304]	@ (80013a0 <HAL_GPIO_Init+0x2ec>)
 8001270:	4293      	cmp	r3, r2
 8001272:	d019      	beq.n	80012a8 <HAL_GPIO_Init+0x1f4>
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	4a4b      	ldr	r2, [pc, #300]	@ (80013a4 <HAL_GPIO_Init+0x2f0>)
 8001278:	4293      	cmp	r3, r2
 800127a:	d013      	beq.n	80012a4 <HAL_GPIO_Init+0x1f0>
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	4a4a      	ldr	r2, [pc, #296]	@ (80013a8 <HAL_GPIO_Init+0x2f4>)
 8001280:	4293      	cmp	r3, r2
 8001282:	d00d      	beq.n	80012a0 <HAL_GPIO_Init+0x1ec>
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	4a49      	ldr	r2, [pc, #292]	@ (80013ac <HAL_GPIO_Init+0x2f8>)
 8001288:	4293      	cmp	r3, r2
 800128a:	d007      	beq.n	800129c <HAL_GPIO_Init+0x1e8>
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	4a48      	ldr	r2, [pc, #288]	@ (80013b0 <HAL_GPIO_Init+0x2fc>)
 8001290:	4293      	cmp	r3, r2
 8001292:	d101      	bne.n	8001298 <HAL_GPIO_Init+0x1e4>
 8001294:	2305      	movs	r3, #5
 8001296:	e00a      	b.n	80012ae <HAL_GPIO_Init+0x1fa>
 8001298:	2306      	movs	r3, #6
 800129a:	e008      	b.n	80012ae <HAL_GPIO_Init+0x1fa>
 800129c:	2304      	movs	r3, #4
 800129e:	e006      	b.n	80012ae <HAL_GPIO_Init+0x1fa>
 80012a0:	2303      	movs	r3, #3
 80012a2:	e004      	b.n	80012ae <HAL_GPIO_Init+0x1fa>
 80012a4:	2302      	movs	r3, #2
 80012a6:	e002      	b.n	80012ae <HAL_GPIO_Init+0x1fa>
 80012a8:	2301      	movs	r3, #1
 80012aa:	e000      	b.n	80012ae <HAL_GPIO_Init+0x1fa>
 80012ac:	2300      	movs	r3, #0
 80012ae:	697a      	ldr	r2, [r7, #20]
 80012b0:	f002 0203 	and.w	r2, r2, #3
 80012b4:	0092      	lsls	r2, r2, #2
 80012b6:	4093      	lsls	r3, r2
 80012b8:	693a      	ldr	r2, [r7, #16]
 80012ba:	4313      	orrs	r3, r2
 80012bc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80012be:	4937      	ldr	r1, [pc, #220]	@ (800139c <HAL_GPIO_Init+0x2e8>)
 80012c0:	697b      	ldr	r3, [r7, #20]
 80012c2:	089b      	lsrs	r3, r3, #2
 80012c4:	3302      	adds	r3, #2
 80012c6:	693a      	ldr	r2, [r7, #16]
 80012c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80012cc:	4b39      	ldr	r3, [pc, #228]	@ (80013b4 <HAL_GPIO_Init+0x300>)
 80012ce:	689b      	ldr	r3, [r3, #8]
 80012d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	43db      	mvns	r3, r3
 80012d6:	693a      	ldr	r2, [r7, #16]
 80012d8:	4013      	ands	r3, r2
 80012da:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	685b      	ldr	r3, [r3, #4]
 80012e0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d003      	beq.n	80012f0 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80012e8:	693a      	ldr	r2, [r7, #16]
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	4313      	orrs	r3, r2
 80012ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80012f0:	4a30      	ldr	r2, [pc, #192]	@ (80013b4 <HAL_GPIO_Init+0x300>)
 80012f2:	693b      	ldr	r3, [r7, #16]
 80012f4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80012f6:	4b2f      	ldr	r3, [pc, #188]	@ (80013b4 <HAL_GPIO_Init+0x300>)
 80012f8:	68db      	ldr	r3, [r3, #12]
 80012fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	43db      	mvns	r3, r3
 8001300:	693a      	ldr	r2, [r7, #16]
 8001302:	4013      	ands	r3, r2
 8001304:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	685b      	ldr	r3, [r3, #4]
 800130a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800130e:	2b00      	cmp	r3, #0
 8001310:	d003      	beq.n	800131a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001312:	693a      	ldr	r2, [r7, #16]
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	4313      	orrs	r3, r2
 8001318:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800131a:	4a26      	ldr	r2, [pc, #152]	@ (80013b4 <HAL_GPIO_Init+0x300>)
 800131c:	693b      	ldr	r3, [r7, #16]
 800131e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001320:	4b24      	ldr	r3, [pc, #144]	@ (80013b4 <HAL_GPIO_Init+0x300>)
 8001322:	685b      	ldr	r3, [r3, #4]
 8001324:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	43db      	mvns	r3, r3
 800132a:	693a      	ldr	r2, [r7, #16]
 800132c:	4013      	ands	r3, r2
 800132e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001338:	2b00      	cmp	r3, #0
 800133a:	d003      	beq.n	8001344 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800133c:	693a      	ldr	r2, [r7, #16]
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	4313      	orrs	r3, r2
 8001342:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001344:	4a1b      	ldr	r2, [pc, #108]	@ (80013b4 <HAL_GPIO_Init+0x300>)
 8001346:	693b      	ldr	r3, [r7, #16]
 8001348:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800134a:	4b1a      	ldr	r3, [pc, #104]	@ (80013b4 <HAL_GPIO_Init+0x300>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	43db      	mvns	r3, r3
 8001354:	693a      	ldr	r2, [r7, #16]
 8001356:	4013      	ands	r3, r2
 8001358:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	685b      	ldr	r3, [r3, #4]
 800135e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001362:	2b00      	cmp	r3, #0
 8001364:	d003      	beq.n	800136e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001366:	693a      	ldr	r2, [r7, #16]
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	4313      	orrs	r3, r2
 800136c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800136e:	4a11      	ldr	r2, [pc, #68]	@ (80013b4 <HAL_GPIO_Init+0x300>)
 8001370:	693b      	ldr	r3, [r7, #16]
 8001372:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001374:	697b      	ldr	r3, [r7, #20]
 8001376:	3301      	adds	r3, #1
 8001378:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	681a      	ldr	r2, [r3, #0]
 800137e:	697b      	ldr	r3, [r7, #20]
 8001380:	fa22 f303 	lsr.w	r3, r2, r3
 8001384:	2b00      	cmp	r3, #0
 8001386:	f47f ae9d 	bne.w	80010c4 <HAL_GPIO_Init+0x10>
  }
}
 800138a:	bf00      	nop
 800138c:	bf00      	nop
 800138e:	371c      	adds	r7, #28
 8001390:	46bd      	mov	sp, r7
 8001392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001396:	4770      	bx	lr
 8001398:	40021000 	.word	0x40021000
 800139c:	40010000 	.word	0x40010000
 80013a0:	48000400 	.word	0x48000400
 80013a4:	48000800 	.word	0x48000800
 80013a8:	48000c00 	.word	0x48000c00
 80013ac:	48001000 	.word	0x48001000
 80013b0:	48001400 	.word	0x48001400
 80013b4:	40010400 	.word	0x40010400

080013b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013b8:	b480      	push	{r7}
 80013ba:	b083      	sub	sp, #12
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
 80013c0:	460b      	mov	r3, r1
 80013c2:	807b      	strh	r3, [r7, #2]
 80013c4:	4613      	mov	r3, r2
 80013c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80013c8:	787b      	ldrb	r3, [r7, #1]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d003      	beq.n	80013d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80013ce:	887a      	ldrh	r2, [r7, #2]
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80013d4:	e002      	b.n	80013dc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80013d6:	887a      	ldrh	r2, [r7, #2]
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80013dc:	bf00      	nop
 80013de:	370c      	adds	r7, #12
 80013e0:	46bd      	mov	sp, r7
 80013e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e6:	4770      	bx	lr

080013e8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b082      	sub	sp, #8
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	4603      	mov	r3, r0
 80013f0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80013f2:	4b08      	ldr	r3, [pc, #32]	@ (8001414 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80013f4:	695a      	ldr	r2, [r3, #20]
 80013f6:	88fb      	ldrh	r3, [r7, #6]
 80013f8:	4013      	ands	r3, r2
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d006      	beq.n	800140c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80013fe:	4a05      	ldr	r2, [pc, #20]	@ (8001414 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001400:	88fb      	ldrh	r3, [r7, #6]
 8001402:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001404:	88fb      	ldrh	r3, [r7, #6]
 8001406:	4618      	mov	r0, r3
 8001408:	f7fe ff0e 	bl	8000228 <HAL_GPIO_EXTI_Callback>
  }
}
 800140c:	bf00      	nop
 800140e:	3708      	adds	r7, #8
 8001410:	46bd      	mov	sp, r7
 8001412:	bd80      	pop	{r7, pc}
 8001414:	40010400 	.word	0x40010400

08001418 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001418:	b480      	push	{r7}
 800141a:	b085      	sub	sp, #20
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	2b00      	cmp	r3, #0
 8001424:	d141      	bne.n	80014aa <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001426:	4b4b      	ldr	r3, [pc, #300]	@ (8001554 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800142e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001432:	d131      	bne.n	8001498 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001434:	4b47      	ldr	r3, [pc, #284]	@ (8001554 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001436:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800143a:	4a46      	ldr	r2, [pc, #280]	@ (8001554 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800143c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001440:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001444:	4b43      	ldr	r3, [pc, #268]	@ (8001554 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800144c:	4a41      	ldr	r2, [pc, #260]	@ (8001554 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800144e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001452:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001454:	4b40      	ldr	r3, [pc, #256]	@ (8001558 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	2232      	movs	r2, #50	@ 0x32
 800145a:	fb02 f303 	mul.w	r3, r2, r3
 800145e:	4a3f      	ldr	r2, [pc, #252]	@ (800155c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001460:	fba2 2303 	umull	r2, r3, r2, r3
 8001464:	0c9b      	lsrs	r3, r3, #18
 8001466:	3301      	adds	r3, #1
 8001468:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800146a:	e002      	b.n	8001472 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	3b01      	subs	r3, #1
 8001470:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001472:	4b38      	ldr	r3, [pc, #224]	@ (8001554 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001474:	695b      	ldr	r3, [r3, #20]
 8001476:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800147a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800147e:	d102      	bne.n	8001486 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	2b00      	cmp	r3, #0
 8001484:	d1f2      	bne.n	800146c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001486:	4b33      	ldr	r3, [pc, #204]	@ (8001554 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001488:	695b      	ldr	r3, [r3, #20]
 800148a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800148e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001492:	d158      	bne.n	8001546 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001494:	2303      	movs	r3, #3
 8001496:	e057      	b.n	8001548 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001498:	4b2e      	ldr	r3, [pc, #184]	@ (8001554 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800149a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800149e:	4a2d      	ldr	r2, [pc, #180]	@ (8001554 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014a0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80014a4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80014a8:	e04d      	b.n	8001546 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80014b0:	d141      	bne.n	8001536 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80014b2:	4b28      	ldr	r3, [pc, #160]	@ (8001554 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80014ba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80014be:	d131      	bne.n	8001524 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80014c0:	4b24      	ldr	r3, [pc, #144]	@ (8001554 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80014c6:	4a23      	ldr	r2, [pc, #140]	@ (8001554 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80014cc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80014d0:	4b20      	ldr	r3, [pc, #128]	@ (8001554 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80014d8:	4a1e      	ldr	r2, [pc, #120]	@ (8001554 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014da:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80014de:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80014e0:	4b1d      	ldr	r3, [pc, #116]	@ (8001558 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	2232      	movs	r2, #50	@ 0x32
 80014e6:	fb02 f303 	mul.w	r3, r2, r3
 80014ea:	4a1c      	ldr	r2, [pc, #112]	@ (800155c <HAL_PWREx_ControlVoltageScaling+0x144>)
 80014ec:	fba2 2303 	umull	r2, r3, r2, r3
 80014f0:	0c9b      	lsrs	r3, r3, #18
 80014f2:	3301      	adds	r3, #1
 80014f4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80014f6:	e002      	b.n	80014fe <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	3b01      	subs	r3, #1
 80014fc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80014fe:	4b15      	ldr	r3, [pc, #84]	@ (8001554 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001500:	695b      	ldr	r3, [r3, #20]
 8001502:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001506:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800150a:	d102      	bne.n	8001512 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	2b00      	cmp	r3, #0
 8001510:	d1f2      	bne.n	80014f8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001512:	4b10      	ldr	r3, [pc, #64]	@ (8001554 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001514:	695b      	ldr	r3, [r3, #20]
 8001516:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800151a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800151e:	d112      	bne.n	8001546 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001520:	2303      	movs	r3, #3
 8001522:	e011      	b.n	8001548 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001524:	4b0b      	ldr	r3, [pc, #44]	@ (8001554 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001526:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800152a:	4a0a      	ldr	r2, [pc, #40]	@ (8001554 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800152c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001530:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001534:	e007      	b.n	8001546 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001536:	4b07      	ldr	r3, [pc, #28]	@ (8001554 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800153e:	4a05      	ldr	r2, [pc, #20]	@ (8001554 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001540:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001544:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001546:	2300      	movs	r3, #0
}
 8001548:	4618      	mov	r0, r3
 800154a:	3714      	adds	r7, #20
 800154c:	46bd      	mov	sp, r7
 800154e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001552:	4770      	bx	lr
 8001554:	40007000 	.word	0x40007000
 8001558:	20000000 	.word	0x20000000
 800155c:	431bde83 	.word	0x431bde83

08001560 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001560:	b480      	push	{r7}
 8001562:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001564:	4b05      	ldr	r3, [pc, #20]	@ (800157c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001566:	689b      	ldr	r3, [r3, #8]
 8001568:	4a04      	ldr	r2, [pc, #16]	@ (800157c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800156a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800156e:	6093      	str	r3, [r2, #8]
}
 8001570:	bf00      	nop
 8001572:	46bd      	mov	sp, r7
 8001574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001578:	4770      	bx	lr
 800157a:	bf00      	nop
 800157c:	40007000 	.word	0x40007000

08001580 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b088      	sub	sp, #32
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	2b00      	cmp	r3, #0
 800158c:	d101      	bne.n	8001592 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800158e:	2301      	movs	r3, #1
 8001590:	e2fe      	b.n	8001b90 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f003 0301 	and.w	r3, r3, #1
 800159a:	2b00      	cmp	r3, #0
 800159c:	d075      	beq.n	800168a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800159e:	4b97      	ldr	r3, [pc, #604]	@ (80017fc <HAL_RCC_OscConfig+0x27c>)
 80015a0:	689b      	ldr	r3, [r3, #8]
 80015a2:	f003 030c 	and.w	r3, r3, #12
 80015a6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80015a8:	4b94      	ldr	r3, [pc, #592]	@ (80017fc <HAL_RCC_OscConfig+0x27c>)
 80015aa:	68db      	ldr	r3, [r3, #12]
 80015ac:	f003 0303 	and.w	r3, r3, #3
 80015b0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80015b2:	69bb      	ldr	r3, [r7, #24]
 80015b4:	2b0c      	cmp	r3, #12
 80015b6:	d102      	bne.n	80015be <HAL_RCC_OscConfig+0x3e>
 80015b8:	697b      	ldr	r3, [r7, #20]
 80015ba:	2b03      	cmp	r3, #3
 80015bc:	d002      	beq.n	80015c4 <HAL_RCC_OscConfig+0x44>
 80015be:	69bb      	ldr	r3, [r7, #24]
 80015c0:	2b08      	cmp	r3, #8
 80015c2:	d10b      	bne.n	80015dc <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015c4:	4b8d      	ldr	r3, [pc, #564]	@ (80017fc <HAL_RCC_OscConfig+0x27c>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d05b      	beq.n	8001688 <HAL_RCC_OscConfig+0x108>
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	685b      	ldr	r3, [r3, #4]
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d157      	bne.n	8001688 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80015d8:	2301      	movs	r3, #1
 80015da:	e2d9      	b.n	8001b90 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	685b      	ldr	r3, [r3, #4]
 80015e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80015e4:	d106      	bne.n	80015f4 <HAL_RCC_OscConfig+0x74>
 80015e6:	4b85      	ldr	r3, [pc, #532]	@ (80017fc <HAL_RCC_OscConfig+0x27c>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	4a84      	ldr	r2, [pc, #528]	@ (80017fc <HAL_RCC_OscConfig+0x27c>)
 80015ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80015f0:	6013      	str	r3, [r2, #0]
 80015f2:	e01d      	b.n	8001630 <HAL_RCC_OscConfig+0xb0>
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	685b      	ldr	r3, [r3, #4]
 80015f8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80015fc:	d10c      	bne.n	8001618 <HAL_RCC_OscConfig+0x98>
 80015fe:	4b7f      	ldr	r3, [pc, #508]	@ (80017fc <HAL_RCC_OscConfig+0x27c>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	4a7e      	ldr	r2, [pc, #504]	@ (80017fc <HAL_RCC_OscConfig+0x27c>)
 8001604:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001608:	6013      	str	r3, [r2, #0]
 800160a:	4b7c      	ldr	r3, [pc, #496]	@ (80017fc <HAL_RCC_OscConfig+0x27c>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	4a7b      	ldr	r2, [pc, #492]	@ (80017fc <HAL_RCC_OscConfig+0x27c>)
 8001610:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001614:	6013      	str	r3, [r2, #0]
 8001616:	e00b      	b.n	8001630 <HAL_RCC_OscConfig+0xb0>
 8001618:	4b78      	ldr	r3, [pc, #480]	@ (80017fc <HAL_RCC_OscConfig+0x27c>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	4a77      	ldr	r2, [pc, #476]	@ (80017fc <HAL_RCC_OscConfig+0x27c>)
 800161e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001622:	6013      	str	r3, [r2, #0]
 8001624:	4b75      	ldr	r3, [pc, #468]	@ (80017fc <HAL_RCC_OscConfig+0x27c>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	4a74      	ldr	r2, [pc, #464]	@ (80017fc <HAL_RCC_OscConfig+0x27c>)
 800162a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800162e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	685b      	ldr	r3, [r3, #4]
 8001634:	2b00      	cmp	r3, #0
 8001636:	d013      	beq.n	8001660 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001638:	f7ff faa4 	bl	8000b84 <HAL_GetTick>
 800163c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800163e:	e008      	b.n	8001652 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001640:	f7ff faa0 	bl	8000b84 <HAL_GetTick>
 8001644:	4602      	mov	r2, r0
 8001646:	693b      	ldr	r3, [r7, #16]
 8001648:	1ad3      	subs	r3, r2, r3
 800164a:	2b64      	cmp	r3, #100	@ 0x64
 800164c:	d901      	bls.n	8001652 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800164e:	2303      	movs	r3, #3
 8001650:	e29e      	b.n	8001b90 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001652:	4b6a      	ldr	r3, [pc, #424]	@ (80017fc <HAL_RCC_OscConfig+0x27c>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800165a:	2b00      	cmp	r3, #0
 800165c:	d0f0      	beq.n	8001640 <HAL_RCC_OscConfig+0xc0>
 800165e:	e014      	b.n	800168a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001660:	f7ff fa90 	bl	8000b84 <HAL_GetTick>
 8001664:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001666:	e008      	b.n	800167a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001668:	f7ff fa8c 	bl	8000b84 <HAL_GetTick>
 800166c:	4602      	mov	r2, r0
 800166e:	693b      	ldr	r3, [r7, #16]
 8001670:	1ad3      	subs	r3, r2, r3
 8001672:	2b64      	cmp	r3, #100	@ 0x64
 8001674:	d901      	bls.n	800167a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001676:	2303      	movs	r3, #3
 8001678:	e28a      	b.n	8001b90 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800167a:	4b60      	ldr	r3, [pc, #384]	@ (80017fc <HAL_RCC_OscConfig+0x27c>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001682:	2b00      	cmp	r3, #0
 8001684:	d1f0      	bne.n	8001668 <HAL_RCC_OscConfig+0xe8>
 8001686:	e000      	b.n	800168a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001688:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f003 0302 	and.w	r3, r3, #2
 8001692:	2b00      	cmp	r3, #0
 8001694:	d075      	beq.n	8001782 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001696:	4b59      	ldr	r3, [pc, #356]	@ (80017fc <HAL_RCC_OscConfig+0x27c>)
 8001698:	689b      	ldr	r3, [r3, #8]
 800169a:	f003 030c 	and.w	r3, r3, #12
 800169e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80016a0:	4b56      	ldr	r3, [pc, #344]	@ (80017fc <HAL_RCC_OscConfig+0x27c>)
 80016a2:	68db      	ldr	r3, [r3, #12]
 80016a4:	f003 0303 	and.w	r3, r3, #3
 80016a8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80016aa:	69bb      	ldr	r3, [r7, #24]
 80016ac:	2b0c      	cmp	r3, #12
 80016ae:	d102      	bne.n	80016b6 <HAL_RCC_OscConfig+0x136>
 80016b0:	697b      	ldr	r3, [r7, #20]
 80016b2:	2b02      	cmp	r3, #2
 80016b4:	d002      	beq.n	80016bc <HAL_RCC_OscConfig+0x13c>
 80016b6:	69bb      	ldr	r3, [r7, #24]
 80016b8:	2b04      	cmp	r3, #4
 80016ba:	d11f      	bne.n	80016fc <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80016bc:	4b4f      	ldr	r3, [pc, #316]	@ (80017fc <HAL_RCC_OscConfig+0x27c>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d005      	beq.n	80016d4 <HAL_RCC_OscConfig+0x154>
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	68db      	ldr	r3, [r3, #12]
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d101      	bne.n	80016d4 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80016d0:	2301      	movs	r3, #1
 80016d2:	e25d      	b.n	8001b90 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016d4:	4b49      	ldr	r3, [pc, #292]	@ (80017fc <HAL_RCC_OscConfig+0x27c>)
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	691b      	ldr	r3, [r3, #16]
 80016e0:	061b      	lsls	r3, r3, #24
 80016e2:	4946      	ldr	r1, [pc, #280]	@ (80017fc <HAL_RCC_OscConfig+0x27c>)
 80016e4:	4313      	orrs	r3, r2
 80016e6:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80016e8:	4b45      	ldr	r3, [pc, #276]	@ (8001800 <HAL_RCC_OscConfig+0x280>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4618      	mov	r0, r3
 80016ee:	f7ff f9fd 	bl	8000aec <HAL_InitTick>
 80016f2:	4603      	mov	r3, r0
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d043      	beq.n	8001780 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80016f8:	2301      	movs	r3, #1
 80016fa:	e249      	b.n	8001b90 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	68db      	ldr	r3, [r3, #12]
 8001700:	2b00      	cmp	r3, #0
 8001702:	d023      	beq.n	800174c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001704:	4b3d      	ldr	r3, [pc, #244]	@ (80017fc <HAL_RCC_OscConfig+0x27c>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	4a3c      	ldr	r2, [pc, #240]	@ (80017fc <HAL_RCC_OscConfig+0x27c>)
 800170a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800170e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001710:	f7ff fa38 	bl	8000b84 <HAL_GetTick>
 8001714:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001716:	e008      	b.n	800172a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001718:	f7ff fa34 	bl	8000b84 <HAL_GetTick>
 800171c:	4602      	mov	r2, r0
 800171e:	693b      	ldr	r3, [r7, #16]
 8001720:	1ad3      	subs	r3, r2, r3
 8001722:	2b02      	cmp	r3, #2
 8001724:	d901      	bls.n	800172a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001726:	2303      	movs	r3, #3
 8001728:	e232      	b.n	8001b90 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800172a:	4b34      	ldr	r3, [pc, #208]	@ (80017fc <HAL_RCC_OscConfig+0x27c>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001732:	2b00      	cmp	r3, #0
 8001734:	d0f0      	beq.n	8001718 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001736:	4b31      	ldr	r3, [pc, #196]	@ (80017fc <HAL_RCC_OscConfig+0x27c>)
 8001738:	685b      	ldr	r3, [r3, #4]
 800173a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	691b      	ldr	r3, [r3, #16]
 8001742:	061b      	lsls	r3, r3, #24
 8001744:	492d      	ldr	r1, [pc, #180]	@ (80017fc <HAL_RCC_OscConfig+0x27c>)
 8001746:	4313      	orrs	r3, r2
 8001748:	604b      	str	r3, [r1, #4]
 800174a:	e01a      	b.n	8001782 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800174c:	4b2b      	ldr	r3, [pc, #172]	@ (80017fc <HAL_RCC_OscConfig+0x27c>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4a2a      	ldr	r2, [pc, #168]	@ (80017fc <HAL_RCC_OscConfig+0x27c>)
 8001752:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001756:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001758:	f7ff fa14 	bl	8000b84 <HAL_GetTick>
 800175c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800175e:	e008      	b.n	8001772 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001760:	f7ff fa10 	bl	8000b84 <HAL_GetTick>
 8001764:	4602      	mov	r2, r0
 8001766:	693b      	ldr	r3, [r7, #16]
 8001768:	1ad3      	subs	r3, r2, r3
 800176a:	2b02      	cmp	r3, #2
 800176c:	d901      	bls.n	8001772 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800176e:	2303      	movs	r3, #3
 8001770:	e20e      	b.n	8001b90 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001772:	4b22      	ldr	r3, [pc, #136]	@ (80017fc <HAL_RCC_OscConfig+0x27c>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800177a:	2b00      	cmp	r3, #0
 800177c:	d1f0      	bne.n	8001760 <HAL_RCC_OscConfig+0x1e0>
 800177e:	e000      	b.n	8001782 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001780:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f003 0308 	and.w	r3, r3, #8
 800178a:	2b00      	cmp	r3, #0
 800178c:	d041      	beq.n	8001812 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	695b      	ldr	r3, [r3, #20]
 8001792:	2b00      	cmp	r3, #0
 8001794:	d01c      	beq.n	80017d0 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001796:	4b19      	ldr	r3, [pc, #100]	@ (80017fc <HAL_RCC_OscConfig+0x27c>)
 8001798:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800179c:	4a17      	ldr	r2, [pc, #92]	@ (80017fc <HAL_RCC_OscConfig+0x27c>)
 800179e:	f043 0301 	orr.w	r3, r3, #1
 80017a2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017a6:	f7ff f9ed 	bl	8000b84 <HAL_GetTick>
 80017aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80017ac:	e008      	b.n	80017c0 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017ae:	f7ff f9e9 	bl	8000b84 <HAL_GetTick>
 80017b2:	4602      	mov	r2, r0
 80017b4:	693b      	ldr	r3, [r7, #16]
 80017b6:	1ad3      	subs	r3, r2, r3
 80017b8:	2b02      	cmp	r3, #2
 80017ba:	d901      	bls.n	80017c0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80017bc:	2303      	movs	r3, #3
 80017be:	e1e7      	b.n	8001b90 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80017c0:	4b0e      	ldr	r3, [pc, #56]	@ (80017fc <HAL_RCC_OscConfig+0x27c>)
 80017c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80017c6:	f003 0302 	and.w	r3, r3, #2
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d0ef      	beq.n	80017ae <HAL_RCC_OscConfig+0x22e>
 80017ce:	e020      	b.n	8001812 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017d0:	4b0a      	ldr	r3, [pc, #40]	@ (80017fc <HAL_RCC_OscConfig+0x27c>)
 80017d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80017d6:	4a09      	ldr	r2, [pc, #36]	@ (80017fc <HAL_RCC_OscConfig+0x27c>)
 80017d8:	f023 0301 	bic.w	r3, r3, #1
 80017dc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017e0:	f7ff f9d0 	bl	8000b84 <HAL_GetTick>
 80017e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80017e6:	e00d      	b.n	8001804 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017e8:	f7ff f9cc 	bl	8000b84 <HAL_GetTick>
 80017ec:	4602      	mov	r2, r0
 80017ee:	693b      	ldr	r3, [r7, #16]
 80017f0:	1ad3      	subs	r3, r2, r3
 80017f2:	2b02      	cmp	r3, #2
 80017f4:	d906      	bls.n	8001804 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80017f6:	2303      	movs	r3, #3
 80017f8:	e1ca      	b.n	8001b90 <HAL_RCC_OscConfig+0x610>
 80017fa:	bf00      	nop
 80017fc:	40021000 	.word	0x40021000
 8001800:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001804:	4b8c      	ldr	r3, [pc, #560]	@ (8001a38 <HAL_RCC_OscConfig+0x4b8>)
 8001806:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800180a:	f003 0302 	and.w	r3, r3, #2
 800180e:	2b00      	cmp	r3, #0
 8001810:	d1ea      	bne.n	80017e8 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f003 0304 	and.w	r3, r3, #4
 800181a:	2b00      	cmp	r3, #0
 800181c:	f000 80a6 	beq.w	800196c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001820:	2300      	movs	r3, #0
 8001822:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001824:	4b84      	ldr	r3, [pc, #528]	@ (8001a38 <HAL_RCC_OscConfig+0x4b8>)
 8001826:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001828:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800182c:	2b00      	cmp	r3, #0
 800182e:	d101      	bne.n	8001834 <HAL_RCC_OscConfig+0x2b4>
 8001830:	2301      	movs	r3, #1
 8001832:	e000      	b.n	8001836 <HAL_RCC_OscConfig+0x2b6>
 8001834:	2300      	movs	r3, #0
 8001836:	2b00      	cmp	r3, #0
 8001838:	d00d      	beq.n	8001856 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800183a:	4b7f      	ldr	r3, [pc, #508]	@ (8001a38 <HAL_RCC_OscConfig+0x4b8>)
 800183c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800183e:	4a7e      	ldr	r2, [pc, #504]	@ (8001a38 <HAL_RCC_OscConfig+0x4b8>)
 8001840:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001844:	6593      	str	r3, [r2, #88]	@ 0x58
 8001846:	4b7c      	ldr	r3, [pc, #496]	@ (8001a38 <HAL_RCC_OscConfig+0x4b8>)
 8001848:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800184a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800184e:	60fb      	str	r3, [r7, #12]
 8001850:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001852:	2301      	movs	r3, #1
 8001854:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001856:	4b79      	ldr	r3, [pc, #484]	@ (8001a3c <HAL_RCC_OscConfig+0x4bc>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800185e:	2b00      	cmp	r3, #0
 8001860:	d118      	bne.n	8001894 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001862:	4b76      	ldr	r3, [pc, #472]	@ (8001a3c <HAL_RCC_OscConfig+0x4bc>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	4a75      	ldr	r2, [pc, #468]	@ (8001a3c <HAL_RCC_OscConfig+0x4bc>)
 8001868:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800186c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800186e:	f7ff f989 	bl	8000b84 <HAL_GetTick>
 8001872:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001874:	e008      	b.n	8001888 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001876:	f7ff f985 	bl	8000b84 <HAL_GetTick>
 800187a:	4602      	mov	r2, r0
 800187c:	693b      	ldr	r3, [r7, #16]
 800187e:	1ad3      	subs	r3, r2, r3
 8001880:	2b02      	cmp	r3, #2
 8001882:	d901      	bls.n	8001888 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001884:	2303      	movs	r3, #3
 8001886:	e183      	b.n	8001b90 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001888:	4b6c      	ldr	r3, [pc, #432]	@ (8001a3c <HAL_RCC_OscConfig+0x4bc>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001890:	2b00      	cmp	r3, #0
 8001892:	d0f0      	beq.n	8001876 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	689b      	ldr	r3, [r3, #8]
 8001898:	2b01      	cmp	r3, #1
 800189a:	d108      	bne.n	80018ae <HAL_RCC_OscConfig+0x32e>
 800189c:	4b66      	ldr	r3, [pc, #408]	@ (8001a38 <HAL_RCC_OscConfig+0x4b8>)
 800189e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80018a2:	4a65      	ldr	r2, [pc, #404]	@ (8001a38 <HAL_RCC_OscConfig+0x4b8>)
 80018a4:	f043 0301 	orr.w	r3, r3, #1
 80018a8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80018ac:	e024      	b.n	80018f8 <HAL_RCC_OscConfig+0x378>
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	689b      	ldr	r3, [r3, #8]
 80018b2:	2b05      	cmp	r3, #5
 80018b4:	d110      	bne.n	80018d8 <HAL_RCC_OscConfig+0x358>
 80018b6:	4b60      	ldr	r3, [pc, #384]	@ (8001a38 <HAL_RCC_OscConfig+0x4b8>)
 80018b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80018bc:	4a5e      	ldr	r2, [pc, #376]	@ (8001a38 <HAL_RCC_OscConfig+0x4b8>)
 80018be:	f043 0304 	orr.w	r3, r3, #4
 80018c2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80018c6:	4b5c      	ldr	r3, [pc, #368]	@ (8001a38 <HAL_RCC_OscConfig+0x4b8>)
 80018c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80018cc:	4a5a      	ldr	r2, [pc, #360]	@ (8001a38 <HAL_RCC_OscConfig+0x4b8>)
 80018ce:	f043 0301 	orr.w	r3, r3, #1
 80018d2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80018d6:	e00f      	b.n	80018f8 <HAL_RCC_OscConfig+0x378>
 80018d8:	4b57      	ldr	r3, [pc, #348]	@ (8001a38 <HAL_RCC_OscConfig+0x4b8>)
 80018da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80018de:	4a56      	ldr	r2, [pc, #344]	@ (8001a38 <HAL_RCC_OscConfig+0x4b8>)
 80018e0:	f023 0301 	bic.w	r3, r3, #1
 80018e4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80018e8:	4b53      	ldr	r3, [pc, #332]	@ (8001a38 <HAL_RCC_OscConfig+0x4b8>)
 80018ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80018ee:	4a52      	ldr	r2, [pc, #328]	@ (8001a38 <HAL_RCC_OscConfig+0x4b8>)
 80018f0:	f023 0304 	bic.w	r3, r3, #4
 80018f4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	689b      	ldr	r3, [r3, #8]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d016      	beq.n	800192e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001900:	f7ff f940 	bl	8000b84 <HAL_GetTick>
 8001904:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001906:	e00a      	b.n	800191e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001908:	f7ff f93c 	bl	8000b84 <HAL_GetTick>
 800190c:	4602      	mov	r2, r0
 800190e:	693b      	ldr	r3, [r7, #16]
 8001910:	1ad3      	subs	r3, r2, r3
 8001912:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001916:	4293      	cmp	r3, r2
 8001918:	d901      	bls.n	800191e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800191a:	2303      	movs	r3, #3
 800191c:	e138      	b.n	8001b90 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800191e:	4b46      	ldr	r3, [pc, #280]	@ (8001a38 <HAL_RCC_OscConfig+0x4b8>)
 8001920:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001924:	f003 0302 	and.w	r3, r3, #2
 8001928:	2b00      	cmp	r3, #0
 800192a:	d0ed      	beq.n	8001908 <HAL_RCC_OscConfig+0x388>
 800192c:	e015      	b.n	800195a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800192e:	f7ff f929 	bl	8000b84 <HAL_GetTick>
 8001932:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001934:	e00a      	b.n	800194c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001936:	f7ff f925 	bl	8000b84 <HAL_GetTick>
 800193a:	4602      	mov	r2, r0
 800193c:	693b      	ldr	r3, [r7, #16]
 800193e:	1ad3      	subs	r3, r2, r3
 8001940:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001944:	4293      	cmp	r3, r2
 8001946:	d901      	bls.n	800194c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001948:	2303      	movs	r3, #3
 800194a:	e121      	b.n	8001b90 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800194c:	4b3a      	ldr	r3, [pc, #232]	@ (8001a38 <HAL_RCC_OscConfig+0x4b8>)
 800194e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001952:	f003 0302 	and.w	r3, r3, #2
 8001956:	2b00      	cmp	r3, #0
 8001958:	d1ed      	bne.n	8001936 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800195a:	7ffb      	ldrb	r3, [r7, #31]
 800195c:	2b01      	cmp	r3, #1
 800195e:	d105      	bne.n	800196c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001960:	4b35      	ldr	r3, [pc, #212]	@ (8001a38 <HAL_RCC_OscConfig+0x4b8>)
 8001962:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001964:	4a34      	ldr	r2, [pc, #208]	@ (8001a38 <HAL_RCC_OscConfig+0x4b8>)
 8001966:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800196a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f003 0320 	and.w	r3, r3, #32
 8001974:	2b00      	cmp	r3, #0
 8001976:	d03c      	beq.n	80019f2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	699b      	ldr	r3, [r3, #24]
 800197c:	2b00      	cmp	r3, #0
 800197e:	d01c      	beq.n	80019ba <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001980:	4b2d      	ldr	r3, [pc, #180]	@ (8001a38 <HAL_RCC_OscConfig+0x4b8>)
 8001982:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001986:	4a2c      	ldr	r2, [pc, #176]	@ (8001a38 <HAL_RCC_OscConfig+0x4b8>)
 8001988:	f043 0301 	orr.w	r3, r3, #1
 800198c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001990:	f7ff f8f8 	bl	8000b84 <HAL_GetTick>
 8001994:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001996:	e008      	b.n	80019aa <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001998:	f7ff f8f4 	bl	8000b84 <HAL_GetTick>
 800199c:	4602      	mov	r2, r0
 800199e:	693b      	ldr	r3, [r7, #16]
 80019a0:	1ad3      	subs	r3, r2, r3
 80019a2:	2b02      	cmp	r3, #2
 80019a4:	d901      	bls.n	80019aa <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80019a6:	2303      	movs	r3, #3
 80019a8:	e0f2      	b.n	8001b90 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80019aa:	4b23      	ldr	r3, [pc, #140]	@ (8001a38 <HAL_RCC_OscConfig+0x4b8>)
 80019ac:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80019b0:	f003 0302 	and.w	r3, r3, #2
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d0ef      	beq.n	8001998 <HAL_RCC_OscConfig+0x418>
 80019b8:	e01b      	b.n	80019f2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80019ba:	4b1f      	ldr	r3, [pc, #124]	@ (8001a38 <HAL_RCC_OscConfig+0x4b8>)
 80019bc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80019c0:	4a1d      	ldr	r2, [pc, #116]	@ (8001a38 <HAL_RCC_OscConfig+0x4b8>)
 80019c2:	f023 0301 	bic.w	r3, r3, #1
 80019c6:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019ca:	f7ff f8db 	bl	8000b84 <HAL_GetTick>
 80019ce:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80019d0:	e008      	b.n	80019e4 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80019d2:	f7ff f8d7 	bl	8000b84 <HAL_GetTick>
 80019d6:	4602      	mov	r2, r0
 80019d8:	693b      	ldr	r3, [r7, #16]
 80019da:	1ad3      	subs	r3, r2, r3
 80019dc:	2b02      	cmp	r3, #2
 80019de:	d901      	bls.n	80019e4 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80019e0:	2303      	movs	r3, #3
 80019e2:	e0d5      	b.n	8001b90 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80019e4:	4b14      	ldr	r3, [pc, #80]	@ (8001a38 <HAL_RCC_OscConfig+0x4b8>)
 80019e6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80019ea:	f003 0302 	and.w	r3, r3, #2
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d1ef      	bne.n	80019d2 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	69db      	ldr	r3, [r3, #28]
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	f000 80c9 	beq.w	8001b8e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80019fc:	4b0e      	ldr	r3, [pc, #56]	@ (8001a38 <HAL_RCC_OscConfig+0x4b8>)
 80019fe:	689b      	ldr	r3, [r3, #8]
 8001a00:	f003 030c 	and.w	r3, r3, #12
 8001a04:	2b0c      	cmp	r3, #12
 8001a06:	f000 8083 	beq.w	8001b10 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	69db      	ldr	r3, [r3, #28]
 8001a0e:	2b02      	cmp	r3, #2
 8001a10:	d15e      	bne.n	8001ad0 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a12:	4b09      	ldr	r3, [pc, #36]	@ (8001a38 <HAL_RCC_OscConfig+0x4b8>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	4a08      	ldr	r2, [pc, #32]	@ (8001a38 <HAL_RCC_OscConfig+0x4b8>)
 8001a18:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001a1c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a1e:	f7ff f8b1 	bl	8000b84 <HAL_GetTick>
 8001a22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a24:	e00c      	b.n	8001a40 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a26:	f7ff f8ad 	bl	8000b84 <HAL_GetTick>
 8001a2a:	4602      	mov	r2, r0
 8001a2c:	693b      	ldr	r3, [r7, #16]
 8001a2e:	1ad3      	subs	r3, r2, r3
 8001a30:	2b02      	cmp	r3, #2
 8001a32:	d905      	bls.n	8001a40 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8001a34:	2303      	movs	r3, #3
 8001a36:	e0ab      	b.n	8001b90 <HAL_RCC_OscConfig+0x610>
 8001a38:	40021000 	.word	0x40021000
 8001a3c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a40:	4b55      	ldr	r3, [pc, #340]	@ (8001b98 <HAL_RCC_OscConfig+0x618>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d1ec      	bne.n	8001a26 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a4c:	4b52      	ldr	r3, [pc, #328]	@ (8001b98 <HAL_RCC_OscConfig+0x618>)
 8001a4e:	68da      	ldr	r2, [r3, #12]
 8001a50:	4b52      	ldr	r3, [pc, #328]	@ (8001b9c <HAL_RCC_OscConfig+0x61c>)
 8001a52:	4013      	ands	r3, r2
 8001a54:	687a      	ldr	r2, [r7, #4]
 8001a56:	6a11      	ldr	r1, [r2, #32]
 8001a58:	687a      	ldr	r2, [r7, #4]
 8001a5a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001a5c:	3a01      	subs	r2, #1
 8001a5e:	0112      	lsls	r2, r2, #4
 8001a60:	4311      	orrs	r1, r2
 8001a62:	687a      	ldr	r2, [r7, #4]
 8001a64:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8001a66:	0212      	lsls	r2, r2, #8
 8001a68:	4311      	orrs	r1, r2
 8001a6a:	687a      	ldr	r2, [r7, #4]
 8001a6c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001a6e:	0852      	lsrs	r2, r2, #1
 8001a70:	3a01      	subs	r2, #1
 8001a72:	0552      	lsls	r2, r2, #21
 8001a74:	4311      	orrs	r1, r2
 8001a76:	687a      	ldr	r2, [r7, #4]
 8001a78:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001a7a:	0852      	lsrs	r2, r2, #1
 8001a7c:	3a01      	subs	r2, #1
 8001a7e:	0652      	lsls	r2, r2, #25
 8001a80:	4311      	orrs	r1, r2
 8001a82:	687a      	ldr	r2, [r7, #4]
 8001a84:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001a86:	06d2      	lsls	r2, r2, #27
 8001a88:	430a      	orrs	r2, r1
 8001a8a:	4943      	ldr	r1, [pc, #268]	@ (8001b98 <HAL_RCC_OscConfig+0x618>)
 8001a8c:	4313      	orrs	r3, r2
 8001a8e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a90:	4b41      	ldr	r3, [pc, #260]	@ (8001b98 <HAL_RCC_OscConfig+0x618>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4a40      	ldr	r2, [pc, #256]	@ (8001b98 <HAL_RCC_OscConfig+0x618>)
 8001a96:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001a9a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001a9c:	4b3e      	ldr	r3, [pc, #248]	@ (8001b98 <HAL_RCC_OscConfig+0x618>)
 8001a9e:	68db      	ldr	r3, [r3, #12]
 8001aa0:	4a3d      	ldr	r2, [pc, #244]	@ (8001b98 <HAL_RCC_OscConfig+0x618>)
 8001aa2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001aa6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001aa8:	f7ff f86c 	bl	8000b84 <HAL_GetTick>
 8001aac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001aae:	e008      	b.n	8001ac2 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ab0:	f7ff f868 	bl	8000b84 <HAL_GetTick>
 8001ab4:	4602      	mov	r2, r0
 8001ab6:	693b      	ldr	r3, [r7, #16]
 8001ab8:	1ad3      	subs	r3, r2, r3
 8001aba:	2b02      	cmp	r3, #2
 8001abc:	d901      	bls.n	8001ac2 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8001abe:	2303      	movs	r3, #3
 8001ac0:	e066      	b.n	8001b90 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ac2:	4b35      	ldr	r3, [pc, #212]	@ (8001b98 <HAL_RCC_OscConfig+0x618>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d0f0      	beq.n	8001ab0 <HAL_RCC_OscConfig+0x530>
 8001ace:	e05e      	b.n	8001b8e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ad0:	4b31      	ldr	r3, [pc, #196]	@ (8001b98 <HAL_RCC_OscConfig+0x618>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4a30      	ldr	r2, [pc, #192]	@ (8001b98 <HAL_RCC_OscConfig+0x618>)
 8001ad6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001ada:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001adc:	f7ff f852 	bl	8000b84 <HAL_GetTick>
 8001ae0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ae2:	e008      	b.n	8001af6 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ae4:	f7ff f84e 	bl	8000b84 <HAL_GetTick>
 8001ae8:	4602      	mov	r2, r0
 8001aea:	693b      	ldr	r3, [r7, #16]
 8001aec:	1ad3      	subs	r3, r2, r3
 8001aee:	2b02      	cmp	r3, #2
 8001af0:	d901      	bls.n	8001af6 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8001af2:	2303      	movs	r3, #3
 8001af4:	e04c      	b.n	8001b90 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001af6:	4b28      	ldr	r3, [pc, #160]	@ (8001b98 <HAL_RCC_OscConfig+0x618>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d1f0      	bne.n	8001ae4 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001b02:	4b25      	ldr	r3, [pc, #148]	@ (8001b98 <HAL_RCC_OscConfig+0x618>)
 8001b04:	68da      	ldr	r2, [r3, #12]
 8001b06:	4924      	ldr	r1, [pc, #144]	@ (8001b98 <HAL_RCC_OscConfig+0x618>)
 8001b08:	4b25      	ldr	r3, [pc, #148]	@ (8001ba0 <HAL_RCC_OscConfig+0x620>)
 8001b0a:	4013      	ands	r3, r2
 8001b0c:	60cb      	str	r3, [r1, #12]
 8001b0e:	e03e      	b.n	8001b8e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	69db      	ldr	r3, [r3, #28]
 8001b14:	2b01      	cmp	r3, #1
 8001b16:	d101      	bne.n	8001b1c <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8001b18:	2301      	movs	r3, #1
 8001b1a:	e039      	b.n	8001b90 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001b1c:	4b1e      	ldr	r3, [pc, #120]	@ (8001b98 <HAL_RCC_OscConfig+0x618>)
 8001b1e:	68db      	ldr	r3, [r3, #12]
 8001b20:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b22:	697b      	ldr	r3, [r7, #20]
 8001b24:	f003 0203 	and.w	r2, r3, #3
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	6a1b      	ldr	r3, [r3, #32]
 8001b2c:	429a      	cmp	r2, r3
 8001b2e:	d12c      	bne.n	8001b8a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001b30:	697b      	ldr	r3, [r7, #20]
 8001b32:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b3a:	3b01      	subs	r3, #1
 8001b3c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b3e:	429a      	cmp	r2, r3
 8001b40:	d123      	bne.n	8001b8a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b42:	697b      	ldr	r3, [r7, #20]
 8001b44:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b4c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001b4e:	429a      	cmp	r2, r3
 8001b50:	d11b      	bne.n	8001b8a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001b52:	697b      	ldr	r3, [r7, #20]
 8001b54:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b5c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b5e:	429a      	cmp	r2, r3
 8001b60:	d113      	bne.n	8001b8a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b62:	697b      	ldr	r3, [r7, #20]
 8001b64:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b6c:	085b      	lsrs	r3, r3, #1
 8001b6e:	3b01      	subs	r3, #1
 8001b70:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001b72:	429a      	cmp	r2, r3
 8001b74:	d109      	bne.n	8001b8a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001b76:	697b      	ldr	r3, [r7, #20]
 8001b78:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b80:	085b      	lsrs	r3, r3, #1
 8001b82:	3b01      	subs	r3, #1
 8001b84:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b86:	429a      	cmp	r2, r3
 8001b88:	d001      	beq.n	8001b8e <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	e000      	b.n	8001b90 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8001b8e:	2300      	movs	r3, #0
}
 8001b90:	4618      	mov	r0, r3
 8001b92:	3720      	adds	r7, #32
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bd80      	pop	{r7, pc}
 8001b98:	40021000 	.word	0x40021000
 8001b9c:	019f800c 	.word	0x019f800c
 8001ba0:	feeefffc 	.word	0xfeeefffc

08001ba4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b086      	sub	sp, #24
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
 8001bac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d101      	bne.n	8001bbc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001bb8:	2301      	movs	r3, #1
 8001bba:	e11e      	b.n	8001dfa <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001bbc:	4b91      	ldr	r3, [pc, #580]	@ (8001e04 <HAL_RCC_ClockConfig+0x260>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f003 030f 	and.w	r3, r3, #15
 8001bc4:	683a      	ldr	r2, [r7, #0]
 8001bc6:	429a      	cmp	r2, r3
 8001bc8:	d910      	bls.n	8001bec <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bca:	4b8e      	ldr	r3, [pc, #568]	@ (8001e04 <HAL_RCC_ClockConfig+0x260>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f023 020f 	bic.w	r2, r3, #15
 8001bd2:	498c      	ldr	r1, [pc, #560]	@ (8001e04 <HAL_RCC_ClockConfig+0x260>)
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	4313      	orrs	r3, r2
 8001bd8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bda:	4b8a      	ldr	r3, [pc, #552]	@ (8001e04 <HAL_RCC_ClockConfig+0x260>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f003 030f 	and.w	r3, r3, #15
 8001be2:	683a      	ldr	r2, [r7, #0]
 8001be4:	429a      	cmp	r2, r3
 8001be6:	d001      	beq.n	8001bec <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001be8:	2301      	movs	r3, #1
 8001bea:	e106      	b.n	8001dfa <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f003 0301 	and.w	r3, r3, #1
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d073      	beq.n	8001ce0 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	2b03      	cmp	r3, #3
 8001bfe:	d129      	bne.n	8001c54 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c00:	4b81      	ldr	r3, [pc, #516]	@ (8001e08 <HAL_RCC_ClockConfig+0x264>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d101      	bne.n	8001c10 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001c0c:	2301      	movs	r3, #1
 8001c0e:	e0f4      	b.n	8001dfa <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001c10:	f000 f966 	bl	8001ee0 <RCC_GetSysClockFreqFromPLLSource>
 8001c14:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8001c16:	693b      	ldr	r3, [r7, #16]
 8001c18:	4a7c      	ldr	r2, [pc, #496]	@ (8001e0c <HAL_RCC_ClockConfig+0x268>)
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d93f      	bls.n	8001c9e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001c1e:	4b7a      	ldr	r3, [pc, #488]	@ (8001e08 <HAL_RCC_ClockConfig+0x264>)
 8001c20:	689b      	ldr	r3, [r3, #8]
 8001c22:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d009      	beq.n	8001c3e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d033      	beq.n	8001c9e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d12f      	bne.n	8001c9e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001c3e:	4b72      	ldr	r3, [pc, #456]	@ (8001e08 <HAL_RCC_ClockConfig+0x264>)
 8001c40:	689b      	ldr	r3, [r3, #8]
 8001c42:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001c46:	4a70      	ldr	r2, [pc, #448]	@ (8001e08 <HAL_RCC_ClockConfig+0x264>)
 8001c48:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001c4c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001c4e:	2380      	movs	r3, #128	@ 0x80
 8001c50:	617b      	str	r3, [r7, #20]
 8001c52:	e024      	b.n	8001c9e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	2b02      	cmp	r3, #2
 8001c5a:	d107      	bne.n	8001c6c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c5c:	4b6a      	ldr	r3, [pc, #424]	@ (8001e08 <HAL_RCC_ClockConfig+0x264>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d109      	bne.n	8001c7c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001c68:	2301      	movs	r3, #1
 8001c6a:	e0c6      	b.n	8001dfa <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c6c:	4b66      	ldr	r3, [pc, #408]	@ (8001e08 <HAL_RCC_ClockConfig+0x264>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d101      	bne.n	8001c7c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001c78:	2301      	movs	r3, #1
 8001c7a:	e0be      	b.n	8001dfa <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001c7c:	f000 f8ce 	bl	8001e1c <HAL_RCC_GetSysClockFreq>
 8001c80:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8001c82:	693b      	ldr	r3, [r7, #16]
 8001c84:	4a61      	ldr	r2, [pc, #388]	@ (8001e0c <HAL_RCC_ClockConfig+0x268>)
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d909      	bls.n	8001c9e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001c8a:	4b5f      	ldr	r3, [pc, #380]	@ (8001e08 <HAL_RCC_ClockConfig+0x264>)
 8001c8c:	689b      	ldr	r3, [r3, #8]
 8001c8e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001c92:	4a5d      	ldr	r2, [pc, #372]	@ (8001e08 <HAL_RCC_ClockConfig+0x264>)
 8001c94:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001c98:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001c9a:	2380      	movs	r3, #128	@ 0x80
 8001c9c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001c9e:	4b5a      	ldr	r3, [pc, #360]	@ (8001e08 <HAL_RCC_ClockConfig+0x264>)
 8001ca0:	689b      	ldr	r3, [r3, #8]
 8001ca2:	f023 0203 	bic.w	r2, r3, #3
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	685b      	ldr	r3, [r3, #4]
 8001caa:	4957      	ldr	r1, [pc, #348]	@ (8001e08 <HAL_RCC_ClockConfig+0x264>)
 8001cac:	4313      	orrs	r3, r2
 8001cae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001cb0:	f7fe ff68 	bl	8000b84 <HAL_GetTick>
 8001cb4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cb6:	e00a      	b.n	8001cce <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cb8:	f7fe ff64 	bl	8000b84 <HAL_GetTick>
 8001cbc:	4602      	mov	r2, r0
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	1ad3      	subs	r3, r2, r3
 8001cc2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d901      	bls.n	8001cce <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8001cca:	2303      	movs	r3, #3
 8001ccc:	e095      	b.n	8001dfa <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cce:	4b4e      	ldr	r3, [pc, #312]	@ (8001e08 <HAL_RCC_ClockConfig+0x264>)
 8001cd0:	689b      	ldr	r3, [r3, #8]
 8001cd2:	f003 020c 	and.w	r2, r3, #12
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	685b      	ldr	r3, [r3, #4]
 8001cda:	009b      	lsls	r3, r3, #2
 8001cdc:	429a      	cmp	r2, r3
 8001cde:	d1eb      	bne.n	8001cb8 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f003 0302 	and.w	r3, r3, #2
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d023      	beq.n	8001d34 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f003 0304 	and.w	r3, r3, #4
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d005      	beq.n	8001d04 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001cf8:	4b43      	ldr	r3, [pc, #268]	@ (8001e08 <HAL_RCC_ClockConfig+0x264>)
 8001cfa:	689b      	ldr	r3, [r3, #8]
 8001cfc:	4a42      	ldr	r2, [pc, #264]	@ (8001e08 <HAL_RCC_ClockConfig+0x264>)
 8001cfe:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001d02:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f003 0308 	and.w	r3, r3, #8
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d007      	beq.n	8001d20 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8001d10:	4b3d      	ldr	r3, [pc, #244]	@ (8001e08 <HAL_RCC_ClockConfig+0x264>)
 8001d12:	689b      	ldr	r3, [r3, #8]
 8001d14:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8001d18:	4a3b      	ldr	r2, [pc, #236]	@ (8001e08 <HAL_RCC_ClockConfig+0x264>)
 8001d1a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001d1e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d20:	4b39      	ldr	r3, [pc, #228]	@ (8001e08 <HAL_RCC_ClockConfig+0x264>)
 8001d22:	689b      	ldr	r3, [r3, #8]
 8001d24:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	689b      	ldr	r3, [r3, #8]
 8001d2c:	4936      	ldr	r1, [pc, #216]	@ (8001e08 <HAL_RCC_ClockConfig+0x264>)
 8001d2e:	4313      	orrs	r3, r2
 8001d30:	608b      	str	r3, [r1, #8]
 8001d32:	e008      	b.n	8001d46 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8001d34:	697b      	ldr	r3, [r7, #20]
 8001d36:	2b80      	cmp	r3, #128	@ 0x80
 8001d38:	d105      	bne.n	8001d46 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001d3a:	4b33      	ldr	r3, [pc, #204]	@ (8001e08 <HAL_RCC_ClockConfig+0x264>)
 8001d3c:	689b      	ldr	r3, [r3, #8]
 8001d3e:	4a32      	ldr	r2, [pc, #200]	@ (8001e08 <HAL_RCC_ClockConfig+0x264>)
 8001d40:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001d44:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001d46:	4b2f      	ldr	r3, [pc, #188]	@ (8001e04 <HAL_RCC_ClockConfig+0x260>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f003 030f 	and.w	r3, r3, #15
 8001d4e:	683a      	ldr	r2, [r7, #0]
 8001d50:	429a      	cmp	r2, r3
 8001d52:	d21d      	bcs.n	8001d90 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d54:	4b2b      	ldr	r3, [pc, #172]	@ (8001e04 <HAL_RCC_ClockConfig+0x260>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f023 020f 	bic.w	r2, r3, #15
 8001d5c:	4929      	ldr	r1, [pc, #164]	@ (8001e04 <HAL_RCC_ClockConfig+0x260>)
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	4313      	orrs	r3, r2
 8001d62:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001d64:	f7fe ff0e 	bl	8000b84 <HAL_GetTick>
 8001d68:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d6a:	e00a      	b.n	8001d82 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d6c:	f7fe ff0a 	bl	8000b84 <HAL_GetTick>
 8001d70:	4602      	mov	r2, r0
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	1ad3      	subs	r3, r2, r3
 8001d76:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d901      	bls.n	8001d82 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8001d7e:	2303      	movs	r3, #3
 8001d80:	e03b      	b.n	8001dfa <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d82:	4b20      	ldr	r3, [pc, #128]	@ (8001e04 <HAL_RCC_ClockConfig+0x260>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f003 030f 	and.w	r3, r3, #15
 8001d8a:	683a      	ldr	r2, [r7, #0]
 8001d8c:	429a      	cmp	r2, r3
 8001d8e:	d1ed      	bne.n	8001d6c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f003 0304 	and.w	r3, r3, #4
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d008      	beq.n	8001dae <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d9c:	4b1a      	ldr	r3, [pc, #104]	@ (8001e08 <HAL_RCC_ClockConfig+0x264>)
 8001d9e:	689b      	ldr	r3, [r3, #8]
 8001da0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	68db      	ldr	r3, [r3, #12]
 8001da8:	4917      	ldr	r1, [pc, #92]	@ (8001e08 <HAL_RCC_ClockConfig+0x264>)
 8001daa:	4313      	orrs	r3, r2
 8001dac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f003 0308 	and.w	r3, r3, #8
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d009      	beq.n	8001dce <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001dba:	4b13      	ldr	r3, [pc, #76]	@ (8001e08 <HAL_RCC_ClockConfig+0x264>)
 8001dbc:	689b      	ldr	r3, [r3, #8]
 8001dbe:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	691b      	ldr	r3, [r3, #16]
 8001dc6:	00db      	lsls	r3, r3, #3
 8001dc8:	490f      	ldr	r1, [pc, #60]	@ (8001e08 <HAL_RCC_ClockConfig+0x264>)
 8001dca:	4313      	orrs	r3, r2
 8001dcc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001dce:	f000 f825 	bl	8001e1c <HAL_RCC_GetSysClockFreq>
 8001dd2:	4602      	mov	r2, r0
 8001dd4:	4b0c      	ldr	r3, [pc, #48]	@ (8001e08 <HAL_RCC_ClockConfig+0x264>)
 8001dd6:	689b      	ldr	r3, [r3, #8]
 8001dd8:	091b      	lsrs	r3, r3, #4
 8001dda:	f003 030f 	and.w	r3, r3, #15
 8001dde:	490c      	ldr	r1, [pc, #48]	@ (8001e10 <HAL_RCC_ClockConfig+0x26c>)
 8001de0:	5ccb      	ldrb	r3, [r1, r3]
 8001de2:	f003 031f 	and.w	r3, r3, #31
 8001de6:	fa22 f303 	lsr.w	r3, r2, r3
 8001dea:	4a0a      	ldr	r2, [pc, #40]	@ (8001e14 <HAL_RCC_ClockConfig+0x270>)
 8001dec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001dee:	4b0a      	ldr	r3, [pc, #40]	@ (8001e18 <HAL_RCC_ClockConfig+0x274>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	4618      	mov	r0, r3
 8001df4:	f7fe fe7a 	bl	8000aec <HAL_InitTick>
 8001df8:	4603      	mov	r3, r0
}
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	3718      	adds	r7, #24
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}
 8001e02:	bf00      	nop
 8001e04:	40022000 	.word	0x40022000
 8001e08:	40021000 	.word	0x40021000
 8001e0c:	04c4b400 	.word	0x04c4b400
 8001e10:	080034dc 	.word	0x080034dc
 8001e14:	20000000 	.word	0x20000000
 8001e18:	20000004 	.word	0x20000004

08001e1c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	b087      	sub	sp, #28
 8001e20:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001e22:	4b2c      	ldr	r3, [pc, #176]	@ (8001ed4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e24:	689b      	ldr	r3, [r3, #8]
 8001e26:	f003 030c 	and.w	r3, r3, #12
 8001e2a:	2b04      	cmp	r3, #4
 8001e2c:	d102      	bne.n	8001e34 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001e2e:	4b2a      	ldr	r3, [pc, #168]	@ (8001ed8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001e30:	613b      	str	r3, [r7, #16]
 8001e32:	e047      	b.n	8001ec4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001e34:	4b27      	ldr	r3, [pc, #156]	@ (8001ed4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e36:	689b      	ldr	r3, [r3, #8]
 8001e38:	f003 030c 	and.w	r3, r3, #12
 8001e3c:	2b08      	cmp	r3, #8
 8001e3e:	d102      	bne.n	8001e46 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001e40:	4b26      	ldr	r3, [pc, #152]	@ (8001edc <HAL_RCC_GetSysClockFreq+0xc0>)
 8001e42:	613b      	str	r3, [r7, #16]
 8001e44:	e03e      	b.n	8001ec4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001e46:	4b23      	ldr	r3, [pc, #140]	@ (8001ed4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e48:	689b      	ldr	r3, [r3, #8]
 8001e4a:	f003 030c 	and.w	r3, r3, #12
 8001e4e:	2b0c      	cmp	r3, #12
 8001e50:	d136      	bne.n	8001ec0 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001e52:	4b20      	ldr	r3, [pc, #128]	@ (8001ed4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e54:	68db      	ldr	r3, [r3, #12]
 8001e56:	f003 0303 	and.w	r3, r3, #3
 8001e5a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001e5c:	4b1d      	ldr	r3, [pc, #116]	@ (8001ed4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e5e:	68db      	ldr	r3, [r3, #12]
 8001e60:	091b      	lsrs	r3, r3, #4
 8001e62:	f003 030f 	and.w	r3, r3, #15
 8001e66:	3301      	adds	r3, #1
 8001e68:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	2b03      	cmp	r3, #3
 8001e6e:	d10c      	bne.n	8001e8a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001e70:	4a1a      	ldr	r2, [pc, #104]	@ (8001edc <HAL_RCC_GetSysClockFreq+0xc0>)
 8001e72:	68bb      	ldr	r3, [r7, #8]
 8001e74:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e78:	4a16      	ldr	r2, [pc, #88]	@ (8001ed4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e7a:	68d2      	ldr	r2, [r2, #12]
 8001e7c:	0a12      	lsrs	r2, r2, #8
 8001e7e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001e82:	fb02 f303 	mul.w	r3, r2, r3
 8001e86:	617b      	str	r3, [r7, #20]
      break;
 8001e88:	e00c      	b.n	8001ea4 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001e8a:	4a13      	ldr	r2, [pc, #76]	@ (8001ed8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001e8c:	68bb      	ldr	r3, [r7, #8]
 8001e8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e92:	4a10      	ldr	r2, [pc, #64]	@ (8001ed4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e94:	68d2      	ldr	r2, [r2, #12]
 8001e96:	0a12      	lsrs	r2, r2, #8
 8001e98:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001e9c:	fb02 f303 	mul.w	r3, r2, r3
 8001ea0:	617b      	str	r3, [r7, #20]
      break;
 8001ea2:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001ea4:	4b0b      	ldr	r3, [pc, #44]	@ (8001ed4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ea6:	68db      	ldr	r3, [r3, #12]
 8001ea8:	0e5b      	lsrs	r3, r3, #25
 8001eaa:	f003 0303 	and.w	r3, r3, #3
 8001eae:	3301      	adds	r3, #1
 8001eb0:	005b      	lsls	r3, r3, #1
 8001eb2:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8001eb4:	697a      	ldr	r2, [r7, #20]
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ebc:	613b      	str	r3, [r7, #16]
 8001ebe:	e001      	b.n	8001ec4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001ec4:	693b      	ldr	r3, [r7, #16]
}
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	371c      	adds	r7, #28
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed0:	4770      	bx	lr
 8001ed2:	bf00      	nop
 8001ed4:	40021000 	.word	0x40021000
 8001ed8:	00f42400 	.word	0x00f42400
 8001edc:	007a1200 	.word	0x007a1200

08001ee0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	b087      	sub	sp, #28
 8001ee4:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001ee6:	4b1e      	ldr	r3, [pc, #120]	@ (8001f60 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001ee8:	68db      	ldr	r3, [r3, #12]
 8001eea:	f003 0303 	and.w	r3, r3, #3
 8001eee:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001ef0:	4b1b      	ldr	r3, [pc, #108]	@ (8001f60 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001ef2:	68db      	ldr	r3, [r3, #12]
 8001ef4:	091b      	lsrs	r3, r3, #4
 8001ef6:	f003 030f 	and.w	r3, r3, #15
 8001efa:	3301      	adds	r3, #1
 8001efc:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8001efe:	693b      	ldr	r3, [r7, #16]
 8001f00:	2b03      	cmp	r3, #3
 8001f02:	d10c      	bne.n	8001f1e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001f04:	4a17      	ldr	r2, [pc, #92]	@ (8001f64 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f0c:	4a14      	ldr	r2, [pc, #80]	@ (8001f60 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001f0e:	68d2      	ldr	r2, [r2, #12]
 8001f10:	0a12      	lsrs	r2, r2, #8
 8001f12:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001f16:	fb02 f303 	mul.w	r3, r2, r3
 8001f1a:	617b      	str	r3, [r7, #20]
    break;
 8001f1c:	e00c      	b.n	8001f38 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001f1e:	4a12      	ldr	r2, [pc, #72]	@ (8001f68 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f26:	4a0e      	ldr	r2, [pc, #56]	@ (8001f60 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001f28:	68d2      	ldr	r2, [r2, #12]
 8001f2a:	0a12      	lsrs	r2, r2, #8
 8001f2c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001f30:	fb02 f303 	mul.w	r3, r2, r3
 8001f34:	617b      	str	r3, [r7, #20]
    break;
 8001f36:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001f38:	4b09      	ldr	r3, [pc, #36]	@ (8001f60 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001f3a:	68db      	ldr	r3, [r3, #12]
 8001f3c:	0e5b      	lsrs	r3, r3, #25
 8001f3e:	f003 0303 	and.w	r3, r3, #3
 8001f42:	3301      	adds	r3, #1
 8001f44:	005b      	lsls	r3, r3, #1
 8001f46:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8001f48:	697a      	ldr	r2, [r7, #20]
 8001f4a:	68bb      	ldr	r3, [r7, #8]
 8001f4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f50:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8001f52:	687b      	ldr	r3, [r7, #4]
}
 8001f54:	4618      	mov	r0, r3
 8001f56:	371c      	adds	r7, #28
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5e:	4770      	bx	lr
 8001f60:	40021000 	.word	0x40021000
 8001f64:	007a1200 	.word	0x007a1200
 8001f68:	00f42400 	.word	0x00f42400

08001f6c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b086      	sub	sp, #24
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001f74:	2300      	movs	r3, #0
 8001f76:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001f78:	2300      	movs	r3, #0
 8001f7a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	f000 8098 	beq.w	80020ba <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f8e:	4b43      	ldr	r3, [pc, #268]	@ (800209c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001f90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f92:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d10d      	bne.n	8001fb6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f9a:	4b40      	ldr	r3, [pc, #256]	@ (800209c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001f9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f9e:	4a3f      	ldr	r2, [pc, #252]	@ (800209c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001fa0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001fa4:	6593      	str	r3, [r2, #88]	@ 0x58
 8001fa6:	4b3d      	ldr	r3, [pc, #244]	@ (800209c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001fa8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001faa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fae:	60bb      	str	r3, [r7, #8]
 8001fb0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001fb6:	4b3a      	ldr	r3, [pc, #232]	@ (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	4a39      	ldr	r2, [pc, #228]	@ (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001fbc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001fc0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001fc2:	f7fe fddf 	bl	8000b84 <HAL_GetTick>
 8001fc6:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001fc8:	e009      	b.n	8001fde <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fca:	f7fe fddb 	bl	8000b84 <HAL_GetTick>
 8001fce:	4602      	mov	r2, r0
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	1ad3      	subs	r3, r2, r3
 8001fd4:	2b02      	cmp	r3, #2
 8001fd6:	d902      	bls.n	8001fde <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8001fd8:	2303      	movs	r3, #3
 8001fda:	74fb      	strb	r3, [r7, #19]
        break;
 8001fdc:	e005      	b.n	8001fea <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001fde:	4b30      	ldr	r3, [pc, #192]	@ (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d0ef      	beq.n	8001fca <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8001fea:	7cfb      	ldrb	r3, [r7, #19]
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d159      	bne.n	80020a4 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001ff0:	4b2a      	ldr	r3, [pc, #168]	@ (800209c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001ff2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ff6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001ffa:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001ffc:	697b      	ldr	r3, [r7, #20]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d01e      	beq.n	8002040 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002006:	697a      	ldr	r2, [r7, #20]
 8002008:	429a      	cmp	r2, r3
 800200a:	d019      	beq.n	8002040 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800200c:	4b23      	ldr	r3, [pc, #140]	@ (800209c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800200e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002012:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002016:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002018:	4b20      	ldr	r3, [pc, #128]	@ (800209c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800201a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800201e:	4a1f      	ldr	r2, [pc, #124]	@ (800209c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002020:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002024:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002028:	4b1c      	ldr	r3, [pc, #112]	@ (800209c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800202a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800202e:	4a1b      	ldr	r2, [pc, #108]	@ (800209c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002030:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002034:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002038:	4a18      	ldr	r2, [pc, #96]	@ (800209c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800203a:	697b      	ldr	r3, [r7, #20]
 800203c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002040:	697b      	ldr	r3, [r7, #20]
 8002042:	f003 0301 	and.w	r3, r3, #1
 8002046:	2b00      	cmp	r3, #0
 8002048:	d016      	beq.n	8002078 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800204a:	f7fe fd9b 	bl	8000b84 <HAL_GetTick>
 800204e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002050:	e00b      	b.n	800206a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002052:	f7fe fd97 	bl	8000b84 <HAL_GetTick>
 8002056:	4602      	mov	r2, r0
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	1ad3      	subs	r3, r2, r3
 800205c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002060:	4293      	cmp	r3, r2
 8002062:	d902      	bls.n	800206a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002064:	2303      	movs	r3, #3
 8002066:	74fb      	strb	r3, [r7, #19]
            break;
 8002068:	e006      	b.n	8002078 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800206a:	4b0c      	ldr	r3, [pc, #48]	@ (800209c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800206c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002070:	f003 0302 	and.w	r3, r3, #2
 8002074:	2b00      	cmp	r3, #0
 8002076:	d0ec      	beq.n	8002052 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002078:	7cfb      	ldrb	r3, [r7, #19]
 800207a:	2b00      	cmp	r3, #0
 800207c:	d10b      	bne.n	8002096 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800207e:	4b07      	ldr	r3, [pc, #28]	@ (800209c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002080:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002084:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800208c:	4903      	ldr	r1, [pc, #12]	@ (800209c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800208e:	4313      	orrs	r3, r2
 8002090:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002094:	e008      	b.n	80020a8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002096:	7cfb      	ldrb	r3, [r7, #19]
 8002098:	74bb      	strb	r3, [r7, #18]
 800209a:	e005      	b.n	80020a8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800209c:	40021000 	.word	0x40021000
 80020a0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80020a4:	7cfb      	ldrb	r3, [r7, #19]
 80020a6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80020a8:	7c7b      	ldrb	r3, [r7, #17]
 80020aa:	2b01      	cmp	r3, #1
 80020ac:	d105      	bne.n	80020ba <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020ae:	4ba6      	ldr	r3, [pc, #664]	@ (8002348 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80020b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020b2:	4aa5      	ldr	r2, [pc, #660]	@ (8002348 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80020b4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80020b8:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f003 0301 	and.w	r3, r3, #1
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d00a      	beq.n	80020dc <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80020c6:	4ba0      	ldr	r3, [pc, #640]	@ (8002348 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80020c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020cc:	f023 0203 	bic.w	r2, r3, #3
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	499c      	ldr	r1, [pc, #624]	@ (8002348 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80020d6:	4313      	orrs	r3, r2
 80020d8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f003 0302 	and.w	r3, r3, #2
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d00a      	beq.n	80020fe <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80020e8:	4b97      	ldr	r3, [pc, #604]	@ (8002348 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80020ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020ee:	f023 020c 	bic.w	r2, r3, #12
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	689b      	ldr	r3, [r3, #8]
 80020f6:	4994      	ldr	r1, [pc, #592]	@ (8002348 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80020f8:	4313      	orrs	r3, r2
 80020fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f003 0304 	and.w	r3, r3, #4
 8002106:	2b00      	cmp	r3, #0
 8002108:	d00a      	beq.n	8002120 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800210a:	4b8f      	ldr	r3, [pc, #572]	@ (8002348 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800210c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002110:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	68db      	ldr	r3, [r3, #12]
 8002118:	498b      	ldr	r1, [pc, #556]	@ (8002348 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800211a:	4313      	orrs	r3, r2
 800211c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f003 0308 	and.w	r3, r3, #8
 8002128:	2b00      	cmp	r3, #0
 800212a:	d00a      	beq.n	8002142 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800212c:	4b86      	ldr	r3, [pc, #536]	@ (8002348 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800212e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002132:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	691b      	ldr	r3, [r3, #16]
 800213a:	4983      	ldr	r1, [pc, #524]	@ (8002348 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800213c:	4313      	orrs	r3, r2
 800213e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f003 0320 	and.w	r3, r3, #32
 800214a:	2b00      	cmp	r3, #0
 800214c:	d00a      	beq.n	8002164 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800214e:	4b7e      	ldr	r3, [pc, #504]	@ (8002348 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002150:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002154:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	695b      	ldr	r3, [r3, #20]
 800215c:	497a      	ldr	r1, [pc, #488]	@ (8002348 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800215e:	4313      	orrs	r3, r2
 8002160:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800216c:	2b00      	cmp	r3, #0
 800216e:	d00a      	beq.n	8002186 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002170:	4b75      	ldr	r3, [pc, #468]	@ (8002348 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002172:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002176:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	699b      	ldr	r3, [r3, #24]
 800217e:	4972      	ldr	r1, [pc, #456]	@ (8002348 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002180:	4313      	orrs	r3, r2
 8002182:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800218e:	2b00      	cmp	r3, #0
 8002190:	d00a      	beq.n	80021a8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002192:	4b6d      	ldr	r3, [pc, #436]	@ (8002348 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002194:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002198:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	69db      	ldr	r3, [r3, #28]
 80021a0:	4969      	ldr	r1, [pc, #420]	@ (8002348 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80021a2:	4313      	orrs	r3, r2
 80021a4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d00a      	beq.n	80021ca <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80021b4:	4b64      	ldr	r3, [pc, #400]	@ (8002348 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80021b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021ba:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6a1b      	ldr	r3, [r3, #32]
 80021c2:	4961      	ldr	r1, [pc, #388]	@ (8002348 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80021c4:	4313      	orrs	r3, r2
 80021c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d00a      	beq.n	80021ec <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80021d6:	4b5c      	ldr	r3, [pc, #368]	@ (8002348 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80021d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021dc:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021e4:	4958      	ldr	r1, [pc, #352]	@ (8002348 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80021e6:	4313      	orrs	r3, r2
 80021e8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d015      	beq.n	8002224 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80021f8:	4b53      	ldr	r3, [pc, #332]	@ (8002348 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80021fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021fe:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002206:	4950      	ldr	r1, [pc, #320]	@ (8002348 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002208:	4313      	orrs	r3, r2
 800220a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002212:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002216:	d105      	bne.n	8002224 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002218:	4b4b      	ldr	r3, [pc, #300]	@ (8002348 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800221a:	68db      	ldr	r3, [r3, #12]
 800221c:	4a4a      	ldr	r2, [pc, #296]	@ (8002348 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800221e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002222:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800222c:	2b00      	cmp	r3, #0
 800222e:	d015      	beq.n	800225c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002230:	4b45      	ldr	r3, [pc, #276]	@ (8002348 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002232:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002236:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800223e:	4942      	ldr	r1, [pc, #264]	@ (8002348 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002240:	4313      	orrs	r3, r2
 8002242:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800224a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800224e:	d105      	bne.n	800225c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002250:	4b3d      	ldr	r3, [pc, #244]	@ (8002348 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002252:	68db      	ldr	r3, [r3, #12]
 8002254:	4a3c      	ldr	r2, [pc, #240]	@ (8002348 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002256:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800225a:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002264:	2b00      	cmp	r3, #0
 8002266:	d015      	beq.n	8002294 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002268:	4b37      	ldr	r3, [pc, #220]	@ (8002348 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800226a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800226e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002276:	4934      	ldr	r1, [pc, #208]	@ (8002348 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002278:	4313      	orrs	r3, r2
 800227a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002282:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002286:	d105      	bne.n	8002294 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002288:	4b2f      	ldr	r3, [pc, #188]	@ (8002348 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800228a:	68db      	ldr	r3, [r3, #12]
 800228c:	4a2e      	ldr	r2, [pc, #184]	@ (8002348 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800228e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002292:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800229c:	2b00      	cmp	r3, #0
 800229e:	d015      	beq.n	80022cc <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80022a0:	4b29      	ldr	r3, [pc, #164]	@ (8002348 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022a6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80022ae:	4926      	ldr	r1, [pc, #152]	@ (8002348 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022b0:	4313      	orrs	r3, r2
 80022b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80022ba:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80022be:	d105      	bne.n	80022cc <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80022c0:	4b21      	ldr	r3, [pc, #132]	@ (8002348 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022c2:	68db      	ldr	r3, [r3, #12]
 80022c4:	4a20      	ldr	r2, [pc, #128]	@ (8002348 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022c6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80022ca:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d015      	beq.n	8002304 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80022d8:	4b1b      	ldr	r3, [pc, #108]	@ (8002348 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022de:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80022e6:	4918      	ldr	r1, [pc, #96]	@ (8002348 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022e8:	4313      	orrs	r3, r2
 80022ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80022f2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80022f6:	d105      	bne.n	8002304 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80022f8:	4b13      	ldr	r3, [pc, #76]	@ (8002348 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022fa:	68db      	ldr	r3, [r3, #12]
 80022fc:	4a12      	ldr	r2, [pc, #72]	@ (8002348 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022fe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002302:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800230c:	2b00      	cmp	r3, #0
 800230e:	d015      	beq.n	800233c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002310:	4b0d      	ldr	r3, [pc, #52]	@ (8002348 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002312:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002316:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800231e:	490a      	ldr	r1, [pc, #40]	@ (8002348 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002320:	4313      	orrs	r3, r2
 8002322:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800232a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800232e:	d105      	bne.n	800233c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002330:	4b05      	ldr	r3, [pc, #20]	@ (8002348 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002332:	68db      	ldr	r3, [r3, #12]
 8002334:	4a04      	ldr	r2, [pc, #16]	@ (8002348 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002336:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800233a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800233c:	7cbb      	ldrb	r3, [r7, #18]
}
 800233e:	4618      	mov	r0, r3
 8002340:	3718      	adds	r7, #24
 8002342:	46bd      	mov	sp, r7
 8002344:	bd80      	pop	{r7, pc}
 8002346:	bf00      	nop
 8002348:	40021000 	.word	0x40021000

0800234c <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b082      	sub	sp, #8
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2b00      	cmp	r3, #0
 8002358:	d101      	bne.n	800235e <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 800235a:	2301      	movs	r3, #1
 800235c:	e027      	b.n	80023ae <HAL_RNG_Init+0x62>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	7a5b      	ldrb	r3, [r3, #9]
 8002362:	b2db      	uxtb	r3, r3
 8002364:	2b00      	cmp	r3, #0
 8002366:	d105      	bne.n	8002374 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2200      	movs	r2, #0
 800236c:	721a      	strb	r2, [r3, #8]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 800236e:	6878      	ldr	r0, [r7, #4]
 8002370:	f7fe f93c 	bl	80005ec <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2202      	movs	r2, #2
 8002378:	725a      	strb	r2, [r3, #9]

  /* Clock Error Detection Configuration */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f023 0108 	bic.w	r1, r3, #8
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	685a      	ldr	r2, [r3, #4]
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	430a      	orrs	r2, r1
 800238e:	601a      	str	r2, [r3, #0]

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	681a      	ldr	r2, [r3, #0]
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f042 0204 	orr.w	r2, r2, #4
 800239e:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2201      	movs	r2, #1
 80023a4:	725a      	strb	r2, [r3, #9]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	2200      	movs	r2, #0
 80023aa:	60da      	str	r2, [r3, #12]

  /* Return function status */
  return HAL_OK;
 80023ac:	2300      	movs	r3, #0
}
 80023ae:	4618      	mov	r0, r3
 80023b0:	3708      	adds	r7, #8
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bd80      	pop	{r7, pc}

080023b6 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80023b6:	b580      	push	{r7, lr}
 80023b8:	b084      	sub	sp, #16
 80023ba:	af00      	add	r7, sp, #0
 80023bc:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d101      	bne.n	80023c8 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80023c4:	2301      	movs	r3, #1
 80023c6:	e09d      	b.n	8002504 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d108      	bne.n	80023e2 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80023d8:	d009      	beq.n	80023ee <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	2200      	movs	r2, #0
 80023de:	61da      	str	r2, [r3, #28]
 80023e0:	e005      	b.n	80023ee <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	2200      	movs	r2, #0
 80023e6:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2200      	movs	r2, #0
 80023ec:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	2200      	movs	r2, #0
 80023f2:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80023fa:	b2db      	uxtb	r3, r3
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d106      	bne.n	800240e <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2200      	movs	r2, #0
 8002404:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002408:	6878      	ldr	r0, [r7, #4]
 800240a:	f7fe f923 	bl	8000654 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	2202      	movs	r2, #2
 8002412:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	681a      	ldr	r2, [r3, #0]
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002424:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	68db      	ldr	r3, [r3, #12]
 800242a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800242e:	d902      	bls.n	8002436 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002430:	2300      	movs	r3, #0
 8002432:	60fb      	str	r3, [r7, #12]
 8002434:	e002      	b.n	800243c <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002436:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800243a:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	68db      	ldr	r3, [r3, #12]
 8002440:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8002444:	d007      	beq.n	8002456 <HAL_SPI_Init+0xa0>
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	68db      	ldr	r3, [r3, #12]
 800244a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800244e:	d002      	beq.n	8002456 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2200      	movs	r2, #0
 8002454:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	689b      	ldr	r3, [r3, #8]
 8002462:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002466:	431a      	orrs	r2, r3
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	691b      	ldr	r3, [r3, #16]
 800246c:	f003 0302 	and.w	r3, r3, #2
 8002470:	431a      	orrs	r2, r3
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	695b      	ldr	r3, [r3, #20]
 8002476:	f003 0301 	and.w	r3, r3, #1
 800247a:	431a      	orrs	r2, r3
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	699b      	ldr	r3, [r3, #24]
 8002480:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002484:	431a      	orrs	r2, r3
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	69db      	ldr	r3, [r3, #28]
 800248a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800248e:	431a      	orrs	r2, r3
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6a1b      	ldr	r3, [r3, #32]
 8002494:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002498:	ea42 0103 	orr.w	r1, r2, r3
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024a0:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	430a      	orrs	r2, r1
 80024aa:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	699b      	ldr	r3, [r3, #24]
 80024b0:	0c1b      	lsrs	r3, r3, #16
 80024b2:	f003 0204 	and.w	r2, r3, #4
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024ba:	f003 0310 	and.w	r3, r3, #16
 80024be:	431a      	orrs	r2, r3
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80024c4:	f003 0308 	and.w	r3, r3, #8
 80024c8:	431a      	orrs	r2, r3
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	68db      	ldr	r3, [r3, #12]
 80024ce:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80024d2:	ea42 0103 	orr.w	r1, r2, r3
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	430a      	orrs	r2, r1
 80024e2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	69da      	ldr	r2, [r3, #28]
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80024f2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2200      	movs	r2, #0
 80024f8:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2201      	movs	r2, #1
 80024fe:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8002502:	2300      	movs	r3, #0
}
 8002504:	4618      	mov	r0, r3
 8002506:	3710      	adds	r7, #16
 8002508:	46bd      	mov	sp, r7
 800250a:	bd80      	pop	{r7, pc}

0800250c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b088      	sub	sp, #32
 8002510:	af00      	add	r7, sp, #0
 8002512:	60f8      	str	r0, [r7, #12]
 8002514:	60b9      	str	r1, [r7, #8]
 8002516:	603b      	str	r3, [r7, #0]
 8002518:	4613      	mov	r3, r2
 800251a:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800251c:	f7fe fb32 	bl	8000b84 <HAL_GetTick>
 8002520:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8002522:	88fb      	ldrh	r3, [r7, #6]
 8002524:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800252c:	b2db      	uxtb	r3, r3
 800252e:	2b01      	cmp	r3, #1
 8002530:	d001      	beq.n	8002536 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8002532:	2302      	movs	r3, #2
 8002534:	e15c      	b.n	80027f0 <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8002536:	68bb      	ldr	r3, [r7, #8]
 8002538:	2b00      	cmp	r3, #0
 800253a:	d002      	beq.n	8002542 <HAL_SPI_Transmit+0x36>
 800253c:	88fb      	ldrh	r3, [r7, #6]
 800253e:	2b00      	cmp	r3, #0
 8002540:	d101      	bne.n	8002546 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8002542:	2301      	movs	r3, #1
 8002544:	e154      	b.n	80027f0 <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800254c:	2b01      	cmp	r3, #1
 800254e:	d101      	bne.n	8002554 <HAL_SPI_Transmit+0x48>
 8002550:	2302      	movs	r3, #2
 8002552:	e14d      	b.n	80027f0 <HAL_SPI_Transmit+0x2e4>
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	2201      	movs	r2, #1
 8002558:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	2203      	movs	r2, #3
 8002560:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	2200      	movs	r2, #0
 8002568:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	68ba      	ldr	r2, [r7, #8]
 800256e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	88fa      	ldrh	r2, [r7, #6]
 8002574:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	88fa      	ldrh	r2, [r7, #6]
 800257a:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	2200      	movs	r2, #0
 8002580:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	2200      	movs	r2, #0
 8002586:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	2200      	movs	r2, #0
 800258e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	2200      	movs	r2, #0
 8002596:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	2200      	movs	r2, #0
 800259c:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	689b      	ldr	r3, [r3, #8]
 80025a2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80025a6:	d10f      	bne.n	80025c8 <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	681a      	ldr	r2, [r3, #0]
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80025b6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	681a      	ldr	r2, [r3, #0]
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80025c6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80025d2:	2b40      	cmp	r3, #64	@ 0x40
 80025d4:	d007      	beq.n	80025e6 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	681a      	ldr	r2, [r3, #0]
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80025e4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	68db      	ldr	r3, [r3, #12]
 80025ea:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80025ee:	d952      	bls.n	8002696 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d002      	beq.n	80025fe <HAL_SPI_Transmit+0xf2>
 80025f8:	8b7b      	ldrh	r3, [r7, #26]
 80025fa:	2b01      	cmp	r3, #1
 80025fc:	d145      	bne.n	800268a <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002602:	881a      	ldrh	r2, [r3, #0]
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800260e:	1c9a      	adds	r2, r3, #2
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002618:	b29b      	uxth	r3, r3
 800261a:	3b01      	subs	r3, #1
 800261c:	b29a      	uxth	r2, r3
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002622:	e032      	b.n	800268a <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	689b      	ldr	r3, [r3, #8]
 800262a:	f003 0302 	and.w	r3, r3, #2
 800262e:	2b02      	cmp	r3, #2
 8002630:	d112      	bne.n	8002658 <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002636:	881a      	ldrh	r2, [r3, #0]
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002642:	1c9a      	adds	r2, r3, #2
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800264c:	b29b      	uxth	r3, r3
 800264e:	3b01      	subs	r3, #1
 8002650:	b29a      	uxth	r2, r3
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002656:	e018      	b.n	800268a <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002658:	f7fe fa94 	bl	8000b84 <HAL_GetTick>
 800265c:	4602      	mov	r2, r0
 800265e:	69fb      	ldr	r3, [r7, #28]
 8002660:	1ad3      	subs	r3, r2, r3
 8002662:	683a      	ldr	r2, [r7, #0]
 8002664:	429a      	cmp	r2, r3
 8002666:	d803      	bhi.n	8002670 <HAL_SPI_Transmit+0x164>
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800266e:	d102      	bne.n	8002676 <HAL_SPI_Transmit+0x16a>
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d109      	bne.n	800268a <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	2201      	movs	r2, #1
 800267a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	2200      	movs	r2, #0
 8002682:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8002686:	2303      	movs	r3, #3
 8002688:	e0b2      	b.n	80027f0 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800268e:	b29b      	uxth	r3, r3
 8002690:	2b00      	cmp	r3, #0
 8002692:	d1c7      	bne.n	8002624 <HAL_SPI_Transmit+0x118>
 8002694:	e083      	b.n	800279e <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d002      	beq.n	80026a4 <HAL_SPI_Transmit+0x198>
 800269e:	8b7b      	ldrh	r3, [r7, #26]
 80026a0:	2b01      	cmp	r3, #1
 80026a2:	d177      	bne.n	8002794 <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80026a8:	b29b      	uxth	r3, r3
 80026aa:	2b01      	cmp	r3, #1
 80026ac:	d912      	bls.n	80026d4 <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026b2:	881a      	ldrh	r2, [r3, #0]
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026be:	1c9a      	adds	r2, r3, #2
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80026c8:	b29b      	uxth	r3, r3
 80026ca:	3b02      	subs	r3, #2
 80026cc:	b29a      	uxth	r2, r3
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80026d2:	e05f      	b.n	8002794 <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	330c      	adds	r3, #12
 80026de:	7812      	ldrb	r2, [r2, #0]
 80026e0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026e6:	1c5a      	adds	r2, r3, #1
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80026f0:	b29b      	uxth	r3, r3
 80026f2:	3b01      	subs	r3, #1
 80026f4:	b29a      	uxth	r2, r3
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80026fa:	e04b      	b.n	8002794 <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	689b      	ldr	r3, [r3, #8]
 8002702:	f003 0302 	and.w	r3, r3, #2
 8002706:	2b02      	cmp	r3, #2
 8002708:	d12b      	bne.n	8002762 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800270e:	b29b      	uxth	r3, r3
 8002710:	2b01      	cmp	r3, #1
 8002712:	d912      	bls.n	800273a <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002718:	881a      	ldrh	r2, [r3, #0]
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002724:	1c9a      	adds	r2, r3, #2
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800272e:	b29b      	uxth	r3, r3
 8002730:	3b02      	subs	r3, #2
 8002732:	b29a      	uxth	r2, r3
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002738:	e02c      	b.n	8002794 <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	330c      	adds	r3, #12
 8002744:	7812      	ldrb	r2, [r2, #0]
 8002746:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800274c:	1c5a      	adds	r2, r3, #1
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002756:	b29b      	uxth	r3, r3
 8002758:	3b01      	subs	r3, #1
 800275a:	b29a      	uxth	r2, r3
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002760:	e018      	b.n	8002794 <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002762:	f7fe fa0f 	bl	8000b84 <HAL_GetTick>
 8002766:	4602      	mov	r2, r0
 8002768:	69fb      	ldr	r3, [r7, #28]
 800276a:	1ad3      	subs	r3, r2, r3
 800276c:	683a      	ldr	r2, [r7, #0]
 800276e:	429a      	cmp	r2, r3
 8002770:	d803      	bhi.n	800277a <HAL_SPI_Transmit+0x26e>
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002778:	d102      	bne.n	8002780 <HAL_SPI_Transmit+0x274>
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	2b00      	cmp	r3, #0
 800277e:	d109      	bne.n	8002794 <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	2201      	movs	r2, #1
 8002784:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	2200      	movs	r2, #0
 800278c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8002790:	2303      	movs	r3, #3
 8002792:	e02d      	b.n	80027f0 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002798:	b29b      	uxth	r3, r3
 800279a:	2b00      	cmp	r3, #0
 800279c:	d1ae      	bne.n	80026fc <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800279e:	69fa      	ldr	r2, [r7, #28]
 80027a0:	6839      	ldr	r1, [r7, #0]
 80027a2:	68f8      	ldr	r0, [r7, #12]
 80027a4:	f000 fe16 	bl	80033d4 <SPI_EndRxTxTransaction>
 80027a8:	4603      	mov	r3, r0
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d002      	beq.n	80027b4 <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	2220      	movs	r2, #32
 80027b2:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	689b      	ldr	r3, [r3, #8]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d10a      	bne.n	80027d2 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80027bc:	2300      	movs	r3, #0
 80027be:	617b      	str	r3, [r7, #20]
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	68db      	ldr	r3, [r3, #12]
 80027c6:	617b      	str	r3, [r7, #20]
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	689b      	ldr	r3, [r3, #8]
 80027ce:	617b      	str	r3, [r7, #20]
 80027d0:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	2201      	movs	r2, #1
 80027d6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	2200      	movs	r2, #0
 80027de:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d001      	beq.n	80027ee <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 80027ea:	2301      	movs	r3, #1
 80027ec:	e000      	b.n	80027f0 <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 80027ee:	2300      	movs	r3, #0
  }
}
 80027f0:	4618      	mov	r0, r3
 80027f2:	3720      	adds	r7, #32
 80027f4:	46bd      	mov	sp, r7
 80027f6:	bd80      	pop	{r7, pc}

080027f8 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b088      	sub	sp, #32
 80027fc:	af02      	add	r7, sp, #8
 80027fe:	60f8      	str	r0, [r7, #12]
 8002800:	60b9      	str	r1, [r7, #8]
 8002802:	603b      	str	r3, [r7, #0]
 8002804:	4613      	mov	r3, r2
 8002806:	80fb      	strh	r3, [r7, #6]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800280e:	b2db      	uxtb	r3, r3
 8002810:	2b01      	cmp	r3, #1
 8002812:	d001      	beq.n	8002818 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8002814:	2302      	movs	r3, #2
 8002816:	e123      	b.n	8002a60 <HAL_SPI_Receive+0x268>
  }

  if ((pData == NULL) || (Size == 0U))
 8002818:	68bb      	ldr	r3, [r7, #8]
 800281a:	2b00      	cmp	r3, #0
 800281c:	d002      	beq.n	8002824 <HAL_SPI_Receive+0x2c>
 800281e:	88fb      	ldrh	r3, [r7, #6]
 8002820:	2b00      	cmp	r3, #0
 8002822:	d101      	bne.n	8002828 <HAL_SPI_Receive+0x30>
  {
    return HAL_ERROR;
 8002824:	2301      	movs	r3, #1
 8002826:	e11b      	b.n	8002a60 <HAL_SPI_Receive+0x268>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002830:	d112      	bne.n	8002858 <HAL_SPI_Receive+0x60>
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	689b      	ldr	r3, [r3, #8]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d10e      	bne.n	8002858 <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	2204      	movs	r2, #4
 800283e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002842:	88fa      	ldrh	r2, [r7, #6]
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	9300      	str	r3, [sp, #0]
 8002848:	4613      	mov	r3, r2
 800284a:	68ba      	ldr	r2, [r7, #8]
 800284c:	68b9      	ldr	r1, [r7, #8]
 800284e:	68f8      	ldr	r0, [r7, #12]
 8002850:	f000 f90a 	bl	8002a68 <HAL_SPI_TransmitReceive>
 8002854:	4603      	mov	r3, r0
 8002856:	e103      	b.n	8002a60 <HAL_SPI_Receive+0x268>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002858:	f7fe f994 	bl	8000b84 <HAL_GetTick>
 800285c:	6178      	str	r0, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hspi);
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002864:	2b01      	cmp	r3, #1
 8002866:	d101      	bne.n	800286c <HAL_SPI_Receive+0x74>
 8002868:	2302      	movs	r3, #2
 800286a:	e0f9      	b.n	8002a60 <HAL_SPI_Receive+0x268>
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	2201      	movs	r2, #1
 8002870:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	2204      	movs	r2, #4
 8002878:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	2200      	movs	r2, #0
 8002880:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	68ba      	ldr	r2, [r7, #8]
 8002886:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	88fa      	ldrh	r2, [r7, #6]
 800288c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	88fa      	ldrh	r2, [r7, #6]
 8002894:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	2200      	movs	r2, #0
 800289c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	2200      	movs	r2, #0
 80028a2:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	2200      	movs	r2, #0
 80028a8:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	2200      	movs	r2, #0
 80028ae:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	2200      	movs	r2, #0
 80028b4:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	68db      	ldr	r3, [r3, #12]
 80028ba:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80028be:	d908      	bls.n	80028d2 <HAL_SPI_Receive+0xda>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	685a      	ldr	r2, [r3, #4]
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80028ce:	605a      	str	r2, [r3, #4]
 80028d0:	e007      	b.n	80028e2 <HAL_SPI_Receive+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	685a      	ldr	r2, [r3, #4]
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80028e0:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	689b      	ldr	r3, [r3, #8]
 80028e6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80028ea:	d10f      	bne.n	800290c <HAL_SPI_Receive+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	681a      	ldr	r2, [r3, #0]
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80028fa:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	681a      	ldr	r2, [r3, #0]
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800290a:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002916:	2b40      	cmp	r3, #64	@ 0x40
 8002918:	d007      	beq.n	800292a <HAL_SPI_Receive+0x132>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	681a      	ldr	r2, [r3, #0]
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002928:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	68db      	ldr	r3, [r3, #12]
 800292e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002932:	d875      	bhi.n	8002a20 <HAL_SPI_Receive+0x228>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002934:	e037      	b.n	80029a6 <HAL_SPI_Receive+0x1ae>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	689b      	ldr	r3, [r3, #8]
 800293c:	f003 0301 	and.w	r3, r3, #1
 8002940:	2b01      	cmp	r3, #1
 8002942:	d117      	bne.n	8002974 <HAL_SPI_Receive+0x17c>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f103 020c 	add.w	r2, r3, #12
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002950:	7812      	ldrb	r2, [r2, #0]
 8002952:	b2d2      	uxtb	r2, r2
 8002954:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800295a:	1c5a      	adds	r2, r3, #1
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002966:	b29b      	uxth	r3, r3
 8002968:	3b01      	subs	r3, #1
 800296a:	b29a      	uxth	r2, r3
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8002972:	e018      	b.n	80029a6 <HAL_SPI_Receive+0x1ae>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002974:	f7fe f906 	bl	8000b84 <HAL_GetTick>
 8002978:	4602      	mov	r2, r0
 800297a:	697b      	ldr	r3, [r7, #20]
 800297c:	1ad3      	subs	r3, r2, r3
 800297e:	683a      	ldr	r2, [r7, #0]
 8002980:	429a      	cmp	r2, r3
 8002982:	d803      	bhi.n	800298c <HAL_SPI_Receive+0x194>
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	f1b3 3fff 	cmp.w	r3, #4294967295
 800298a:	d102      	bne.n	8002992 <HAL_SPI_Receive+0x19a>
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d109      	bne.n	80029a6 <HAL_SPI_Receive+0x1ae>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	2201      	movs	r2, #1
 8002996:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	2200      	movs	r2, #0
 800299e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 80029a2:	2303      	movs	r3, #3
 80029a4:	e05c      	b.n	8002a60 <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80029ac:	b29b      	uxth	r3, r3
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d1c1      	bne.n	8002936 <HAL_SPI_Receive+0x13e>
 80029b2:	e03b      	b.n	8002a2c <HAL_SPI_Receive+0x234>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	689b      	ldr	r3, [r3, #8]
 80029ba:	f003 0301 	and.w	r3, r3, #1
 80029be:	2b01      	cmp	r3, #1
 80029c0:	d115      	bne.n	80029ee <HAL_SPI_Receive+0x1f6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	68da      	ldr	r2, [r3, #12]
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029cc:	b292      	uxth	r2, r2
 80029ce:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029d4:	1c9a      	adds	r2, r3, #2
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80029e0:	b29b      	uxth	r3, r3
 80029e2:	3b01      	subs	r3, #1
 80029e4:	b29a      	uxth	r2, r3
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 80029ec:	e018      	b.n	8002a20 <HAL_SPI_Receive+0x228>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80029ee:	f7fe f8c9 	bl	8000b84 <HAL_GetTick>
 80029f2:	4602      	mov	r2, r0
 80029f4:	697b      	ldr	r3, [r7, #20]
 80029f6:	1ad3      	subs	r3, r2, r3
 80029f8:	683a      	ldr	r2, [r7, #0]
 80029fa:	429a      	cmp	r2, r3
 80029fc:	d803      	bhi.n	8002a06 <HAL_SPI_Receive+0x20e>
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a04:	d102      	bne.n	8002a0c <HAL_SPI_Receive+0x214>
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d109      	bne.n	8002a20 <HAL_SPI_Receive+0x228>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	2201      	movs	r2, #1
 8002a10:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	2200      	movs	r2, #0
 8002a18:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8002a1c:	2303      	movs	r3, #3
 8002a1e:	e01f      	b.n	8002a60 <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002a26:	b29b      	uxth	r3, r3
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d1c3      	bne.n	80029b4 <HAL_SPI_Receive+0x1bc>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002a2c:	697a      	ldr	r2, [r7, #20]
 8002a2e:	6839      	ldr	r1, [r7, #0]
 8002a30:	68f8      	ldr	r0, [r7, #12]
 8002a32:	f000 fc77 	bl	8003324 <SPI_EndRxTransaction>
 8002a36:	4603      	mov	r3, r0
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d002      	beq.n	8002a42 <HAL_SPI_Receive+0x24a>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	2220      	movs	r2, #32
 8002a40:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	2201      	movs	r2, #1
 8002a46:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d001      	beq.n	8002a5e <HAL_SPI_Receive+0x266>
  {
    return HAL_ERROR;
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	e000      	b.n	8002a60 <HAL_SPI_Receive+0x268>
  }
  else
  {
    return HAL_OK;
 8002a5e:	2300      	movs	r3, #0
  }
}
 8002a60:	4618      	mov	r0, r3
 8002a62:	3718      	adds	r7, #24
 8002a64:	46bd      	mov	sp, r7
 8002a66:	bd80      	pop	{r7, pc}

08002a68 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b08a      	sub	sp, #40	@ 0x28
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	60f8      	str	r0, [r7, #12]
 8002a70:	60b9      	str	r1, [r7, #8]
 8002a72:	607a      	str	r2, [r7, #4]
 8002a74:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002a76:	2301      	movs	r3, #1
 8002a78:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002a7a:	f7fe f883 	bl	8000b84 <HAL_GetTick>
 8002a7e:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002a86:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8002a8e:	887b      	ldrh	r3, [r7, #2]
 8002a90:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 8002a92:	887b      	ldrh	r3, [r7, #2]
 8002a94:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002a96:	7ffb      	ldrb	r3, [r7, #31]
 8002a98:	2b01      	cmp	r3, #1
 8002a9a:	d00c      	beq.n	8002ab6 <HAL_SPI_TransmitReceive+0x4e>
 8002a9c:	69bb      	ldr	r3, [r7, #24]
 8002a9e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002aa2:	d106      	bne.n	8002ab2 <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	689b      	ldr	r3, [r3, #8]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d102      	bne.n	8002ab2 <HAL_SPI_TransmitReceive+0x4a>
 8002aac:	7ffb      	ldrb	r3, [r7, #31]
 8002aae:	2b04      	cmp	r3, #4
 8002ab0:	d001      	beq.n	8002ab6 <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8002ab2:	2302      	movs	r3, #2
 8002ab4:	e1f3      	b.n	8002e9e <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002ab6:	68bb      	ldr	r3, [r7, #8]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d005      	beq.n	8002ac8 <HAL_SPI_TransmitReceive+0x60>
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d002      	beq.n	8002ac8 <HAL_SPI_TransmitReceive+0x60>
 8002ac2:	887b      	ldrh	r3, [r7, #2]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d101      	bne.n	8002acc <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 8002ac8:	2301      	movs	r3, #1
 8002aca:	e1e8      	b.n	8002e9e <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002ad2:	2b01      	cmp	r3, #1
 8002ad4:	d101      	bne.n	8002ada <HAL_SPI_TransmitReceive+0x72>
 8002ad6:	2302      	movs	r3, #2
 8002ad8:	e1e1      	b.n	8002e9e <HAL_SPI_TransmitReceive+0x436>
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	2201      	movs	r2, #1
 8002ade:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002ae8:	b2db      	uxtb	r3, r3
 8002aea:	2b04      	cmp	r3, #4
 8002aec:	d003      	beq.n	8002af6 <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	2205      	movs	r2, #5
 8002af2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	2200      	movs	r2, #0
 8002afa:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	687a      	ldr	r2, [r7, #4]
 8002b00:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	887a      	ldrh	r2, [r7, #2]
 8002b06:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	887a      	ldrh	r2, [r7, #2]
 8002b0e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	68ba      	ldr	r2, [r7, #8]
 8002b16:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	887a      	ldrh	r2, [r7, #2]
 8002b1c:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	887a      	ldrh	r2, [r7, #2]
 8002b22:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	2200      	movs	r2, #0
 8002b28:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	68db      	ldr	r3, [r3, #12]
 8002b34:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002b38:	d802      	bhi.n	8002b40 <HAL_SPI_TransmitReceive+0xd8>
 8002b3a:	8abb      	ldrh	r3, [r7, #20]
 8002b3c:	2b01      	cmp	r3, #1
 8002b3e:	d908      	bls.n	8002b52 <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	685a      	ldr	r2, [r3, #4]
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002b4e:	605a      	str	r2, [r3, #4]
 8002b50:	e007      	b.n	8002b62 <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	685a      	ldr	r2, [r3, #4]
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002b60:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b6c:	2b40      	cmp	r3, #64	@ 0x40
 8002b6e:	d007      	beq.n	8002b80 <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	681a      	ldr	r2, [r3, #0]
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002b7e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	68db      	ldr	r3, [r3, #12]
 8002b84:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002b88:	f240 8083 	bls.w	8002c92 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d002      	beq.n	8002b9a <HAL_SPI_TransmitReceive+0x132>
 8002b94:	8afb      	ldrh	r3, [r7, #22]
 8002b96:	2b01      	cmp	r3, #1
 8002b98:	d16f      	bne.n	8002c7a <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b9e:	881a      	ldrh	r2, [r3, #0]
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002baa:	1c9a      	adds	r2, r3, #2
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002bb4:	b29b      	uxth	r3, r3
 8002bb6:	3b01      	subs	r3, #1
 8002bb8:	b29a      	uxth	r2, r3
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002bbe:	e05c      	b.n	8002c7a <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	689b      	ldr	r3, [r3, #8]
 8002bc6:	f003 0302 	and.w	r3, r3, #2
 8002bca:	2b02      	cmp	r3, #2
 8002bcc:	d11b      	bne.n	8002c06 <HAL_SPI_TransmitReceive+0x19e>
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002bd2:	b29b      	uxth	r3, r3
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d016      	beq.n	8002c06 <HAL_SPI_TransmitReceive+0x19e>
 8002bd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bda:	2b01      	cmp	r3, #1
 8002bdc:	d113      	bne.n	8002c06 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002be2:	881a      	ldrh	r2, [r3, #0]
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bee:	1c9a      	adds	r2, r3, #2
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002bf8:	b29b      	uxth	r3, r3
 8002bfa:	3b01      	subs	r3, #1
 8002bfc:	b29a      	uxth	r2, r3
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002c02:	2300      	movs	r3, #0
 8002c04:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	689b      	ldr	r3, [r3, #8]
 8002c0c:	f003 0301 	and.w	r3, r3, #1
 8002c10:	2b01      	cmp	r3, #1
 8002c12:	d11c      	bne.n	8002c4e <HAL_SPI_TransmitReceive+0x1e6>
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002c1a:	b29b      	uxth	r3, r3
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d016      	beq.n	8002c4e <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	68da      	ldr	r2, [r3, #12]
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c2a:	b292      	uxth	r2, r2
 8002c2c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c32:	1c9a      	adds	r2, r3, #2
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002c3e:	b29b      	uxth	r3, r3
 8002c40:	3b01      	subs	r3, #1
 8002c42:	b29a      	uxth	r2, r3
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002c4e:	f7fd ff99 	bl	8000b84 <HAL_GetTick>
 8002c52:	4602      	mov	r2, r0
 8002c54:	6a3b      	ldr	r3, [r7, #32]
 8002c56:	1ad3      	subs	r3, r2, r3
 8002c58:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002c5a:	429a      	cmp	r2, r3
 8002c5c:	d80d      	bhi.n	8002c7a <HAL_SPI_TransmitReceive+0x212>
 8002c5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c64:	d009      	beq.n	8002c7a <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	2201      	movs	r2, #1
 8002c6a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	2200      	movs	r2, #0
 8002c72:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8002c76:	2303      	movs	r3, #3
 8002c78:	e111      	b.n	8002e9e <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002c7e:	b29b      	uxth	r3, r3
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d19d      	bne.n	8002bc0 <HAL_SPI_TransmitReceive+0x158>
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002c8a:	b29b      	uxth	r3, r3
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d197      	bne.n	8002bc0 <HAL_SPI_TransmitReceive+0x158>
 8002c90:	e0e5      	b.n	8002e5e <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	685b      	ldr	r3, [r3, #4]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d003      	beq.n	8002ca2 <HAL_SPI_TransmitReceive+0x23a>
 8002c9a:	8afb      	ldrh	r3, [r7, #22]
 8002c9c:	2b01      	cmp	r3, #1
 8002c9e:	f040 80d1 	bne.w	8002e44 <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002ca6:	b29b      	uxth	r3, r3
 8002ca8:	2b01      	cmp	r3, #1
 8002caa:	d912      	bls.n	8002cd2 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002cb0:	881a      	ldrh	r2, [r3, #0]
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002cbc:	1c9a      	adds	r2, r3, #2
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002cc6:	b29b      	uxth	r3, r3
 8002cc8:	3b02      	subs	r3, #2
 8002cca:	b29a      	uxth	r2, r3
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002cd0:	e0b8      	b.n	8002e44 <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	330c      	adds	r3, #12
 8002cdc:	7812      	ldrb	r2, [r2, #0]
 8002cde:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ce4:	1c5a      	adds	r2, r3, #1
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002cee:	b29b      	uxth	r3, r3
 8002cf0:	3b01      	subs	r3, #1
 8002cf2:	b29a      	uxth	r2, r3
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002cf8:	e0a4      	b.n	8002e44 <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	689b      	ldr	r3, [r3, #8]
 8002d00:	f003 0302 	and.w	r3, r3, #2
 8002d04:	2b02      	cmp	r3, #2
 8002d06:	d134      	bne.n	8002d72 <HAL_SPI_TransmitReceive+0x30a>
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002d0c:	b29b      	uxth	r3, r3
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d02f      	beq.n	8002d72 <HAL_SPI_TransmitReceive+0x30a>
 8002d12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d14:	2b01      	cmp	r3, #1
 8002d16:	d12c      	bne.n	8002d72 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002d1c:	b29b      	uxth	r3, r3
 8002d1e:	2b01      	cmp	r3, #1
 8002d20:	d912      	bls.n	8002d48 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d26:	881a      	ldrh	r2, [r3, #0]
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d32:	1c9a      	adds	r2, r3, #2
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002d3c:	b29b      	uxth	r3, r3
 8002d3e:	3b02      	subs	r3, #2
 8002d40:	b29a      	uxth	r2, r3
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002d46:	e012      	b.n	8002d6e <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	330c      	adds	r3, #12
 8002d52:	7812      	ldrb	r2, [r2, #0]
 8002d54:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d5a:	1c5a      	adds	r2, r3, #1
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002d64:	b29b      	uxth	r3, r3
 8002d66:	3b01      	subs	r3, #1
 8002d68:	b29a      	uxth	r2, r3
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002d6e:	2300      	movs	r3, #0
 8002d70:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	689b      	ldr	r3, [r3, #8]
 8002d78:	f003 0301 	and.w	r3, r3, #1
 8002d7c:	2b01      	cmp	r3, #1
 8002d7e:	d148      	bne.n	8002e12 <HAL_SPI_TransmitReceive+0x3aa>
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002d86:	b29b      	uxth	r3, r3
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d042      	beq.n	8002e12 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002d92:	b29b      	uxth	r3, r3
 8002d94:	2b01      	cmp	r3, #1
 8002d96:	d923      	bls.n	8002de0 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	68da      	ldr	r2, [r3, #12]
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002da2:	b292      	uxth	r2, r2
 8002da4:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002daa:	1c9a      	adds	r2, r3, #2
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002db6:	b29b      	uxth	r3, r3
 8002db8:	3b02      	subs	r3, #2
 8002dba:	b29a      	uxth	r2, r3
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002dc8:	b29b      	uxth	r3, r3
 8002dca:	2b01      	cmp	r3, #1
 8002dcc:	d81f      	bhi.n	8002e0e <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	685a      	ldr	r2, [r3, #4]
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002ddc:	605a      	str	r2, [r3, #4]
 8002dde:	e016      	b.n	8002e0e <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f103 020c 	add.w	r2, r3, #12
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dec:	7812      	ldrb	r2, [r2, #0]
 8002dee:	b2d2      	uxtb	r2, r2
 8002df0:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002df6:	1c5a      	adds	r2, r3, #1
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002e02:	b29b      	uxth	r3, r3
 8002e04:	3b01      	subs	r3, #1
 8002e06:	b29a      	uxth	r2, r3
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002e0e:	2301      	movs	r3, #1
 8002e10:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002e12:	f7fd feb7 	bl	8000b84 <HAL_GetTick>
 8002e16:	4602      	mov	r2, r0
 8002e18:	6a3b      	ldr	r3, [r7, #32]
 8002e1a:	1ad3      	subs	r3, r2, r3
 8002e1c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002e1e:	429a      	cmp	r2, r3
 8002e20:	d803      	bhi.n	8002e2a <HAL_SPI_TransmitReceive+0x3c2>
 8002e22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e28:	d102      	bne.n	8002e30 <HAL_SPI_TransmitReceive+0x3c8>
 8002e2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d109      	bne.n	8002e44 <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	2201      	movs	r2, #1
 8002e34:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8002e40:	2303      	movs	r3, #3
 8002e42:	e02c      	b.n	8002e9e <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002e48:	b29b      	uxth	r3, r3
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	f47f af55 	bne.w	8002cfa <HAL_SPI_TransmitReceive+0x292>
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002e56:	b29b      	uxth	r3, r3
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	f47f af4e 	bne.w	8002cfa <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002e5e:	6a3a      	ldr	r2, [r7, #32]
 8002e60:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002e62:	68f8      	ldr	r0, [r7, #12]
 8002e64:	f000 fab6 	bl	80033d4 <SPI_EndRxTxTransaction>
 8002e68:	4603      	mov	r3, r0
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d008      	beq.n	8002e80 <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	2220      	movs	r2, #32
 8002e72:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	2200      	movs	r2, #0
 8002e78:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8002e7c:	2301      	movs	r3, #1
 8002e7e:	e00e      	b.n	8002e9e <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	2201      	movs	r2, #1
 8002e84:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d001      	beq.n	8002e9c <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 8002e98:	2301      	movs	r3, #1
 8002e9a:	e000      	b.n	8002e9e <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 8002e9c:	2300      	movs	r3, #0
  }
}
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	3728      	adds	r7, #40	@ 0x28
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bd80      	pop	{r7, pc}
	...

08002ea8 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b088      	sub	sp, #32
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	689b      	ldr	r3, [r3, #8]
 8002ebe:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002ec0:	69bb      	ldr	r3, [r7, #24]
 8002ec2:	099b      	lsrs	r3, r3, #6
 8002ec4:	f003 0301 	and.w	r3, r3, #1
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d10f      	bne.n	8002eec <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002ecc:	69bb      	ldr	r3, [r7, #24]
 8002ece:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d00a      	beq.n	8002eec <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002ed6:	69fb      	ldr	r3, [r7, #28]
 8002ed8:	099b      	lsrs	r3, r3, #6
 8002eda:	f003 0301 	and.w	r3, r3, #1
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d004      	beq.n	8002eec <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ee6:	6878      	ldr	r0, [r7, #4]
 8002ee8:	4798      	blx	r3
    return;
 8002eea:	e0d7      	b.n	800309c <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8002eec:	69bb      	ldr	r3, [r7, #24]
 8002eee:	085b      	lsrs	r3, r3, #1
 8002ef0:	f003 0301 	and.w	r3, r3, #1
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d00a      	beq.n	8002f0e <HAL_SPI_IRQHandler+0x66>
 8002ef8:	69fb      	ldr	r3, [r7, #28]
 8002efa:	09db      	lsrs	r3, r3, #7
 8002efc:	f003 0301 	and.w	r3, r3, #1
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d004      	beq.n	8002f0e <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002f08:	6878      	ldr	r0, [r7, #4]
 8002f0a:	4798      	blx	r3
    return;
 8002f0c:	e0c6      	b.n	800309c <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8002f0e:	69bb      	ldr	r3, [r7, #24]
 8002f10:	095b      	lsrs	r3, r3, #5
 8002f12:	f003 0301 	and.w	r3, r3, #1
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d10c      	bne.n	8002f34 <HAL_SPI_IRQHandler+0x8c>
 8002f1a:	69bb      	ldr	r3, [r7, #24]
 8002f1c:	099b      	lsrs	r3, r3, #6
 8002f1e:	f003 0301 	and.w	r3, r3, #1
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d106      	bne.n	8002f34 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8002f26:	69bb      	ldr	r3, [r7, #24]
 8002f28:	0a1b      	lsrs	r3, r3, #8
 8002f2a:	f003 0301 	and.w	r3, r3, #1
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	f000 80b4 	beq.w	800309c <HAL_SPI_IRQHandler+0x1f4>
 8002f34:	69fb      	ldr	r3, [r7, #28]
 8002f36:	095b      	lsrs	r3, r3, #5
 8002f38:	f003 0301 	and.w	r3, r3, #1
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	f000 80ad 	beq.w	800309c <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8002f42:	69bb      	ldr	r3, [r7, #24]
 8002f44:	099b      	lsrs	r3, r3, #6
 8002f46:	f003 0301 	and.w	r3, r3, #1
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d023      	beq.n	8002f96 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002f54:	b2db      	uxtb	r3, r3
 8002f56:	2b03      	cmp	r3, #3
 8002f58:	d011      	beq.n	8002f7e <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f5e:	f043 0204 	orr.w	r2, r3, #4
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002f66:	2300      	movs	r3, #0
 8002f68:	617b      	str	r3, [r7, #20]
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	68db      	ldr	r3, [r3, #12]
 8002f70:	617b      	str	r3, [r7, #20]
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	689b      	ldr	r3, [r3, #8]
 8002f78:	617b      	str	r3, [r7, #20]
 8002f7a:	697b      	ldr	r3, [r7, #20]
 8002f7c:	e00b      	b.n	8002f96 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002f7e:	2300      	movs	r3, #0
 8002f80:	613b      	str	r3, [r7, #16]
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	68db      	ldr	r3, [r3, #12]
 8002f88:	613b      	str	r3, [r7, #16]
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	689b      	ldr	r3, [r3, #8]
 8002f90:	613b      	str	r3, [r7, #16]
 8002f92:	693b      	ldr	r3, [r7, #16]
        return;
 8002f94:	e082      	b.n	800309c <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8002f96:	69bb      	ldr	r3, [r7, #24]
 8002f98:	095b      	lsrs	r3, r3, #5
 8002f9a:	f003 0301 	and.w	r3, r3, #1
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d014      	beq.n	8002fcc <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002fa6:	f043 0201 	orr.w	r2, r3, #1
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8002fae:	2300      	movs	r3, #0
 8002fb0:	60fb      	str	r3, [r7, #12]
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	689b      	ldr	r3, [r3, #8]
 8002fb8:	60fb      	str	r3, [r7, #12]
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	681a      	ldr	r2, [r3, #0]
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002fc8:	601a      	str	r2, [r3, #0]
 8002fca:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8002fcc:	69bb      	ldr	r3, [r7, #24]
 8002fce:	0a1b      	lsrs	r3, r3, #8
 8002fd0:	f003 0301 	and.w	r3, r3, #1
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d00c      	beq.n	8002ff2 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002fdc:	f043 0208 	orr.w	r2, r3, #8
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	60bb      	str	r3, [r7, #8]
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	689b      	ldr	r3, [r3, #8]
 8002fee:	60bb      	str	r3, [r7, #8]
 8002ff0:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d04f      	beq.n	800309a <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	685a      	ldr	r2, [r3, #4]
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003008:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	2201      	movs	r2, #1
 800300e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8003012:	69fb      	ldr	r3, [r7, #28]
 8003014:	f003 0302 	and.w	r3, r3, #2
 8003018:	2b00      	cmp	r3, #0
 800301a:	d104      	bne.n	8003026 <HAL_SPI_IRQHandler+0x17e>
 800301c:	69fb      	ldr	r3, [r7, #28]
 800301e:	f003 0301 	and.w	r3, r3, #1
 8003022:	2b00      	cmp	r3, #0
 8003024:	d034      	beq.n	8003090 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	685a      	ldr	r2, [r3, #4]
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f022 0203 	bic.w	r2, r2, #3
 8003034:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800303a:	2b00      	cmp	r3, #0
 800303c:	d011      	beq.n	8003062 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003042:	4a18      	ldr	r2, [pc, #96]	@ (80030a4 <HAL_SPI_IRQHandler+0x1fc>)
 8003044:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800304a:	4618      	mov	r0, r3
 800304c:	f7fd ffca 	bl	8000fe4 <HAL_DMA_Abort_IT>
 8003050:	4603      	mov	r3, r0
 8003052:	2b00      	cmp	r3, #0
 8003054:	d005      	beq.n	8003062 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800305a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003066:	2b00      	cmp	r3, #0
 8003068:	d016      	beq.n	8003098 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800306e:	4a0d      	ldr	r2, [pc, #52]	@ (80030a4 <HAL_SPI_IRQHandler+0x1fc>)
 8003070:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003076:	4618      	mov	r0, r3
 8003078:	f7fd ffb4 	bl	8000fe4 <HAL_DMA_Abort_IT>
 800307c:	4603      	mov	r3, r0
 800307e:	2b00      	cmp	r3, #0
 8003080:	d00a      	beq.n	8003098 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003086:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 800308e:	e003      	b.n	8003098 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8003090:	6878      	ldr	r0, [r7, #4]
 8003092:	f000 f809 	bl	80030a8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8003096:	e000      	b.n	800309a <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8003098:	bf00      	nop
    return;
 800309a:	bf00      	nop
  }
}
 800309c:	3720      	adds	r7, #32
 800309e:	46bd      	mov	sp, r7
 80030a0:	bd80      	pop	{r7, pc}
 80030a2:	bf00      	nop
 80030a4:	080030bd 	.word	0x080030bd

080030a8 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80030a8:	b480      	push	{r7}
 80030aa:	b083      	sub	sp, #12
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80030b0:	bf00      	nop
 80030b2:	370c      	adds	r7, #12
 80030b4:	46bd      	mov	sp, r7
 80030b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ba:	4770      	bx	lr

080030bc <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b084      	sub	sp, #16
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030c8:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	2200      	movs	r2, #0
 80030ce:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	2200      	movs	r2, #0
 80030d6:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80030d8:	68f8      	ldr	r0, [r7, #12]
 80030da:	f7ff ffe5 	bl	80030a8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80030de:	bf00      	nop
 80030e0:	3710      	adds	r7, #16
 80030e2:	46bd      	mov	sp, r7
 80030e4:	bd80      	pop	{r7, pc}
	...

080030e8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b088      	sub	sp, #32
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	60f8      	str	r0, [r7, #12]
 80030f0:	60b9      	str	r1, [r7, #8]
 80030f2:	603b      	str	r3, [r7, #0]
 80030f4:	4613      	mov	r3, r2
 80030f6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80030f8:	f7fd fd44 	bl	8000b84 <HAL_GetTick>
 80030fc:	4602      	mov	r2, r0
 80030fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003100:	1a9b      	subs	r3, r3, r2
 8003102:	683a      	ldr	r2, [r7, #0]
 8003104:	4413      	add	r3, r2
 8003106:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003108:	f7fd fd3c 	bl	8000b84 <HAL_GetTick>
 800310c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800310e:	4b39      	ldr	r3, [pc, #228]	@ (80031f4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	015b      	lsls	r3, r3, #5
 8003114:	0d1b      	lsrs	r3, r3, #20
 8003116:	69fa      	ldr	r2, [r7, #28]
 8003118:	fb02 f303 	mul.w	r3, r2, r3
 800311c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800311e:	e054      	b.n	80031ca <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003126:	d050      	beq.n	80031ca <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003128:	f7fd fd2c 	bl	8000b84 <HAL_GetTick>
 800312c:	4602      	mov	r2, r0
 800312e:	69bb      	ldr	r3, [r7, #24]
 8003130:	1ad3      	subs	r3, r2, r3
 8003132:	69fa      	ldr	r2, [r7, #28]
 8003134:	429a      	cmp	r2, r3
 8003136:	d902      	bls.n	800313e <SPI_WaitFlagStateUntilTimeout+0x56>
 8003138:	69fb      	ldr	r3, [r7, #28]
 800313a:	2b00      	cmp	r3, #0
 800313c:	d13d      	bne.n	80031ba <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	685a      	ldr	r2, [r3, #4]
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800314c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	685b      	ldr	r3, [r3, #4]
 8003152:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003156:	d111      	bne.n	800317c <SPI_WaitFlagStateUntilTimeout+0x94>
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	689b      	ldr	r3, [r3, #8]
 800315c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003160:	d004      	beq.n	800316c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	689b      	ldr	r3, [r3, #8]
 8003166:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800316a:	d107      	bne.n	800317c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	681a      	ldr	r2, [r3, #0]
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800317a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003180:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003184:	d10f      	bne.n	80031a6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	681a      	ldr	r2, [r3, #0]
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003194:	601a      	str	r2, [r3, #0]
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	681a      	ldr	r2, [r3, #0]
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80031a4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	2201      	movs	r2, #1
 80031aa:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	2200      	movs	r2, #0
 80031b2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80031b6:	2303      	movs	r3, #3
 80031b8:	e017      	b.n	80031ea <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80031ba:	697b      	ldr	r3, [r7, #20]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d101      	bne.n	80031c4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80031c0:	2300      	movs	r3, #0
 80031c2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80031c4:	697b      	ldr	r3, [r7, #20]
 80031c6:	3b01      	subs	r3, #1
 80031c8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	689a      	ldr	r2, [r3, #8]
 80031d0:	68bb      	ldr	r3, [r7, #8]
 80031d2:	4013      	ands	r3, r2
 80031d4:	68ba      	ldr	r2, [r7, #8]
 80031d6:	429a      	cmp	r2, r3
 80031d8:	bf0c      	ite	eq
 80031da:	2301      	moveq	r3, #1
 80031dc:	2300      	movne	r3, #0
 80031de:	b2db      	uxtb	r3, r3
 80031e0:	461a      	mov	r2, r3
 80031e2:	79fb      	ldrb	r3, [r7, #7]
 80031e4:	429a      	cmp	r2, r3
 80031e6:	d19b      	bne.n	8003120 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80031e8:	2300      	movs	r3, #0
}
 80031ea:	4618      	mov	r0, r3
 80031ec:	3720      	adds	r7, #32
 80031ee:	46bd      	mov	sp, r7
 80031f0:	bd80      	pop	{r7, pc}
 80031f2:	bf00      	nop
 80031f4:	20000000 	.word	0x20000000

080031f8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b08a      	sub	sp, #40	@ 0x28
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	60f8      	str	r0, [r7, #12]
 8003200:	60b9      	str	r1, [r7, #8]
 8003202:	607a      	str	r2, [r7, #4]
 8003204:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003206:	2300      	movs	r3, #0
 8003208:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800320a:	f7fd fcbb 	bl	8000b84 <HAL_GetTick>
 800320e:	4602      	mov	r2, r0
 8003210:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003212:	1a9b      	subs	r3, r3, r2
 8003214:	683a      	ldr	r2, [r7, #0]
 8003216:	4413      	add	r3, r2
 8003218:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800321a:	f7fd fcb3 	bl	8000b84 <HAL_GetTick>
 800321e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	330c      	adds	r3, #12
 8003226:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003228:	4b3d      	ldr	r3, [pc, #244]	@ (8003320 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800322a:	681a      	ldr	r2, [r3, #0]
 800322c:	4613      	mov	r3, r2
 800322e:	009b      	lsls	r3, r3, #2
 8003230:	4413      	add	r3, r2
 8003232:	00da      	lsls	r2, r3, #3
 8003234:	1ad3      	subs	r3, r2, r3
 8003236:	0d1b      	lsrs	r3, r3, #20
 8003238:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800323a:	fb02 f303 	mul.w	r3, r2, r3
 800323e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003240:	e060      	b.n	8003304 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003242:	68bb      	ldr	r3, [r7, #8]
 8003244:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8003248:	d107      	bne.n	800325a <SPI_WaitFifoStateUntilTimeout+0x62>
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	2b00      	cmp	r3, #0
 800324e:	d104      	bne.n	800325a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003250:	69fb      	ldr	r3, [r7, #28]
 8003252:	781b      	ldrb	r3, [r3, #0]
 8003254:	b2db      	uxtb	r3, r3
 8003256:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003258:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003260:	d050      	beq.n	8003304 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003262:	f7fd fc8f 	bl	8000b84 <HAL_GetTick>
 8003266:	4602      	mov	r2, r0
 8003268:	6a3b      	ldr	r3, [r7, #32]
 800326a:	1ad3      	subs	r3, r2, r3
 800326c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800326e:	429a      	cmp	r2, r3
 8003270:	d902      	bls.n	8003278 <SPI_WaitFifoStateUntilTimeout+0x80>
 8003272:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003274:	2b00      	cmp	r3, #0
 8003276:	d13d      	bne.n	80032f4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	685a      	ldr	r2, [r3, #4]
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003286:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	685b      	ldr	r3, [r3, #4]
 800328c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003290:	d111      	bne.n	80032b6 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	689b      	ldr	r3, [r3, #8]
 8003296:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800329a:	d004      	beq.n	80032a6 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	689b      	ldr	r3, [r3, #8]
 80032a0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80032a4:	d107      	bne.n	80032b6 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	681a      	ldr	r2, [r3, #0]
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80032b4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032ba:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80032be:	d10f      	bne.n	80032e0 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	681a      	ldr	r2, [r3, #0]
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80032ce:	601a      	str	r2, [r3, #0]
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	681a      	ldr	r2, [r3, #0]
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80032de:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	2201      	movs	r2, #1
 80032e4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	2200      	movs	r2, #0
 80032ec:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80032f0:	2303      	movs	r3, #3
 80032f2:	e010      	b.n	8003316 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80032f4:	69bb      	ldr	r3, [r7, #24]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d101      	bne.n	80032fe <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80032fa:	2300      	movs	r3, #0
 80032fc:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 80032fe:	69bb      	ldr	r3, [r7, #24]
 8003300:	3b01      	subs	r3, #1
 8003302:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	689a      	ldr	r2, [r3, #8]
 800330a:	68bb      	ldr	r3, [r7, #8]
 800330c:	4013      	ands	r3, r2
 800330e:	687a      	ldr	r2, [r7, #4]
 8003310:	429a      	cmp	r2, r3
 8003312:	d196      	bne.n	8003242 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8003314:	2300      	movs	r3, #0
}
 8003316:	4618      	mov	r0, r3
 8003318:	3728      	adds	r7, #40	@ 0x28
 800331a:	46bd      	mov	sp, r7
 800331c:	bd80      	pop	{r7, pc}
 800331e:	bf00      	nop
 8003320:	20000000 	.word	0x20000000

08003324 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b086      	sub	sp, #24
 8003328:	af02      	add	r7, sp, #8
 800332a:	60f8      	str	r0, [r7, #12]
 800332c:	60b9      	str	r1, [r7, #8]
 800332e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	685b      	ldr	r3, [r3, #4]
 8003334:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003338:	d111      	bne.n	800335e <SPI_EndRxTransaction+0x3a>
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	689b      	ldr	r3, [r3, #8]
 800333e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003342:	d004      	beq.n	800334e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	689b      	ldr	r3, [r3, #8]
 8003348:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800334c:	d107      	bne.n	800335e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	681a      	ldr	r2, [r3, #0]
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800335c:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	9300      	str	r3, [sp, #0]
 8003362:	68bb      	ldr	r3, [r7, #8]
 8003364:	2200      	movs	r2, #0
 8003366:	2180      	movs	r1, #128	@ 0x80
 8003368:	68f8      	ldr	r0, [r7, #12]
 800336a:	f7ff febd 	bl	80030e8 <SPI_WaitFlagStateUntilTimeout>
 800336e:	4603      	mov	r3, r0
 8003370:	2b00      	cmp	r3, #0
 8003372:	d007      	beq.n	8003384 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003378:	f043 0220 	orr.w	r2, r3, #32
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003380:	2303      	movs	r3, #3
 8003382:	e023      	b.n	80033cc <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	685b      	ldr	r3, [r3, #4]
 8003388:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800338c:	d11d      	bne.n	80033ca <SPI_EndRxTransaction+0xa6>
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	689b      	ldr	r3, [r3, #8]
 8003392:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003396:	d004      	beq.n	80033a2 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	689b      	ldr	r3, [r3, #8]
 800339c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80033a0:	d113      	bne.n	80033ca <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	9300      	str	r3, [sp, #0]
 80033a6:	68bb      	ldr	r3, [r7, #8]
 80033a8:	2200      	movs	r2, #0
 80033aa:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80033ae:	68f8      	ldr	r0, [r7, #12]
 80033b0:	f7ff ff22 	bl	80031f8 <SPI_WaitFifoStateUntilTimeout>
 80033b4:	4603      	mov	r3, r0
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d007      	beq.n	80033ca <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80033be:	f043 0220 	orr.w	r2, r3, #32
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 80033c6:	2303      	movs	r3, #3
 80033c8:	e000      	b.n	80033cc <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 80033ca:	2300      	movs	r3, #0
}
 80033cc:	4618      	mov	r0, r3
 80033ce:	3710      	adds	r7, #16
 80033d0:	46bd      	mov	sp, r7
 80033d2:	bd80      	pop	{r7, pc}

080033d4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b086      	sub	sp, #24
 80033d8:	af02      	add	r7, sp, #8
 80033da:	60f8      	str	r0, [r7, #12]
 80033dc:	60b9      	str	r1, [r7, #8]
 80033de:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	9300      	str	r3, [sp, #0]
 80033e4:	68bb      	ldr	r3, [r7, #8]
 80033e6:	2200      	movs	r2, #0
 80033e8:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80033ec:	68f8      	ldr	r0, [r7, #12]
 80033ee:	f7ff ff03 	bl	80031f8 <SPI_WaitFifoStateUntilTimeout>
 80033f2:	4603      	mov	r3, r0
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d007      	beq.n	8003408 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80033fc:	f043 0220 	orr.w	r2, r3, #32
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003404:	2303      	movs	r3, #3
 8003406:	e027      	b.n	8003458 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	9300      	str	r3, [sp, #0]
 800340c:	68bb      	ldr	r3, [r7, #8]
 800340e:	2200      	movs	r2, #0
 8003410:	2180      	movs	r1, #128	@ 0x80
 8003412:	68f8      	ldr	r0, [r7, #12]
 8003414:	f7ff fe68 	bl	80030e8 <SPI_WaitFlagStateUntilTimeout>
 8003418:	4603      	mov	r3, r0
 800341a:	2b00      	cmp	r3, #0
 800341c:	d007      	beq.n	800342e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003422:	f043 0220 	orr.w	r2, r3, #32
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800342a:	2303      	movs	r3, #3
 800342c:	e014      	b.n	8003458 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	9300      	str	r3, [sp, #0]
 8003432:	68bb      	ldr	r3, [r7, #8]
 8003434:	2200      	movs	r2, #0
 8003436:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800343a:	68f8      	ldr	r0, [r7, #12]
 800343c:	f7ff fedc 	bl	80031f8 <SPI_WaitFifoStateUntilTimeout>
 8003440:	4603      	mov	r3, r0
 8003442:	2b00      	cmp	r3, #0
 8003444:	d007      	beq.n	8003456 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800344a:	f043 0220 	orr.w	r2, r3, #32
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003452:	2303      	movs	r3, #3
 8003454:	e000      	b.n	8003458 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003456:	2300      	movs	r3, #0
}
 8003458:	4618      	mov	r0, r3
 800345a:	3710      	adds	r7, #16
 800345c:	46bd      	mov	sp, r7
 800345e:	bd80      	pop	{r7, pc}

08003460 <memset>:
 8003460:	4402      	add	r2, r0
 8003462:	4603      	mov	r3, r0
 8003464:	4293      	cmp	r3, r2
 8003466:	d100      	bne.n	800346a <memset+0xa>
 8003468:	4770      	bx	lr
 800346a:	f803 1b01 	strb.w	r1, [r3], #1
 800346e:	e7f9      	b.n	8003464 <memset+0x4>

08003470 <__libc_init_array>:
 8003470:	b570      	push	{r4, r5, r6, lr}
 8003472:	4d0d      	ldr	r5, [pc, #52]	@ (80034a8 <__libc_init_array+0x38>)
 8003474:	4c0d      	ldr	r4, [pc, #52]	@ (80034ac <__libc_init_array+0x3c>)
 8003476:	1b64      	subs	r4, r4, r5
 8003478:	10a4      	asrs	r4, r4, #2
 800347a:	2600      	movs	r6, #0
 800347c:	42a6      	cmp	r6, r4
 800347e:	d109      	bne.n	8003494 <__libc_init_array+0x24>
 8003480:	4d0b      	ldr	r5, [pc, #44]	@ (80034b0 <__libc_init_array+0x40>)
 8003482:	4c0c      	ldr	r4, [pc, #48]	@ (80034b4 <__libc_init_array+0x44>)
 8003484:	f000 f818 	bl	80034b8 <_init>
 8003488:	1b64      	subs	r4, r4, r5
 800348a:	10a4      	asrs	r4, r4, #2
 800348c:	2600      	movs	r6, #0
 800348e:	42a6      	cmp	r6, r4
 8003490:	d105      	bne.n	800349e <__libc_init_array+0x2e>
 8003492:	bd70      	pop	{r4, r5, r6, pc}
 8003494:	f855 3b04 	ldr.w	r3, [r5], #4
 8003498:	4798      	blx	r3
 800349a:	3601      	adds	r6, #1
 800349c:	e7ee      	b.n	800347c <__libc_init_array+0xc>
 800349e:	f855 3b04 	ldr.w	r3, [r5], #4
 80034a2:	4798      	blx	r3
 80034a4:	3601      	adds	r6, #1
 80034a6:	e7f2      	b.n	800348e <__libc_init_array+0x1e>
 80034a8:	080034f4 	.word	0x080034f4
 80034ac:	080034f4 	.word	0x080034f4
 80034b0:	080034f4 	.word	0x080034f4
 80034b4:	080034f8 	.word	0x080034f8

080034b8 <_init>:
 80034b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034ba:	bf00      	nop
 80034bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80034be:	bc08      	pop	{r3}
 80034c0:	469e      	mov	lr, r3
 80034c2:	4770      	bx	lr

080034c4 <_fini>:
 80034c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034c6:	bf00      	nop
 80034c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80034ca:	bc08      	pop	{r3}
 80034cc:	469e      	mov	lr, r3
 80034ce:	4770      	bx	lr
