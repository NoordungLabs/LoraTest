
LoRaTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000031c8  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  080033a0  080033a0  000043a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080033bc  080033bc  0000500c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080033bc  080033bc  000043bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080033c4  080033c4  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080033c4  080033c4  000043c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080033c8  080033c8  000043c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080033cc  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b4  2000000c  080033d8  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001c0  080033d8  000051c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000942a  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d8e  00000000  00000000  0000e466  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000968  00000000  00000000  000101f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000703  00000000  00000000  00010b60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001cc1a  00000000  00000000  00011263  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ad6d  00000000  00000000  0002de7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b2c6b  00000000  00000000  00038bea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000eb855  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000024b8  00000000  00000000  000eb898  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000054  00000000  00000000  000edd50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08003388 	.word	0x08003388

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08003388 	.word	0x08003388

08000218 <strlen>:
 8000218:	4603      	mov	r3, r0
 800021a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800021e:	2a00      	cmp	r2, #0
 8000220:	d1fb      	bne.n	800021a <strlen+0x2>
 8000222:	1a18      	subs	r0, r3, r0
 8000224:	3801      	subs	r0, #1
 8000226:	4770      	bx	lr

08000228 <__aeabi_uldivmod>:
 8000228:	b953      	cbnz	r3, 8000240 <__aeabi_uldivmod+0x18>
 800022a:	b94a      	cbnz	r2, 8000240 <__aeabi_uldivmod+0x18>
 800022c:	2900      	cmp	r1, #0
 800022e:	bf08      	it	eq
 8000230:	2800      	cmpeq	r0, #0
 8000232:	bf1c      	itt	ne
 8000234:	f04f 31ff 	movne.w	r1, #4294967295
 8000238:	f04f 30ff 	movne.w	r0, #4294967295
 800023c:	f000 b988 	b.w	8000550 <__aeabi_idiv0>
 8000240:	f1ad 0c08 	sub.w	ip, sp, #8
 8000244:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000248:	f000 f806 	bl	8000258 <__udivmoddi4>
 800024c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000250:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000254:	b004      	add	sp, #16
 8000256:	4770      	bx	lr

08000258 <__udivmoddi4>:
 8000258:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800025c:	9d08      	ldr	r5, [sp, #32]
 800025e:	468e      	mov	lr, r1
 8000260:	4604      	mov	r4, r0
 8000262:	4688      	mov	r8, r1
 8000264:	2b00      	cmp	r3, #0
 8000266:	d14a      	bne.n	80002fe <__udivmoddi4+0xa6>
 8000268:	428a      	cmp	r2, r1
 800026a:	4617      	mov	r7, r2
 800026c:	d962      	bls.n	8000334 <__udivmoddi4+0xdc>
 800026e:	fab2 f682 	clz	r6, r2
 8000272:	b14e      	cbz	r6, 8000288 <__udivmoddi4+0x30>
 8000274:	f1c6 0320 	rsb	r3, r6, #32
 8000278:	fa01 f806 	lsl.w	r8, r1, r6
 800027c:	fa20 f303 	lsr.w	r3, r0, r3
 8000280:	40b7      	lsls	r7, r6
 8000282:	ea43 0808 	orr.w	r8, r3, r8
 8000286:	40b4      	lsls	r4, r6
 8000288:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800028c:	fa1f fc87 	uxth.w	ip, r7
 8000290:	fbb8 f1fe 	udiv	r1, r8, lr
 8000294:	0c23      	lsrs	r3, r4, #16
 8000296:	fb0e 8811 	mls	r8, lr, r1, r8
 800029a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800029e:	fb01 f20c 	mul.w	r2, r1, ip
 80002a2:	429a      	cmp	r2, r3
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0x62>
 80002a6:	18fb      	adds	r3, r7, r3
 80002a8:	f101 30ff 	add.w	r0, r1, #4294967295
 80002ac:	f080 80ea 	bcs.w	8000484 <__udivmoddi4+0x22c>
 80002b0:	429a      	cmp	r2, r3
 80002b2:	f240 80e7 	bls.w	8000484 <__udivmoddi4+0x22c>
 80002b6:	3902      	subs	r1, #2
 80002b8:	443b      	add	r3, r7
 80002ba:	1a9a      	subs	r2, r3, r2
 80002bc:	b2a3      	uxth	r3, r4
 80002be:	fbb2 f0fe 	udiv	r0, r2, lr
 80002c2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002c6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002ca:	fb00 fc0c 	mul.w	ip, r0, ip
 80002ce:	459c      	cmp	ip, r3
 80002d0:	d909      	bls.n	80002e6 <__udivmoddi4+0x8e>
 80002d2:	18fb      	adds	r3, r7, r3
 80002d4:	f100 32ff 	add.w	r2, r0, #4294967295
 80002d8:	f080 80d6 	bcs.w	8000488 <__udivmoddi4+0x230>
 80002dc:	459c      	cmp	ip, r3
 80002de:	f240 80d3 	bls.w	8000488 <__udivmoddi4+0x230>
 80002e2:	443b      	add	r3, r7
 80002e4:	3802      	subs	r0, #2
 80002e6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002ea:	eba3 030c 	sub.w	r3, r3, ip
 80002ee:	2100      	movs	r1, #0
 80002f0:	b11d      	cbz	r5, 80002fa <__udivmoddi4+0xa2>
 80002f2:	40f3      	lsrs	r3, r6
 80002f4:	2200      	movs	r2, #0
 80002f6:	e9c5 3200 	strd	r3, r2, [r5]
 80002fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fe:	428b      	cmp	r3, r1
 8000300:	d905      	bls.n	800030e <__udivmoddi4+0xb6>
 8000302:	b10d      	cbz	r5, 8000308 <__udivmoddi4+0xb0>
 8000304:	e9c5 0100 	strd	r0, r1, [r5]
 8000308:	2100      	movs	r1, #0
 800030a:	4608      	mov	r0, r1
 800030c:	e7f5      	b.n	80002fa <__udivmoddi4+0xa2>
 800030e:	fab3 f183 	clz	r1, r3
 8000312:	2900      	cmp	r1, #0
 8000314:	d146      	bne.n	80003a4 <__udivmoddi4+0x14c>
 8000316:	4573      	cmp	r3, lr
 8000318:	d302      	bcc.n	8000320 <__udivmoddi4+0xc8>
 800031a:	4282      	cmp	r2, r0
 800031c:	f200 8105 	bhi.w	800052a <__udivmoddi4+0x2d2>
 8000320:	1a84      	subs	r4, r0, r2
 8000322:	eb6e 0203 	sbc.w	r2, lr, r3
 8000326:	2001      	movs	r0, #1
 8000328:	4690      	mov	r8, r2
 800032a:	2d00      	cmp	r5, #0
 800032c:	d0e5      	beq.n	80002fa <__udivmoddi4+0xa2>
 800032e:	e9c5 4800 	strd	r4, r8, [r5]
 8000332:	e7e2      	b.n	80002fa <__udivmoddi4+0xa2>
 8000334:	2a00      	cmp	r2, #0
 8000336:	f000 8090 	beq.w	800045a <__udivmoddi4+0x202>
 800033a:	fab2 f682 	clz	r6, r2
 800033e:	2e00      	cmp	r6, #0
 8000340:	f040 80a4 	bne.w	800048c <__udivmoddi4+0x234>
 8000344:	1a8a      	subs	r2, r1, r2
 8000346:	0c03      	lsrs	r3, r0, #16
 8000348:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800034c:	b280      	uxth	r0, r0
 800034e:	b2bc      	uxth	r4, r7
 8000350:	2101      	movs	r1, #1
 8000352:	fbb2 fcfe 	udiv	ip, r2, lr
 8000356:	fb0e 221c 	mls	r2, lr, ip, r2
 800035a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800035e:	fb04 f20c 	mul.w	r2, r4, ip
 8000362:	429a      	cmp	r2, r3
 8000364:	d907      	bls.n	8000376 <__udivmoddi4+0x11e>
 8000366:	18fb      	adds	r3, r7, r3
 8000368:	f10c 38ff 	add.w	r8, ip, #4294967295
 800036c:	d202      	bcs.n	8000374 <__udivmoddi4+0x11c>
 800036e:	429a      	cmp	r2, r3
 8000370:	f200 80e0 	bhi.w	8000534 <__udivmoddi4+0x2dc>
 8000374:	46c4      	mov	ip, r8
 8000376:	1a9b      	subs	r3, r3, r2
 8000378:	fbb3 f2fe 	udiv	r2, r3, lr
 800037c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000380:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000384:	fb02 f404 	mul.w	r4, r2, r4
 8000388:	429c      	cmp	r4, r3
 800038a:	d907      	bls.n	800039c <__udivmoddi4+0x144>
 800038c:	18fb      	adds	r3, r7, r3
 800038e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000392:	d202      	bcs.n	800039a <__udivmoddi4+0x142>
 8000394:	429c      	cmp	r4, r3
 8000396:	f200 80ca 	bhi.w	800052e <__udivmoddi4+0x2d6>
 800039a:	4602      	mov	r2, r0
 800039c:	1b1b      	subs	r3, r3, r4
 800039e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003a2:	e7a5      	b.n	80002f0 <__udivmoddi4+0x98>
 80003a4:	f1c1 0620 	rsb	r6, r1, #32
 80003a8:	408b      	lsls	r3, r1
 80003aa:	fa22 f706 	lsr.w	r7, r2, r6
 80003ae:	431f      	orrs	r7, r3
 80003b0:	fa0e f401 	lsl.w	r4, lr, r1
 80003b4:	fa20 f306 	lsr.w	r3, r0, r6
 80003b8:	fa2e fe06 	lsr.w	lr, lr, r6
 80003bc:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80003c0:	4323      	orrs	r3, r4
 80003c2:	fa00 f801 	lsl.w	r8, r0, r1
 80003c6:	fa1f fc87 	uxth.w	ip, r7
 80003ca:	fbbe f0f9 	udiv	r0, lr, r9
 80003ce:	0c1c      	lsrs	r4, r3, #16
 80003d0:	fb09 ee10 	mls	lr, r9, r0, lr
 80003d4:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003d8:	fb00 fe0c 	mul.w	lr, r0, ip
 80003dc:	45a6      	cmp	lr, r4
 80003de:	fa02 f201 	lsl.w	r2, r2, r1
 80003e2:	d909      	bls.n	80003f8 <__udivmoddi4+0x1a0>
 80003e4:	193c      	adds	r4, r7, r4
 80003e6:	f100 3aff 	add.w	sl, r0, #4294967295
 80003ea:	f080 809c 	bcs.w	8000526 <__udivmoddi4+0x2ce>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	f240 8099 	bls.w	8000526 <__udivmoddi4+0x2ce>
 80003f4:	3802      	subs	r0, #2
 80003f6:	443c      	add	r4, r7
 80003f8:	eba4 040e 	sub.w	r4, r4, lr
 80003fc:	fa1f fe83 	uxth.w	lr, r3
 8000400:	fbb4 f3f9 	udiv	r3, r4, r9
 8000404:	fb09 4413 	mls	r4, r9, r3, r4
 8000408:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 800040c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000410:	45a4      	cmp	ip, r4
 8000412:	d908      	bls.n	8000426 <__udivmoddi4+0x1ce>
 8000414:	193c      	adds	r4, r7, r4
 8000416:	f103 3eff 	add.w	lr, r3, #4294967295
 800041a:	f080 8082 	bcs.w	8000522 <__udivmoddi4+0x2ca>
 800041e:	45a4      	cmp	ip, r4
 8000420:	d97f      	bls.n	8000522 <__udivmoddi4+0x2ca>
 8000422:	3b02      	subs	r3, #2
 8000424:	443c      	add	r4, r7
 8000426:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800042a:	eba4 040c 	sub.w	r4, r4, ip
 800042e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000432:	4564      	cmp	r4, ip
 8000434:	4673      	mov	r3, lr
 8000436:	46e1      	mov	r9, ip
 8000438:	d362      	bcc.n	8000500 <__udivmoddi4+0x2a8>
 800043a:	d05f      	beq.n	80004fc <__udivmoddi4+0x2a4>
 800043c:	b15d      	cbz	r5, 8000456 <__udivmoddi4+0x1fe>
 800043e:	ebb8 0203 	subs.w	r2, r8, r3
 8000442:	eb64 0409 	sbc.w	r4, r4, r9
 8000446:	fa04 f606 	lsl.w	r6, r4, r6
 800044a:	fa22 f301 	lsr.w	r3, r2, r1
 800044e:	431e      	orrs	r6, r3
 8000450:	40cc      	lsrs	r4, r1
 8000452:	e9c5 6400 	strd	r6, r4, [r5]
 8000456:	2100      	movs	r1, #0
 8000458:	e74f      	b.n	80002fa <__udivmoddi4+0xa2>
 800045a:	fbb1 fcf2 	udiv	ip, r1, r2
 800045e:	0c01      	lsrs	r1, r0, #16
 8000460:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000464:	b280      	uxth	r0, r0
 8000466:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800046a:	463b      	mov	r3, r7
 800046c:	4638      	mov	r0, r7
 800046e:	463c      	mov	r4, r7
 8000470:	46b8      	mov	r8, r7
 8000472:	46be      	mov	lr, r7
 8000474:	2620      	movs	r6, #32
 8000476:	fbb1 f1f7 	udiv	r1, r1, r7
 800047a:	eba2 0208 	sub.w	r2, r2, r8
 800047e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000482:	e766      	b.n	8000352 <__udivmoddi4+0xfa>
 8000484:	4601      	mov	r1, r0
 8000486:	e718      	b.n	80002ba <__udivmoddi4+0x62>
 8000488:	4610      	mov	r0, r2
 800048a:	e72c      	b.n	80002e6 <__udivmoddi4+0x8e>
 800048c:	f1c6 0220 	rsb	r2, r6, #32
 8000490:	fa2e f302 	lsr.w	r3, lr, r2
 8000494:	40b7      	lsls	r7, r6
 8000496:	40b1      	lsls	r1, r6
 8000498:	fa20 f202 	lsr.w	r2, r0, r2
 800049c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004a0:	430a      	orrs	r2, r1
 80004a2:	fbb3 f8fe 	udiv	r8, r3, lr
 80004a6:	b2bc      	uxth	r4, r7
 80004a8:	fb0e 3318 	mls	r3, lr, r8, r3
 80004ac:	0c11      	lsrs	r1, r2, #16
 80004ae:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b2:	fb08 f904 	mul.w	r9, r8, r4
 80004b6:	40b0      	lsls	r0, r6
 80004b8:	4589      	cmp	r9, r1
 80004ba:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80004be:	b280      	uxth	r0, r0
 80004c0:	d93e      	bls.n	8000540 <__udivmoddi4+0x2e8>
 80004c2:	1879      	adds	r1, r7, r1
 80004c4:	f108 3cff 	add.w	ip, r8, #4294967295
 80004c8:	d201      	bcs.n	80004ce <__udivmoddi4+0x276>
 80004ca:	4589      	cmp	r9, r1
 80004cc:	d81f      	bhi.n	800050e <__udivmoddi4+0x2b6>
 80004ce:	eba1 0109 	sub.w	r1, r1, r9
 80004d2:	fbb1 f9fe 	udiv	r9, r1, lr
 80004d6:	fb09 f804 	mul.w	r8, r9, r4
 80004da:	fb0e 1119 	mls	r1, lr, r9, r1
 80004de:	b292      	uxth	r2, r2
 80004e0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004e4:	4542      	cmp	r2, r8
 80004e6:	d229      	bcs.n	800053c <__udivmoddi4+0x2e4>
 80004e8:	18ba      	adds	r2, r7, r2
 80004ea:	f109 31ff 	add.w	r1, r9, #4294967295
 80004ee:	d2c4      	bcs.n	800047a <__udivmoddi4+0x222>
 80004f0:	4542      	cmp	r2, r8
 80004f2:	d2c2      	bcs.n	800047a <__udivmoddi4+0x222>
 80004f4:	f1a9 0102 	sub.w	r1, r9, #2
 80004f8:	443a      	add	r2, r7
 80004fa:	e7be      	b.n	800047a <__udivmoddi4+0x222>
 80004fc:	45f0      	cmp	r8, lr
 80004fe:	d29d      	bcs.n	800043c <__udivmoddi4+0x1e4>
 8000500:	ebbe 0302 	subs.w	r3, lr, r2
 8000504:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000508:	3801      	subs	r0, #1
 800050a:	46e1      	mov	r9, ip
 800050c:	e796      	b.n	800043c <__udivmoddi4+0x1e4>
 800050e:	eba7 0909 	sub.w	r9, r7, r9
 8000512:	4449      	add	r1, r9
 8000514:	f1a8 0c02 	sub.w	ip, r8, #2
 8000518:	fbb1 f9fe 	udiv	r9, r1, lr
 800051c:	fb09 f804 	mul.w	r8, r9, r4
 8000520:	e7db      	b.n	80004da <__udivmoddi4+0x282>
 8000522:	4673      	mov	r3, lr
 8000524:	e77f      	b.n	8000426 <__udivmoddi4+0x1ce>
 8000526:	4650      	mov	r0, sl
 8000528:	e766      	b.n	80003f8 <__udivmoddi4+0x1a0>
 800052a:	4608      	mov	r0, r1
 800052c:	e6fd      	b.n	800032a <__udivmoddi4+0xd2>
 800052e:	443b      	add	r3, r7
 8000530:	3a02      	subs	r2, #2
 8000532:	e733      	b.n	800039c <__udivmoddi4+0x144>
 8000534:	f1ac 0c02 	sub.w	ip, ip, #2
 8000538:	443b      	add	r3, r7
 800053a:	e71c      	b.n	8000376 <__udivmoddi4+0x11e>
 800053c:	4649      	mov	r1, r9
 800053e:	e79c      	b.n	800047a <__udivmoddi4+0x222>
 8000540:	eba1 0109 	sub.w	r1, r1, r9
 8000544:	46c4      	mov	ip, r8
 8000546:	fbb1 f9fe 	udiv	r9, r1, lr
 800054a:	fb09 f804 	mul.w	r8, r9, r4
 800054e:	e7c4      	b.n	80004da <__udivmoddi4+0x282>

08000550 <__aeabi_idiv0>:
 8000550:	4770      	bx	lr
 8000552:	bf00      	nop

08000554 <HAL_GPIO_EXTI_Callback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b082      	sub	sp, #8
 8000558:	af00      	add	r7, sp, #0
 800055a:	4603      	mov	r3, r0
 800055c:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == SX1272_DIO0_PIN)
 800055e:	88fb      	ldrh	r3, [r7, #6]
 8000560:	2b01      	cmp	r3, #1
 8000562:	d108      	bne.n	8000576 <HAL_GPIO_EXTI_Callback+0x22>
    {
        irqFlags = SX1272_ReadReg(REG_IRQ_FLAGS);
 8000564:	2012      	movs	r0, #18
 8000566:	f000 fa99 	bl	8000a9c <SX1272_ReadReg>
 800056a:	4603      	mov	r3, r0
 800056c:	461a      	mov	r2, r3
 800056e:	4b04      	ldr	r3, [pc, #16]	@ (8000580 <HAL_GPIO_EXTI_Callback+0x2c>)
 8000570:	701a      	strb	r2, [r3, #0]
        //printf("EXTI! IRQ=0x%02X\r\n", irqFlags);
        SX1272_HandleDIO0();
 8000572:	f000 fba3 	bl	8000cbc <SX1272_HandleDIO0>
    }
}
 8000576:	bf00      	nop
 8000578:	3708      	adds	r7, #8
 800057a:	46bd      	mov	sp, r7
 800057c:	bd80      	pop	{r7, pc}
 800057e:	bf00      	nop
 8000580:	200000b1 	.word	0x200000b1

08000584 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b084      	sub	sp, #16
 8000588:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800058a:	f000 fc24 	bl	8000dd6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800058e:	f000 f853 	bl	8000638 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000592:	f000 f8fd 	bl	8000790 <MX_GPIO_Init>
  MX_CRC_Init();
 8000596:	f000 f89b 	bl	80006d0 <MX_CRC_Init>
  MX_SPI1_Init();
 800059a:	f000 f8bb 	bl	8000714 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  SX1272_Init();
 800059e:	f000 fb4b 	bl	8000c38 <SX1272_Init>
  status = SX1272_ReadReg(0x42);
 80005a2:	2042      	movs	r0, #66	@ 0x42
 80005a4:	f000 fa7a 	bl	8000a9c <SX1272_ReadReg>
 80005a8:	4603      	mov	r3, r0
 80005aa:	461a      	mov	r2, r3
 80005ac:	4b1f      	ldr	r3, [pc, #124]	@ (800062c <main+0xa8>)
 80005ae:	701a      	strb	r2, [r3, #0]
  SX1272_Receive();
 80005b0:	f000 fb73 	bl	8000c9a <SX1272_Receive>
  int8_t msg[] = "Hello World";
 80005b4:	4a1e      	ldr	r2, [pc, #120]	@ (8000630 <main+0xac>)
 80005b6:	463b      	mov	r3, r7
 80005b8:	ca07      	ldmia	r2, {r0, r1, r2}
 80005ba:	e883 0007 	stmia.w	r3, {r0, r1, r2}

 // Start receiving
 HAL_Delay(2000);
 80005be:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80005c2:	f000 fc79 	bl	8000eb8 <HAL_Delay>
 uint8_t counter = 0;
 80005c6:	2300      	movs	r3, #0
 80005c8:	73fb      	strb	r3, [r7, #15]
 SX1272_Transmit(msg, strlen((char*)msg));
 80005ca:	463b      	mov	r3, r7
 80005cc:	4618      	mov	r0, r3
 80005ce:	f7ff fe23 	bl	8000218 <strlen>
 80005d2:	4603      	mov	r3, r0
 80005d4:	b2da      	uxtb	r2, r3
 80005d6:	463b      	mov	r3, r7
 80005d8:	4611      	mov	r1, r2
 80005da:	4618      	mov	r0, r3
 80005dc:	f000 fb34 	bl	8000c48 <SX1272_Transmit>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  static uint32_t lastSend = 0;
	  if(HAL_GetTick() - lastSend >= 5000) {
 80005e0:	f000 fc5e 	bl	8000ea0 <HAL_GetTick>
 80005e4:	4602      	mov	r2, r0
 80005e6:	4b13      	ldr	r3, [pc, #76]	@ (8000634 <main+0xb0>)
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	1ad3      	subs	r3, r2, r3
 80005ec:	f241 3287 	movw	r2, #4999	@ 0x1387
 80005f0:	4293      	cmp	r3, r2
 80005f2:	d90f      	bls.n	8000614 <main+0x90>
		  SX1272_Transmit(msg, strlen((char*)msg));
 80005f4:	463b      	mov	r3, r7
 80005f6:	4618      	mov	r0, r3
 80005f8:	f7ff fe0e 	bl	8000218 <strlen>
 80005fc:	4603      	mov	r3, r0
 80005fe:	b2da      	uxtb	r2, r3
 8000600:	463b      	mov	r3, r7
 8000602:	4611      	mov	r1, r2
 8000604:	4618      	mov	r0, r3
 8000606:	f000 fb1f 	bl	8000c48 <SX1272_Transmit>
		  lastSend = HAL_GetTick();
 800060a:	f000 fc49 	bl	8000ea0 <HAL_GetTick>
 800060e:	4603      	mov	r3, r0
 8000610:	4a08      	ldr	r2, [pc, #32]	@ (8000634 <main+0xb0>)
 8000612:	6013      	str	r3, [r2, #0]
	  }

	  if (SX1272_ReadReg(REG_IRQ_FLAGS) & IRQ_RX_DONE_MASK)
 8000614:	2012      	movs	r0, #18
 8000616:	f000 fa41 	bl	8000a9c <SX1272_ReadReg>
 800061a:	4603      	mov	r3, r0
 800061c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000620:	2b00      	cmp	r3, #0
 8000622:	d0dd      	beq.n	80005e0 <main+0x5c>
	  {
	      //printf("POLLED RX DONE\r\n");
	      SX1272_HandleDIO0();
 8000624:	f000 fb4a 	bl	8000cbc <SX1272_HandleDIO0>
  {
 8000628:	e7da      	b.n	80005e0 <main+0x5c>
 800062a:	bf00      	nop
 800062c:	200000b0 	.word	0x200000b0
 8000630:	080033a0 	.word	0x080033a0
 8000634:	200000b4 	.word	0x200000b4

08000638 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b094      	sub	sp, #80	@ 0x50
 800063c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800063e:	f107 0318 	add.w	r3, r7, #24
 8000642:	2238      	movs	r2, #56	@ 0x38
 8000644:	2100      	movs	r1, #0
 8000646:	4618      	mov	r0, r3
 8000648:	f002 fe72 	bl	8003330 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800064c:	1d3b      	adds	r3, r7, #4
 800064e:	2200      	movs	r2, #0
 8000650:	601a      	str	r2, [r3, #0]
 8000652:	605a      	str	r2, [r3, #4]
 8000654:	609a      	str	r2, [r3, #8]
 8000656:	60da      	str	r2, [r3, #12]
 8000658:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800065a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800065e:	f001 f869 	bl	8001734 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000662:	2302      	movs	r3, #2
 8000664:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000666:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800066a:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800066c:	2340      	movs	r3, #64	@ 0x40
 800066e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000670:	2302      	movs	r3, #2
 8000672:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000674:	2302      	movs	r3, #2
 8000676:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000678:	2301      	movs	r3, #1
 800067a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 21;
 800067c:	2315      	movs	r3, #21
 800067e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000680:	2302      	movs	r3, #2
 8000682:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000684:	2302      	movs	r3, #2
 8000686:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000688:	2302      	movs	r3, #2
 800068a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800068c:	f107 0318 	add.w	r3, r7, #24
 8000690:	4618      	mov	r0, r3
 8000692:	f001 f903 	bl	800189c <HAL_RCC_OscConfig>
 8000696:	4603      	mov	r3, r0
 8000698:	2b00      	cmp	r3, #0
 800069a:	d001      	beq.n	80006a0 <SystemClock_Config+0x68>
  {
    Error_Handler();
 800069c:	f000 f8da 	bl	8000854 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006a0:	230f      	movs	r3, #15
 80006a2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006a4:	2303      	movs	r3, #3
 80006a6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 80006a8:	2380      	movs	r3, #128	@ 0x80
 80006aa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006ac:	2300      	movs	r3, #0
 80006ae:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006b0:	2300      	movs	r3, #0
 80006b2:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006b4:	1d3b      	adds	r3, r7, #4
 80006b6:	2102      	movs	r1, #2
 80006b8:	4618      	mov	r0, r3
 80006ba:	f001 fc01 	bl	8001ec0 <HAL_RCC_ClockConfig>
 80006be:	4603      	mov	r3, r0
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d001      	beq.n	80006c8 <SystemClock_Config+0x90>
  {
    Error_Handler();
 80006c4:	f000 f8c6 	bl	8000854 <Error_Handler>
  }
}
 80006c8:	bf00      	nop
 80006ca:	3750      	adds	r7, #80	@ 0x50
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bd80      	pop	{r7, pc}

080006d0 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80006d4:	4b0d      	ldr	r3, [pc, #52]	@ (800070c <MX_CRC_Init+0x3c>)
 80006d6:	4a0e      	ldr	r2, [pc, #56]	@ (8000710 <MX_CRC_Init+0x40>)
 80006d8:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 80006da:	4b0c      	ldr	r3, [pc, #48]	@ (800070c <MX_CRC_Init+0x3c>)
 80006dc:	2200      	movs	r2, #0
 80006de:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 80006e0:	4b0a      	ldr	r3, [pc, #40]	@ (800070c <MX_CRC_Init+0x3c>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80006e6:	4b09      	ldr	r3, [pc, #36]	@ (800070c <MX_CRC_Init+0x3c>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80006ec:	4b07      	ldr	r3, [pc, #28]	@ (800070c <MX_CRC_Init+0x3c>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80006f2:	4b06      	ldr	r3, [pc, #24]	@ (800070c <MX_CRC_Init+0x3c>)
 80006f4:	2201      	movs	r2, #1
 80006f6:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80006f8:	4804      	ldr	r0, [pc, #16]	@ (800070c <MX_CRC_Init+0x3c>)
 80006fa:	f000 fd0f 	bl	800111c <HAL_CRC_Init>
 80006fe:	4603      	mov	r3, r0
 8000700:	2b00      	cmp	r3, #0
 8000702:	d001      	beq.n	8000708 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000704:	f000 f8a6 	bl	8000854 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000708:	bf00      	nop
 800070a:	bd80      	pop	{r7, pc}
 800070c:	20000028 	.word	0x20000028
 8000710:	40023000 	.word	0x40023000

08000714 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000718:	4b1b      	ldr	r3, [pc, #108]	@ (8000788 <MX_SPI1_Init+0x74>)
 800071a:	4a1c      	ldr	r2, [pc, #112]	@ (800078c <MX_SPI1_Init+0x78>)
 800071c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800071e:	4b1a      	ldr	r3, [pc, #104]	@ (8000788 <MX_SPI1_Init+0x74>)
 8000720:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000724:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000726:	4b18      	ldr	r3, [pc, #96]	@ (8000788 <MX_SPI1_Init+0x74>)
 8000728:	2200      	movs	r2, #0
 800072a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800072c:	4b16      	ldr	r3, [pc, #88]	@ (8000788 <MX_SPI1_Init+0x74>)
 800072e:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8000732:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000734:	4b14      	ldr	r3, [pc, #80]	@ (8000788 <MX_SPI1_Init+0x74>)
 8000736:	2200      	movs	r2, #0
 8000738:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800073a:	4b13      	ldr	r3, [pc, #76]	@ (8000788 <MX_SPI1_Init+0x74>)
 800073c:	2200      	movs	r2, #0
 800073e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000740:	4b11      	ldr	r3, [pc, #68]	@ (8000788 <MX_SPI1_Init+0x74>)
 8000742:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000746:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000748:	4b0f      	ldr	r3, [pc, #60]	@ (8000788 <MX_SPI1_Init+0x74>)
 800074a:	2220      	movs	r2, #32
 800074c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800074e:	4b0e      	ldr	r3, [pc, #56]	@ (8000788 <MX_SPI1_Init+0x74>)
 8000750:	2200      	movs	r2, #0
 8000752:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000754:	4b0c      	ldr	r3, [pc, #48]	@ (8000788 <MX_SPI1_Init+0x74>)
 8000756:	2200      	movs	r2, #0
 8000758:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800075a:	4b0b      	ldr	r3, [pc, #44]	@ (8000788 <MX_SPI1_Init+0x74>)
 800075c:	2200      	movs	r2, #0
 800075e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000760:	4b09      	ldr	r3, [pc, #36]	@ (8000788 <MX_SPI1_Init+0x74>)
 8000762:	2207      	movs	r2, #7
 8000764:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000766:	4b08      	ldr	r3, [pc, #32]	@ (8000788 <MX_SPI1_Init+0x74>)
 8000768:	2200      	movs	r2, #0
 800076a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800076c:	4b06      	ldr	r3, [pc, #24]	@ (8000788 <MX_SPI1_Init+0x74>)
 800076e:	2200      	movs	r2, #0
 8000770:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000772:	4805      	ldr	r0, [pc, #20]	@ (8000788 <MX_SPI1_Init+0x74>)
 8000774:	f001 fd88 	bl	8002288 <HAL_SPI_Init>
 8000778:	4603      	mov	r3, r0
 800077a:	2b00      	cmp	r3, #0
 800077c:	d001      	beq.n	8000782 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800077e:	f000 f869 	bl	8000854 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000782:	bf00      	nop
 8000784:	bd80      	pop	{r7, pc}
 8000786:	bf00      	nop
 8000788:	2000004c 	.word	0x2000004c
 800078c:	40013000 	.word	0x40013000

08000790 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b088      	sub	sp, #32
 8000794:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000796:	f107 030c 	add.w	r3, r7, #12
 800079a:	2200      	movs	r2, #0
 800079c:	601a      	str	r2, [r3, #0]
 800079e:	605a      	str	r2, [r3, #4]
 80007a0:	609a      	str	r2, [r3, #8]
 80007a2:	60da      	str	r2, [r3, #12]
 80007a4:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80007a6:	4b29      	ldr	r3, [pc, #164]	@ (800084c <MX_GPIO_Init+0xbc>)
 80007a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007aa:	4a28      	ldr	r2, [pc, #160]	@ (800084c <MX_GPIO_Init+0xbc>)
 80007ac:	f043 0320 	orr.w	r3, r3, #32
 80007b0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007b2:	4b26      	ldr	r3, [pc, #152]	@ (800084c <MX_GPIO_Init+0xbc>)
 80007b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007b6:	f003 0320 	and.w	r3, r3, #32
 80007ba:	60bb      	str	r3, [r7, #8]
 80007bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007be:	4b23      	ldr	r3, [pc, #140]	@ (800084c <MX_GPIO_Init+0xbc>)
 80007c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007c2:	4a22      	ldr	r2, [pc, #136]	@ (800084c <MX_GPIO_Init+0xbc>)
 80007c4:	f043 0301 	orr.w	r3, r3, #1
 80007c8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007ca:	4b20      	ldr	r3, [pc, #128]	@ (800084c <MX_GPIO_Init+0xbc>)
 80007cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007ce:	f003 0301 	and.w	r3, r3, #1
 80007d2:	607b      	str	r3, [r7, #4]
 80007d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007d6:	4b1d      	ldr	r3, [pc, #116]	@ (800084c <MX_GPIO_Init+0xbc>)
 80007d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007da:	4a1c      	ldr	r2, [pc, #112]	@ (800084c <MX_GPIO_Init+0xbc>)
 80007dc:	f043 0302 	orr.w	r3, r3, #2
 80007e0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007e2:	4b1a      	ldr	r3, [pc, #104]	@ (800084c <MX_GPIO_Init+0xbc>)
 80007e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007e6:	f003 0302 	and.w	r3, r3, #2
 80007ea:	603b      	str	r3, [r7, #0]
 80007ec:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_SET);
 80007ee:	2201      	movs	r2, #1
 80007f0:	2118      	movs	r1, #24
 80007f2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007f6:	f000 ff6d 	bl	80016d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA3 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 80007fa:	2318      	movs	r3, #24
 80007fc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007fe:	2301      	movs	r3, #1
 8000800:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000802:	2300      	movs	r3, #0
 8000804:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000806:	2302      	movs	r3, #2
 8000808:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800080a:	f107 030c 	add.w	r3, r7, #12
 800080e:	4619      	mov	r1, r3
 8000810:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000814:	f000 fddc 	bl	80013d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000818:	2301      	movs	r3, #1
 800081a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800081c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000820:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000822:	2302      	movs	r3, #2
 8000824:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000826:	f107 030c 	add.w	r3, r7, #12
 800082a:	4619      	mov	r1, r3
 800082c:	4808      	ldr	r0, [pc, #32]	@ (8000850 <MX_GPIO_Init+0xc0>)
 800082e:	f000 fdcf 	bl	80013d0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000832:	2200      	movs	r2, #0
 8000834:	2100      	movs	r1, #0
 8000836:	2006      	movs	r0, #6
 8000838:	f000 fc3b 	bl	80010b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800083c:	2006      	movs	r0, #6
 800083e:	f000 fc52 	bl	80010e6 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000842:	bf00      	nop
 8000844:	3720      	adds	r7, #32
 8000846:	46bd      	mov	sp, r7
 8000848:	bd80      	pop	{r7, pc}
 800084a:	bf00      	nop
 800084c:	40021000 	.word	0x40021000
 8000850:	48000400 	.word	0x48000400

08000854 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000854:	b480      	push	{r7}
 8000856:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000858:	b672      	cpsid	i
}
 800085a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800085c:	bf00      	nop
 800085e:	e7fd      	b.n	800085c <Error_Handler+0x8>

08000860 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b082      	sub	sp, #8
 8000864:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000866:	4b0f      	ldr	r3, [pc, #60]	@ (80008a4 <HAL_MspInit+0x44>)
 8000868:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800086a:	4a0e      	ldr	r2, [pc, #56]	@ (80008a4 <HAL_MspInit+0x44>)
 800086c:	f043 0301 	orr.w	r3, r3, #1
 8000870:	6613      	str	r3, [r2, #96]	@ 0x60
 8000872:	4b0c      	ldr	r3, [pc, #48]	@ (80008a4 <HAL_MspInit+0x44>)
 8000874:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000876:	f003 0301 	and.w	r3, r3, #1
 800087a:	607b      	str	r3, [r7, #4]
 800087c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800087e:	4b09      	ldr	r3, [pc, #36]	@ (80008a4 <HAL_MspInit+0x44>)
 8000880:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000882:	4a08      	ldr	r2, [pc, #32]	@ (80008a4 <HAL_MspInit+0x44>)
 8000884:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000888:	6593      	str	r3, [r2, #88]	@ 0x58
 800088a:	4b06      	ldr	r3, [pc, #24]	@ (80008a4 <HAL_MspInit+0x44>)
 800088c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800088e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000892:	603b      	str	r3, [r7, #0]
 8000894:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000896:	f000 fff1 	bl	800187c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800089a:	bf00      	nop
 800089c:	3708      	adds	r7, #8
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	bf00      	nop
 80008a4:	40021000 	.word	0x40021000

080008a8 <HAL_CRC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcrc: CRC handle pointer
  * @retval None
  */
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80008a8:	b480      	push	{r7}
 80008aa:	b085      	sub	sp, #20
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	4a0a      	ldr	r2, [pc, #40]	@ (80008e0 <HAL_CRC_MspInit+0x38>)
 80008b6:	4293      	cmp	r3, r2
 80008b8:	d10b      	bne.n	80008d2 <HAL_CRC_MspInit+0x2a>
  {
    /* USER CODE BEGIN CRC_MspInit 0 */

    /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80008ba:	4b0a      	ldr	r3, [pc, #40]	@ (80008e4 <HAL_CRC_MspInit+0x3c>)
 80008bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80008be:	4a09      	ldr	r2, [pc, #36]	@ (80008e4 <HAL_CRC_MspInit+0x3c>)
 80008c0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80008c4:	6493      	str	r3, [r2, #72]	@ 0x48
 80008c6:	4b07      	ldr	r3, [pc, #28]	@ (80008e4 <HAL_CRC_MspInit+0x3c>)
 80008c8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80008ca:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80008ce:	60fb      	str	r3, [r7, #12]
 80008d0:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END CRC_MspInit 1 */

  }

}
 80008d2:	bf00      	nop
 80008d4:	3714      	adds	r7, #20
 80008d6:	46bd      	mov	sp, r7
 80008d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008dc:	4770      	bx	lr
 80008de:	bf00      	nop
 80008e0:	40023000 	.word	0x40023000
 80008e4:	40021000 	.word	0x40021000

080008e8 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b08a      	sub	sp, #40	@ 0x28
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008f0:	f107 0314 	add.w	r3, r7, #20
 80008f4:	2200      	movs	r2, #0
 80008f6:	601a      	str	r2, [r3, #0]
 80008f8:	605a      	str	r2, [r3, #4]
 80008fa:	609a      	str	r2, [r3, #8]
 80008fc:	60da      	str	r2, [r3, #12]
 80008fe:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	4a1b      	ldr	r2, [pc, #108]	@ (8000974 <HAL_SPI_MspInit+0x8c>)
 8000906:	4293      	cmp	r3, r2
 8000908:	d130      	bne.n	800096c <HAL_SPI_MspInit+0x84>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800090a:	4b1b      	ldr	r3, [pc, #108]	@ (8000978 <HAL_SPI_MspInit+0x90>)
 800090c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800090e:	4a1a      	ldr	r2, [pc, #104]	@ (8000978 <HAL_SPI_MspInit+0x90>)
 8000910:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000914:	6613      	str	r3, [r2, #96]	@ 0x60
 8000916:	4b18      	ldr	r3, [pc, #96]	@ (8000978 <HAL_SPI_MspInit+0x90>)
 8000918:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800091a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800091e:	613b      	str	r3, [r7, #16]
 8000920:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000922:	4b15      	ldr	r3, [pc, #84]	@ (8000978 <HAL_SPI_MspInit+0x90>)
 8000924:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000926:	4a14      	ldr	r2, [pc, #80]	@ (8000978 <HAL_SPI_MspInit+0x90>)
 8000928:	f043 0301 	orr.w	r3, r3, #1
 800092c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800092e:	4b12      	ldr	r3, [pc, #72]	@ (8000978 <HAL_SPI_MspInit+0x90>)
 8000930:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000932:	f003 0301 	and.w	r3, r3, #1
 8000936:	60fb      	str	r3, [r7, #12]
 8000938:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800093a:	23e0      	movs	r3, #224	@ 0xe0
 800093c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800093e:	2302      	movs	r3, #2
 8000940:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000942:	2300      	movs	r3, #0
 8000944:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000946:	2300      	movs	r3, #0
 8000948:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800094a:	2305      	movs	r3, #5
 800094c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800094e:	f107 0314 	add.w	r3, r7, #20
 8000952:	4619      	mov	r1, r3
 8000954:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000958:	f000 fd3a 	bl	80013d0 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 800095c:	2200      	movs	r2, #0
 800095e:	2100      	movs	r1, #0
 8000960:	2023      	movs	r0, #35	@ 0x23
 8000962:	f000 fba6 	bl	80010b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8000966:	2023      	movs	r0, #35	@ 0x23
 8000968:	f000 fbbd 	bl	80010e6 <HAL_NVIC_EnableIRQ>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 800096c:	bf00      	nop
 800096e:	3728      	adds	r7, #40	@ 0x28
 8000970:	46bd      	mov	sp, r7
 8000972:	bd80      	pop	{r7, pc}
 8000974:	40013000 	.word	0x40013000
 8000978:	40021000 	.word	0x40021000

0800097c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800097c:	b480      	push	{r7}
 800097e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000980:	bf00      	nop
 8000982:	e7fd      	b.n	8000980 <NMI_Handler+0x4>

08000984 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000984:	b480      	push	{r7}
 8000986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000988:	bf00      	nop
 800098a:	e7fd      	b.n	8000988 <HardFault_Handler+0x4>

0800098c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800098c:	b480      	push	{r7}
 800098e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000990:	bf00      	nop
 8000992:	e7fd      	b.n	8000990 <MemManage_Handler+0x4>

08000994 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000994:	b480      	push	{r7}
 8000996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000998:	bf00      	nop
 800099a:	e7fd      	b.n	8000998 <BusFault_Handler+0x4>

0800099c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800099c:	b480      	push	{r7}
 800099e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009a0:	bf00      	nop
 80009a2:	e7fd      	b.n	80009a0 <UsageFault_Handler+0x4>

080009a4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009a4:	b480      	push	{r7}
 80009a6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009a8:	bf00      	nop
 80009aa:	46bd      	mov	sp, r7
 80009ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b0:	4770      	bx	lr

080009b2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009b2:	b480      	push	{r7}
 80009b4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009b6:	bf00      	nop
 80009b8:	46bd      	mov	sp, r7
 80009ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009be:	4770      	bx	lr

080009c0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009c0:	b480      	push	{r7}
 80009c2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009c4:	bf00      	nop
 80009c6:	46bd      	mov	sp, r7
 80009c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009cc:	4770      	bx	lr

080009ce <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009ce:	b580      	push	{r7, lr}
 80009d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009d2:	f000 fa53 	bl	8000e7c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009d6:	bf00      	nop
 80009d8:	bd80      	pop	{r7, pc}

080009da <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80009da:	b580      	push	{r7, lr}
 80009dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80009de:	2001      	movs	r0, #1
 80009e0:	f000 fe90 	bl	8001704 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80009e4:	bf00      	nop
 80009e6:	bd80      	pop	{r7, pc}

080009e8 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80009ec:	4802      	ldr	r0, [pc, #8]	@ (80009f8 <SPI1_IRQHandler+0x10>)
 80009ee:	f002 f9c3 	bl	8002d78 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80009f2:	bf00      	nop
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	2000004c 	.word	0x2000004c

080009fc <SX1272_Select>:
#include <string.h>

uint8_t SX1272_RxBuffer[256];
volatile uint8_t SX1272_RxLength = 0;

static void SX1272_Select(void)   { HAL_GPIO_WritePin(SX1272_NSS_PORT, SX1272_NSS_PIN, GPIO_PIN_RESET); }
 80009fc:	b580      	push	{r7, lr}
 80009fe:	af00      	add	r7, sp, #0
 8000a00:	2200      	movs	r2, #0
 8000a02:	2110      	movs	r1, #16
 8000a04:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a08:	f000 fe64 	bl	80016d4 <HAL_GPIO_WritePin>
 8000a0c:	bf00      	nop
 8000a0e:	bd80      	pop	{r7, pc}

08000a10 <SX1272_Unselect>:
static void SX1272_Unselect(void) { HAL_GPIO_WritePin(SX1272_NSS_PORT, SX1272_NSS_PIN, GPIO_PIN_SET); }
 8000a10:	b580      	push	{r7, lr}
 8000a12:	af00      	add	r7, sp, #0
 8000a14:	2201      	movs	r2, #1
 8000a16:	2110      	movs	r1, #16
 8000a18:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a1c:	f000 fe5a 	bl	80016d4 <HAL_GPIO_WritePin>
 8000a20:	bf00      	nop
 8000a22:	bd80      	pop	{r7, pc}

08000a24 <SX1272_Reset>:

void SX1272_Reset(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(SX1272_RESET_PORT, SX1272_RESET_PIN, GPIO_PIN_RESET);
 8000a28:	2200      	movs	r2, #0
 8000a2a:	2108      	movs	r1, #8
 8000a2c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a30:	f000 fe50 	bl	80016d4 <HAL_GPIO_WritePin>
    HAL_Delay(1); // >100 µs
 8000a34:	2001      	movs	r0, #1
 8000a36:	f000 fa3f 	bl	8000eb8 <HAL_Delay>
    HAL_GPIO_WritePin(SX1272_RESET_PORT, SX1272_RESET_PIN, GPIO_PIN_SET);
 8000a3a:	2201      	movs	r2, #1
 8000a3c:	2108      	movs	r1, #8
 8000a3e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a42:	f000 fe47 	bl	80016d4 <HAL_GPIO_WritePin>
    HAL_Delay(5); // >5 ms
 8000a46:	2005      	movs	r0, #5
 8000a48:	f000 fa36 	bl	8000eb8 <HAL_Delay>
}
 8000a4c:	bf00      	nop
 8000a4e:	bd80      	pop	{r7, pc}

08000a50 <SX1272_WriteReg>:

void SX1272_WriteReg(uint8_t addr, uint8_t data)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b082      	sub	sp, #8
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	4603      	mov	r3, r0
 8000a58:	460a      	mov	r2, r1
 8000a5a:	71fb      	strb	r3, [r7, #7]
 8000a5c:	4613      	mov	r3, r2
 8000a5e:	71bb      	strb	r3, [r7, #6]
    addr |= 0x80; // MSB=1 for write
 8000a60:	79fb      	ldrb	r3, [r7, #7]
 8000a62:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000a66:	b2db      	uxtb	r3, r3
 8000a68:	71fb      	strb	r3, [r7, #7]
    SX1272_Select();
 8000a6a:	f7ff ffc7 	bl	80009fc <SX1272_Select>
    HAL_SPI_Transmit(&hspi1, &addr, 1, HAL_MAX_DELAY);
 8000a6e:	1df9      	adds	r1, r7, #7
 8000a70:	f04f 33ff 	mov.w	r3, #4294967295
 8000a74:	2201      	movs	r2, #1
 8000a76:	4808      	ldr	r0, [pc, #32]	@ (8000a98 <SX1272_WriteReg+0x48>)
 8000a78:	f001 fcb1 	bl	80023de <HAL_SPI_Transmit>
    HAL_SPI_Transmit(&hspi1, &data, 1, HAL_MAX_DELAY);
 8000a7c:	1db9      	adds	r1, r7, #6
 8000a7e:	f04f 33ff 	mov.w	r3, #4294967295
 8000a82:	2201      	movs	r2, #1
 8000a84:	4804      	ldr	r0, [pc, #16]	@ (8000a98 <SX1272_WriteReg+0x48>)
 8000a86:	f001 fcaa 	bl	80023de <HAL_SPI_Transmit>
    SX1272_Unselect();
 8000a8a:	f7ff ffc1 	bl	8000a10 <SX1272_Unselect>
}
 8000a8e:	bf00      	nop
 8000a90:	3708      	adds	r7, #8
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	2000004c 	.word	0x2000004c

08000a9c <SX1272_ReadReg>:

uint8_t SX1272_ReadReg(uint8_t addr)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b084      	sub	sp, #16
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    SX1272_Select();
 8000aa6:	f7ff ffa9 	bl	80009fc <SX1272_Select>
    HAL_SPI_Transmit(&hspi1, &addr, 1, HAL_MAX_DELAY);
 8000aaa:	1df9      	adds	r1, r7, #7
 8000aac:	f04f 33ff 	mov.w	r3, #4294967295
 8000ab0:	2201      	movs	r2, #1
 8000ab2:	4809      	ldr	r0, [pc, #36]	@ (8000ad8 <SX1272_ReadReg+0x3c>)
 8000ab4:	f001 fc93 	bl	80023de <HAL_SPI_Transmit>
    HAL_SPI_Receive(&hspi1, &value, 1, HAL_MAX_DELAY);
 8000ab8:	f107 010f 	add.w	r1, r7, #15
 8000abc:	f04f 33ff 	mov.w	r3, #4294967295
 8000ac0:	2201      	movs	r2, #1
 8000ac2:	4805      	ldr	r0, [pc, #20]	@ (8000ad8 <SX1272_ReadReg+0x3c>)
 8000ac4:	f001 fe01 	bl	80026ca <HAL_SPI_Receive>
    SX1272_Unselect();
 8000ac8:	f7ff ffa2 	bl	8000a10 <SX1272_Unselect>
    return value;
 8000acc:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ace:	4618      	mov	r0, r3
 8000ad0:	3710      	adds	r7, #16
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	2000004c 	.word	0x2000004c

08000adc <SX1272_WriteBuffer>:

void SX1272_WriteBuffer(uint8_t addr, uint8_t *buffer, uint8_t size)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b082      	sub	sp, #8
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	6039      	str	r1, [r7, #0]
 8000ae6:	71fb      	strb	r3, [r7, #7]
 8000ae8:	4613      	mov	r3, r2
 8000aea:	71bb      	strb	r3, [r7, #6]
    addr |= 0x80;
 8000aec:	79fb      	ldrb	r3, [r7, #7]
 8000aee:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000af2:	b2db      	uxtb	r3, r3
 8000af4:	71fb      	strb	r3, [r7, #7]
    SX1272_Select();
 8000af6:	f7ff ff81 	bl	80009fc <SX1272_Select>
    HAL_SPI_Transmit(&hspi1, &addr, 1, HAL_MAX_DELAY);
 8000afa:	1df9      	adds	r1, r7, #7
 8000afc:	f04f 33ff 	mov.w	r3, #4294967295
 8000b00:	2201      	movs	r2, #1
 8000b02:	4808      	ldr	r0, [pc, #32]	@ (8000b24 <SX1272_WriteBuffer+0x48>)
 8000b04:	f001 fc6b 	bl	80023de <HAL_SPI_Transmit>
    HAL_SPI_Transmit(&hspi1, buffer, size, HAL_MAX_DELAY);
 8000b08:	79bb      	ldrb	r3, [r7, #6]
 8000b0a:	b29a      	uxth	r2, r3
 8000b0c:	f04f 33ff 	mov.w	r3, #4294967295
 8000b10:	6839      	ldr	r1, [r7, #0]
 8000b12:	4804      	ldr	r0, [pc, #16]	@ (8000b24 <SX1272_WriteBuffer+0x48>)
 8000b14:	f001 fc63 	bl	80023de <HAL_SPI_Transmit>
    SX1272_Unselect();
 8000b18:	f7ff ff7a 	bl	8000a10 <SX1272_Unselect>
}
 8000b1c:	bf00      	nop
 8000b1e:	3708      	adds	r7, #8
 8000b20:	46bd      	mov	sp, r7
 8000b22:	bd80      	pop	{r7, pc}
 8000b24:	2000004c 	.word	0x2000004c

08000b28 <SX1272_ReadBuffer>:

void SX1272_ReadBuffer(uint8_t addr, uint8_t *buffer, uint8_t size)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b082      	sub	sp, #8
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	4603      	mov	r3, r0
 8000b30:	6039      	str	r1, [r7, #0]
 8000b32:	71fb      	strb	r3, [r7, #7]
 8000b34:	4613      	mov	r3, r2
 8000b36:	71bb      	strb	r3, [r7, #6]
    SX1272_Select();
 8000b38:	f7ff ff60 	bl	80009fc <SX1272_Select>
    HAL_SPI_Transmit(&hspi1, &addr, 1, HAL_MAX_DELAY);
 8000b3c:	1df9      	adds	r1, r7, #7
 8000b3e:	f04f 33ff 	mov.w	r3, #4294967295
 8000b42:	2201      	movs	r2, #1
 8000b44:	4808      	ldr	r0, [pc, #32]	@ (8000b68 <SX1272_ReadBuffer+0x40>)
 8000b46:	f001 fc4a 	bl	80023de <HAL_SPI_Transmit>
    HAL_SPI_Receive(&hspi1, buffer, size, HAL_MAX_DELAY);
 8000b4a:	79bb      	ldrb	r3, [r7, #6]
 8000b4c:	b29a      	uxth	r2, r3
 8000b4e:	f04f 33ff 	mov.w	r3, #4294967295
 8000b52:	6839      	ldr	r1, [r7, #0]
 8000b54:	4804      	ldr	r0, [pc, #16]	@ (8000b68 <SX1272_ReadBuffer+0x40>)
 8000b56:	f001 fdb8 	bl	80026ca <HAL_SPI_Receive>
    SX1272_Unselect();
 8000b5a:	f7ff ff59 	bl	8000a10 <SX1272_Unselect>
}
 8000b5e:	bf00      	nop
 8000b60:	3708      	adds	r7, #8
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	bf00      	nop
 8000b68:	2000004c 	.word	0x2000004c

08000b6c <SX1272_SetFrequency>:

void SX1272_SetFrequency(uint32_t freq) {
 8000b6c:	b5b0      	push	{r4, r5, r7, lr}
 8000b6e:	b084      	sub	sp, #16
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
    // Calculate FRF register values (SX1272 uses F_XOSC = 32 MHz)
    // Formula: FRF = (freq * 2^19) / 32,000,000
    uint64_t frf = ((uint64_t)freq << 19) / 32000000;
 8000b74:	6879      	ldr	r1, [r7, #4]
 8000b76:	2000      	movs	r0, #0
 8000b78:	460a      	mov	r2, r1
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	0b55      	lsrs	r5, r2, #13
 8000b7e:	04d4      	lsls	r4, r2, #19
 8000b80:	4a18      	ldr	r2, [pc, #96]	@ (8000be4 <SX1272_SetFrequency+0x78>)
 8000b82:	f04f 0300 	mov.w	r3, #0
 8000b86:	4620      	mov	r0, r4
 8000b88:	4629      	mov	r1, r5
 8000b8a:	f7ff fb4d 	bl	8000228 <__aeabi_uldivmod>
 8000b8e:	4602      	mov	r2, r0
 8000b90:	460b      	mov	r3, r1
 8000b92:	e9c7 2302 	strd	r2, r3, [r7, #8]

    // Write to frequency registers
    SX1272_WriteReg(REG_FRF_MSB, (frf >> 16) & 0xFF);  // MSB
 8000b96:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000b9a:	f04f 0200 	mov.w	r2, #0
 8000b9e:	f04f 0300 	mov.w	r3, #0
 8000ba2:	0c02      	lsrs	r2, r0, #16
 8000ba4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ba8:	0c0b      	lsrs	r3, r1, #16
 8000baa:	b2d3      	uxtb	r3, r2
 8000bac:	4619      	mov	r1, r3
 8000bae:	2006      	movs	r0, #6
 8000bb0:	f7ff ff4e 	bl	8000a50 <SX1272_WriteReg>
    SX1272_WriteReg(REG_FRF_MID, (frf >> 8)  & 0xFF);  // Middle byte
 8000bb4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000bb8:	f04f 0200 	mov.w	r2, #0
 8000bbc:	f04f 0300 	mov.w	r3, #0
 8000bc0:	0a02      	lsrs	r2, r0, #8
 8000bc2:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8000bc6:	0a0b      	lsrs	r3, r1, #8
 8000bc8:	b2d3      	uxtb	r3, r2
 8000bca:	4619      	mov	r1, r3
 8000bcc:	2007      	movs	r0, #7
 8000bce:	f7ff ff3f 	bl	8000a50 <SX1272_WriteReg>
    SX1272_WriteReg(REG_FRF_LSB, frf & 0xFF);          // LSB
 8000bd2:	7a3b      	ldrb	r3, [r7, #8]
 8000bd4:	4619      	mov	r1, r3
 8000bd6:	2008      	movs	r0, #8
 8000bd8:	f7ff ff3a 	bl	8000a50 <SX1272_WriteReg>
}
 8000bdc:	bf00      	nop
 8000bde:	3710      	adds	r7, #16
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bdb0      	pop	{r4, r5, r7, pc}
 8000be4:	01e84800 	.word	0x01e84800

08000be8 <SX1272_SetupLora>:

void SX1272_SetupLora(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	af00      	add	r7, sp, #0
    // Sleep then LoRa mode
    SX1272_WriteReg(REG_OP_MODE, SX1272_MODE_SLEEP | SX1272_MODE_LORA);
 8000bec:	2180      	movs	r1, #128	@ 0x80
 8000bee:	2001      	movs	r0, #1
 8000bf0:	f7ff ff2e 	bl	8000a50 <SX1272_WriteReg>
    HAL_Delay(10);
 8000bf4:	200a      	movs	r0, #10
 8000bf6:	f000 f95f 	bl	8000eb8 <HAL_Delay>

    // Standby
    SX1272_WriteReg(REG_OP_MODE, SX1272_MODE_STDBY | SX1272_MODE_LORA);
 8000bfa:	2181      	movs	r1, #129	@ 0x81
 8000bfc:	2001      	movs	r0, #1
 8000bfe:	f7ff ff27 	bl	8000a50 <SX1272_WriteReg>

    SX1272_SetFrequency(915000000);
 8000c02:	480c      	ldr	r0, [pc, #48]	@ (8000c34 <SX1272_SetupLora+0x4c>)
 8000c04:	f7ff ffb2 	bl	8000b6c <SX1272_SetFrequency>

    // Base addresses
    SX1272_WriteReg(REG_FIFO_TX_BASE_ADDR, 0x00);
 8000c08:	2100      	movs	r1, #0
 8000c0a:	200e      	movs	r0, #14
 8000c0c:	f7ff ff20 	bl	8000a50 <SX1272_WriteReg>
    SX1272_WriteReg(REG_FIFO_RX_BASE_ADDR, 0x00);
 8000c10:	2100      	movs	r1, #0
 8000c12:	200f      	movs	r0, #15
 8000c14:	f7ff ff1c 	bl	8000a50 <SX1272_WriteReg>

    // Modem config (BW=125kHz, CR=4/5, SF=7)
    SX1272_WriteReg(REG_MODEM_CONFIG1, 0x72);
 8000c18:	2172      	movs	r1, #114	@ 0x72
 8000c1a:	201d      	movs	r0, #29
 8000c1c:	f7ff ff18 	bl	8000a50 <SX1272_WriteReg>
    SX1272_WriteReg(REG_MODEM_CONFIG2, 0x74);
 8000c20:	2174      	movs	r1, #116	@ 0x74
 8000c22:	201e      	movs	r0, #30
 8000c24:	f7ff ff14 	bl	8000a50 <SX1272_WriteReg>


    // Map DIO0: RxDone=00, TxDone=01 depending on mode
    SX1272_WriteReg(REG_DIO_MAPPING1, 0x00);
 8000c28:	2100      	movs	r1, #0
 8000c2a:	2040      	movs	r0, #64	@ 0x40
 8000c2c:	f7ff ff10 	bl	8000a50 <SX1272_WriteReg>
}
 8000c30:	bf00      	nop
 8000c32:	bd80      	pop	{r7, pc}
 8000c34:	3689cac0 	.word	0x3689cac0

08000c38 <SX1272_Init>:

void SX1272_Init(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	af00      	add	r7, sp, #0
    SX1272_Reset();
 8000c3c:	f7ff fef2 	bl	8000a24 <SX1272_Reset>
    SX1272_SetupLora();
 8000c40:	f7ff ffd2 	bl	8000be8 <SX1272_SetupLora>
}
 8000c44:	bf00      	nop
 8000c46:	bd80      	pop	{r7, pc}

08000c48 <SX1272_Transmit>:

void SX1272_Transmit(uint8_t *data, uint8_t size)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b082      	sub	sp, #8
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
 8000c50:	460b      	mov	r3, r1
 8000c52:	70fb      	strb	r3, [r7, #3]
    // Map DIO0 to TxDone
    SX1272_WriteReg(REG_DIO_MAPPING1, 0x40);
 8000c54:	2140      	movs	r1, #64	@ 0x40
 8000c56:	2040      	movs	r0, #64	@ 0x40
 8000c58:	f7ff fefa 	bl	8000a50 <SX1272_WriteReg>

    SX1272_WriteReg(REG_OP_MODE, SX1272_MODE_STDBY | SX1272_MODE_LORA);
 8000c5c:	2181      	movs	r1, #129	@ 0x81
 8000c5e:	2001      	movs	r0, #1
 8000c60:	f7ff fef6 	bl	8000a50 <SX1272_WriteReg>
    SX1272_WriteReg(REG_FIFO_ADDR_PTR, 0x00);
 8000c64:	2100      	movs	r1, #0
 8000c66:	200d      	movs	r0, #13
 8000c68:	f7ff fef2 	bl	8000a50 <SX1272_WriteReg>
    SX1272_WriteBuffer(REG_FIFO, data, size);
 8000c6c:	78fb      	ldrb	r3, [r7, #3]
 8000c6e:	461a      	mov	r2, r3
 8000c70:	6879      	ldr	r1, [r7, #4]
 8000c72:	2000      	movs	r0, #0
 8000c74:	f7ff ff32 	bl	8000adc <SX1272_WriteBuffer>
    SX1272_WriteReg(REG_PAYLOAD_LENGTH, size);
 8000c78:	78fb      	ldrb	r3, [r7, #3]
 8000c7a:	4619      	mov	r1, r3
 8000c7c:	2022      	movs	r0, #34	@ 0x22
 8000c7e:	f7ff fee7 	bl	8000a50 <SX1272_WriteReg>

    SX1272_WriteReg(REG_IRQ_FLAGS, 0xFF); // Clear all IRQs
 8000c82:	21ff      	movs	r1, #255	@ 0xff
 8000c84:	2012      	movs	r0, #18
 8000c86:	f7ff fee3 	bl	8000a50 <SX1272_WriteReg>
    SX1272_WriteReg(REG_OP_MODE, SX1272_MODE_TX | SX1272_MODE_LORA);
 8000c8a:	2183      	movs	r1, #131	@ 0x83
 8000c8c:	2001      	movs	r0, #1
 8000c8e:	f7ff fedf 	bl	8000a50 <SX1272_WriteReg>
}
 8000c92:	bf00      	nop
 8000c94:	3708      	adds	r7, #8
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}

08000c9a <SX1272_Receive>:

void SX1272_Receive(void)
{
 8000c9a:	b580      	push	{r7, lr}
 8000c9c:	af00      	add	r7, sp, #0
    // Map DIO0 to RxDone
    SX1272_WriteReg(REG_DIO_MAPPING1, 0x00);
 8000c9e:	2100      	movs	r1, #0
 8000ca0:	2040      	movs	r0, #64	@ 0x40
 8000ca2:	f7ff fed5 	bl	8000a50 <SX1272_WriteReg>

    SX1272_WriteReg(REG_IRQ_FLAGS, 0xFF); // Clear all IRQs
 8000ca6:	21ff      	movs	r1, #255	@ 0xff
 8000ca8:	2012      	movs	r0, #18
 8000caa:	f7ff fed1 	bl	8000a50 <SX1272_WriteReg>
    SX1272_WriteReg(REG_OP_MODE, SX1272_MODE_RX_CONT | SX1272_MODE_LORA);
 8000cae:	2185      	movs	r1, #133	@ 0x85
 8000cb0:	2001      	movs	r0, #1
 8000cb2:	f7ff fecd 	bl	8000a50 <SX1272_WriteReg>
}
 8000cb6:	bf00      	nop
 8000cb8:	bd80      	pop	{r7, pc}
	...

08000cbc <SX1272_HandleDIO0>:

void SX1272_HandleDIO0(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b082      	sub	sp, #8
 8000cc0:	af00      	add	r7, sp, #0
    uint8_t irqFlags = SX1272_ReadReg(REG_IRQ_FLAGS);
 8000cc2:	2012      	movs	r0, #18
 8000cc4:	f7ff feea 	bl	8000a9c <SX1272_ReadReg>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	71fb      	strb	r3, [r7, #7]

    // Always clear ALL interrupts first
    SX1272_WriteReg(REG_IRQ_FLAGS, 0xFF);  // Clear all flags
 8000ccc:	21ff      	movs	r1, #255	@ 0xff
 8000cce:	2012      	movs	r0, #18
 8000cd0:	f7ff febe 	bl	8000a50 <SX1272_WriteReg>

    if (irqFlags & IRQ_RX_DONE_MASK)
 8000cd4:	79fb      	ldrb	r3, [r7, #7]
 8000cd6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d031      	beq.n	8000d42 <SX1272_HandleDIO0+0x86>
    {
        if (!(irqFlags & IRQ_CRC_ERROR_MASK))
 8000cde:	79fb      	ldrb	r3, [r7, #7]
 8000ce0:	f003 0320 	and.w	r3, r3, #32
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d133      	bne.n	8000d50 <SX1272_HandleDIO0+0x94>
        {
            // 1. Get payload length FIRST
            SX1272_RxLength = SX1272_ReadReg(REG_RX_NB_BYTES);
 8000ce8:	2013      	movs	r0, #19
 8000cea:	f7ff fed7 	bl	8000a9c <SX1272_ReadReg>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	461a      	mov	r2, r3
 8000cf2:	4b19      	ldr	r3, [pc, #100]	@ (8000d58 <SX1272_HandleDIO0+0x9c>)
 8000cf4:	701a      	strb	r2, [r3, #0]

            // 2. Get current FIFO address
            uint8_t currentAddr = SX1272_ReadReg(REG_FIFO_RX_CURRENT);
 8000cf6:	2010      	movs	r0, #16
 8000cf8:	f7ff fed0 	bl	8000a9c <SX1272_ReadReg>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	71bb      	strb	r3, [r7, #6]

            // 3. Set FIFO pointer
            SX1272_WriteReg(REG_FIFO_ADDR_PTR, currentAddr);
 8000d00:	79bb      	ldrb	r3, [r7, #6]
 8000d02:	4619      	mov	r1, r3
 8000d04:	200d      	movs	r0, #13
 8000d06:	f7ff fea3 	bl	8000a50 <SX1272_WriteReg>

            // 4. Read FIFO
            if(SX1272_RxLength > 0 && SX1272_RxLength <= 256) {
 8000d0a:	4b13      	ldr	r3, [pc, #76]	@ (8000d58 <SX1272_HandleDIO0+0x9c>)
 8000d0c:	781b      	ldrb	r3, [r3, #0]
 8000d0e:	b2db      	uxtb	r3, r3
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d009      	beq.n	8000d28 <SX1272_HandleDIO0+0x6c>
 8000d14:	4b10      	ldr	r3, [pc, #64]	@ (8000d58 <SX1272_HandleDIO0+0x9c>)
 8000d16:	781b      	ldrb	r3, [r3, #0]
                SX1272_ReadBuffer(REG_FIFO, SX1272_RxBuffer, SX1272_RxLength);
 8000d18:	4b0f      	ldr	r3, [pc, #60]	@ (8000d58 <SX1272_HandleDIO0+0x9c>)
 8000d1a:	781b      	ldrb	r3, [r3, #0]
 8000d1c:	b2db      	uxtb	r3, r3
 8000d1e:	461a      	mov	r2, r3
 8000d20:	490e      	ldr	r1, [pc, #56]	@ (8000d5c <SX1272_HandleDIO0+0xa0>)
 8000d22:	2000      	movs	r0, #0
 8000d24:	f7ff ff00 	bl	8000b28 <SX1272_ReadBuffer>
            }

            // Optional: Null terminate if needed
            if (SX1272_RxLength < 255) {
 8000d28:	4b0b      	ldr	r3, [pc, #44]	@ (8000d58 <SX1272_HandleDIO0+0x9c>)
 8000d2a:	781b      	ldrb	r3, [r3, #0]
 8000d2c:	b2db      	uxtb	r3, r3
 8000d2e:	2bff      	cmp	r3, #255	@ 0xff
 8000d30:	d00e      	beq.n	8000d50 <SX1272_HandleDIO0+0x94>
                SX1272_RxBuffer[SX1272_RxLength] = '\0';
 8000d32:	4b09      	ldr	r3, [pc, #36]	@ (8000d58 <SX1272_HandleDIO0+0x9c>)
 8000d34:	781b      	ldrb	r3, [r3, #0]
 8000d36:	b2db      	uxtb	r3, r3
 8000d38:	461a      	mov	r2, r3
 8000d3a:	4b08      	ldr	r3, [pc, #32]	@ (8000d5c <SX1272_HandleDIO0+0xa0>)
 8000d3c:	2100      	movs	r1, #0
 8000d3e:	5499      	strb	r1, [r3, r2]
    else if (irqFlags & IRQ_TX_DONE_MASK)
    {
        // Immediately return to RX mode after TX
        SX1272_Receive();
    }
}
 8000d40:	e006      	b.n	8000d50 <SX1272_HandleDIO0+0x94>
    else if (irqFlags & IRQ_TX_DONE_MASK)
 8000d42:	79fb      	ldrb	r3, [r7, #7]
 8000d44:	f003 0308 	and.w	r3, r3, #8
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d001      	beq.n	8000d50 <SX1272_HandleDIO0+0x94>
        SX1272_Receive();
 8000d4c:	f7ff ffa5 	bl	8000c9a <SX1272_Receive>
}
 8000d50:	bf00      	nop
 8000d52:	3708      	adds	r7, #8
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bd80      	pop	{r7, pc}
 8000d58:	200001b8 	.word	0x200001b8
 8000d5c:	200000b8 	.word	0x200000b8

08000d60 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000d64:	4b06      	ldr	r3, [pc, #24]	@ (8000d80 <SystemInit+0x20>)
 8000d66:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d6a:	4a05      	ldr	r2, [pc, #20]	@ (8000d80 <SystemInit+0x20>)
 8000d6c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000d70:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d74:	bf00      	nop
 8000d76:	46bd      	mov	sp, r7
 8000d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7c:	4770      	bx	lr
 8000d7e:	bf00      	nop
 8000d80:	e000ed00 	.word	0xe000ed00

08000d84 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000d84:	480d      	ldr	r0, [pc, #52]	@ (8000dbc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000d86:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d88:	f7ff ffea 	bl	8000d60 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d8c:	480c      	ldr	r0, [pc, #48]	@ (8000dc0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000d8e:	490d      	ldr	r1, [pc, #52]	@ (8000dc4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d90:	4a0d      	ldr	r2, [pc, #52]	@ (8000dc8 <LoopForever+0xe>)
  movs r3, #0
 8000d92:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000d94:	e002      	b.n	8000d9c <LoopCopyDataInit>

08000d96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d9a:	3304      	adds	r3, #4

08000d9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000da0:	d3f9      	bcc.n	8000d96 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000da2:	4a0a      	ldr	r2, [pc, #40]	@ (8000dcc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000da4:	4c0a      	ldr	r4, [pc, #40]	@ (8000dd0 <LoopForever+0x16>)
  movs r3, #0
 8000da6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000da8:	e001      	b.n	8000dae <LoopFillZerobss>

08000daa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000daa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dac:	3204      	adds	r2, #4

08000dae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000db0:	d3fb      	bcc.n	8000daa <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8000db2:	f002 fac5 	bl	8003340 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000db6:	f7ff fbe5 	bl	8000584 <main>

08000dba <LoopForever>:

LoopForever:
    b LoopForever
 8000dba:	e7fe      	b.n	8000dba <LoopForever>
  ldr   r0, =_estack
 8000dbc:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000dc0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000dc4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000dc8:	080033cc 	.word	0x080033cc
  ldr r2, =_sbss
 8000dcc:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000dd0:	200001c0 	.word	0x200001c0

08000dd4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000dd4:	e7fe      	b.n	8000dd4 <ADC1_2_IRQHandler>

08000dd6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dd6:	b580      	push	{r7, lr}
 8000dd8:	b082      	sub	sp, #8
 8000dda:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000de0:	2003      	movs	r0, #3
 8000de2:	f000 f95b 	bl	800109c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000de6:	200f      	movs	r0, #15
 8000de8:	f000 f80e 	bl	8000e08 <HAL_InitTick>
 8000dec:	4603      	mov	r3, r0
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d002      	beq.n	8000df8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000df2:	2301      	movs	r3, #1
 8000df4:	71fb      	strb	r3, [r7, #7]
 8000df6:	e001      	b.n	8000dfc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000df8:	f7ff fd32 	bl	8000860 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000dfc:	79fb      	ldrb	r3, [r7, #7]

}
 8000dfe:	4618      	mov	r0, r3
 8000e00:	3708      	adds	r7, #8
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}
	...

08000e08 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b084      	sub	sp, #16
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000e10:	2300      	movs	r3, #0
 8000e12:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000e14:	4b16      	ldr	r3, [pc, #88]	@ (8000e70 <HAL_InitTick+0x68>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d022      	beq.n	8000e62 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000e1c:	4b15      	ldr	r3, [pc, #84]	@ (8000e74 <HAL_InitTick+0x6c>)
 8000e1e:	681a      	ldr	r2, [r3, #0]
 8000e20:	4b13      	ldr	r3, [pc, #76]	@ (8000e70 <HAL_InitTick+0x68>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000e28:	fbb1 f3f3 	udiv	r3, r1, r3
 8000e2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e30:	4618      	mov	r0, r3
 8000e32:	f000 f966 	bl	8001102 <HAL_SYSTICK_Config>
 8000e36:	4603      	mov	r3, r0
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d10f      	bne.n	8000e5c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	2b0f      	cmp	r3, #15
 8000e40:	d809      	bhi.n	8000e56 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e42:	2200      	movs	r2, #0
 8000e44:	6879      	ldr	r1, [r7, #4]
 8000e46:	f04f 30ff 	mov.w	r0, #4294967295
 8000e4a:	f000 f932 	bl	80010b2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e4e:	4a0a      	ldr	r2, [pc, #40]	@ (8000e78 <HAL_InitTick+0x70>)
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	6013      	str	r3, [r2, #0]
 8000e54:	e007      	b.n	8000e66 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000e56:	2301      	movs	r3, #1
 8000e58:	73fb      	strb	r3, [r7, #15]
 8000e5a:	e004      	b.n	8000e66 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000e5c:	2301      	movs	r3, #1
 8000e5e:	73fb      	strb	r3, [r7, #15]
 8000e60:	e001      	b.n	8000e66 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000e62:	2301      	movs	r3, #1
 8000e64:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000e66:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e68:	4618      	mov	r0, r3
 8000e6a:	3710      	adds	r7, #16
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bd80      	pop	{r7, pc}
 8000e70:	20000008 	.word	0x20000008
 8000e74:	20000000 	.word	0x20000000
 8000e78:	20000004 	.word	0x20000004

08000e7c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e80:	4b05      	ldr	r3, [pc, #20]	@ (8000e98 <HAL_IncTick+0x1c>)
 8000e82:	681a      	ldr	r2, [r3, #0]
 8000e84:	4b05      	ldr	r3, [pc, #20]	@ (8000e9c <HAL_IncTick+0x20>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	4413      	add	r3, r2
 8000e8a:	4a03      	ldr	r2, [pc, #12]	@ (8000e98 <HAL_IncTick+0x1c>)
 8000e8c:	6013      	str	r3, [r2, #0]
}
 8000e8e:	bf00      	nop
 8000e90:	46bd      	mov	sp, r7
 8000e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e96:	4770      	bx	lr
 8000e98:	200001bc 	.word	0x200001bc
 8000e9c:	20000008 	.word	0x20000008

08000ea0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	af00      	add	r7, sp, #0
  return uwTick;
 8000ea4:	4b03      	ldr	r3, [pc, #12]	@ (8000eb4 <HAL_GetTick+0x14>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
}
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb0:	4770      	bx	lr
 8000eb2:	bf00      	nop
 8000eb4:	200001bc 	.word	0x200001bc

08000eb8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b084      	sub	sp, #16
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ec0:	f7ff ffee 	bl	8000ea0 <HAL_GetTick>
 8000ec4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000eca:	68fb      	ldr	r3, [r7, #12]
 8000ecc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ed0:	d004      	beq.n	8000edc <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ed2:	4b09      	ldr	r3, [pc, #36]	@ (8000ef8 <HAL_Delay+0x40>)
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	68fa      	ldr	r2, [r7, #12]
 8000ed8:	4413      	add	r3, r2
 8000eda:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000edc:	bf00      	nop
 8000ede:	f7ff ffdf 	bl	8000ea0 <HAL_GetTick>
 8000ee2:	4602      	mov	r2, r0
 8000ee4:	68bb      	ldr	r3, [r7, #8]
 8000ee6:	1ad3      	subs	r3, r2, r3
 8000ee8:	68fa      	ldr	r2, [r7, #12]
 8000eea:	429a      	cmp	r2, r3
 8000eec:	d8f7      	bhi.n	8000ede <HAL_Delay+0x26>
  {
  }
}
 8000eee:	bf00      	nop
 8000ef0:	bf00      	nop
 8000ef2:	3710      	adds	r7, #16
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bd80      	pop	{r7, pc}
 8000ef8:	20000008 	.word	0x20000008

08000efc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000efc:	b480      	push	{r7}
 8000efe:	b085      	sub	sp, #20
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	f003 0307 	and.w	r3, r3, #7
 8000f0a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f0c:	4b0c      	ldr	r3, [pc, #48]	@ (8000f40 <__NVIC_SetPriorityGrouping+0x44>)
 8000f0e:	68db      	ldr	r3, [r3, #12]
 8000f10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f12:	68ba      	ldr	r2, [r7, #8]
 8000f14:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000f18:	4013      	ands	r3, r2
 8000f1a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f20:	68bb      	ldr	r3, [r7, #8]
 8000f22:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f24:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000f28:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f2e:	4a04      	ldr	r2, [pc, #16]	@ (8000f40 <__NVIC_SetPriorityGrouping+0x44>)
 8000f30:	68bb      	ldr	r3, [r7, #8]
 8000f32:	60d3      	str	r3, [r2, #12]
}
 8000f34:	bf00      	nop
 8000f36:	3714      	adds	r7, #20
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3e:	4770      	bx	lr
 8000f40:	e000ed00 	.word	0xe000ed00

08000f44 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f44:	b480      	push	{r7}
 8000f46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f48:	4b04      	ldr	r3, [pc, #16]	@ (8000f5c <__NVIC_GetPriorityGrouping+0x18>)
 8000f4a:	68db      	ldr	r3, [r3, #12]
 8000f4c:	0a1b      	lsrs	r3, r3, #8
 8000f4e:	f003 0307 	and.w	r3, r3, #7
}
 8000f52:	4618      	mov	r0, r3
 8000f54:	46bd      	mov	sp, r7
 8000f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5a:	4770      	bx	lr
 8000f5c:	e000ed00 	.word	0xe000ed00

08000f60 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f60:	b480      	push	{r7}
 8000f62:	b083      	sub	sp, #12
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	4603      	mov	r3, r0
 8000f68:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	db0b      	blt.n	8000f8a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f72:	79fb      	ldrb	r3, [r7, #7]
 8000f74:	f003 021f 	and.w	r2, r3, #31
 8000f78:	4907      	ldr	r1, [pc, #28]	@ (8000f98 <__NVIC_EnableIRQ+0x38>)
 8000f7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f7e:	095b      	lsrs	r3, r3, #5
 8000f80:	2001      	movs	r0, #1
 8000f82:	fa00 f202 	lsl.w	r2, r0, r2
 8000f86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000f8a:	bf00      	nop
 8000f8c:	370c      	adds	r7, #12
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f94:	4770      	bx	lr
 8000f96:	bf00      	nop
 8000f98:	e000e100 	.word	0xe000e100

08000f9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	b083      	sub	sp, #12
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	6039      	str	r1, [r7, #0]
 8000fa6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fa8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	db0a      	blt.n	8000fc6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fb0:	683b      	ldr	r3, [r7, #0]
 8000fb2:	b2da      	uxtb	r2, r3
 8000fb4:	490c      	ldr	r1, [pc, #48]	@ (8000fe8 <__NVIC_SetPriority+0x4c>)
 8000fb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fba:	0112      	lsls	r2, r2, #4
 8000fbc:	b2d2      	uxtb	r2, r2
 8000fbe:	440b      	add	r3, r1
 8000fc0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fc4:	e00a      	b.n	8000fdc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	b2da      	uxtb	r2, r3
 8000fca:	4908      	ldr	r1, [pc, #32]	@ (8000fec <__NVIC_SetPriority+0x50>)
 8000fcc:	79fb      	ldrb	r3, [r7, #7]
 8000fce:	f003 030f 	and.w	r3, r3, #15
 8000fd2:	3b04      	subs	r3, #4
 8000fd4:	0112      	lsls	r2, r2, #4
 8000fd6:	b2d2      	uxtb	r2, r2
 8000fd8:	440b      	add	r3, r1
 8000fda:	761a      	strb	r2, [r3, #24]
}
 8000fdc:	bf00      	nop
 8000fde:	370c      	adds	r7, #12
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe6:	4770      	bx	lr
 8000fe8:	e000e100 	.word	0xe000e100
 8000fec:	e000ed00 	.word	0xe000ed00

08000ff0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	b089      	sub	sp, #36	@ 0x24
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	60f8      	str	r0, [r7, #12]
 8000ff8:	60b9      	str	r1, [r7, #8]
 8000ffa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	f003 0307 	and.w	r3, r3, #7
 8001002:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001004:	69fb      	ldr	r3, [r7, #28]
 8001006:	f1c3 0307 	rsb	r3, r3, #7
 800100a:	2b04      	cmp	r3, #4
 800100c:	bf28      	it	cs
 800100e:	2304      	movcs	r3, #4
 8001010:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001012:	69fb      	ldr	r3, [r7, #28]
 8001014:	3304      	adds	r3, #4
 8001016:	2b06      	cmp	r3, #6
 8001018:	d902      	bls.n	8001020 <NVIC_EncodePriority+0x30>
 800101a:	69fb      	ldr	r3, [r7, #28]
 800101c:	3b03      	subs	r3, #3
 800101e:	e000      	b.n	8001022 <NVIC_EncodePriority+0x32>
 8001020:	2300      	movs	r3, #0
 8001022:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001024:	f04f 32ff 	mov.w	r2, #4294967295
 8001028:	69bb      	ldr	r3, [r7, #24]
 800102a:	fa02 f303 	lsl.w	r3, r2, r3
 800102e:	43da      	mvns	r2, r3
 8001030:	68bb      	ldr	r3, [r7, #8]
 8001032:	401a      	ands	r2, r3
 8001034:	697b      	ldr	r3, [r7, #20]
 8001036:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001038:	f04f 31ff 	mov.w	r1, #4294967295
 800103c:	697b      	ldr	r3, [r7, #20]
 800103e:	fa01 f303 	lsl.w	r3, r1, r3
 8001042:	43d9      	mvns	r1, r3
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001048:	4313      	orrs	r3, r2
         );
}
 800104a:	4618      	mov	r0, r3
 800104c:	3724      	adds	r7, #36	@ 0x24
 800104e:	46bd      	mov	sp, r7
 8001050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001054:	4770      	bx	lr
	...

08001058 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b082      	sub	sp, #8
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	3b01      	subs	r3, #1
 8001064:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001068:	d301      	bcc.n	800106e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800106a:	2301      	movs	r3, #1
 800106c:	e00f      	b.n	800108e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800106e:	4a0a      	ldr	r2, [pc, #40]	@ (8001098 <SysTick_Config+0x40>)
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	3b01      	subs	r3, #1
 8001074:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001076:	210f      	movs	r1, #15
 8001078:	f04f 30ff 	mov.w	r0, #4294967295
 800107c:	f7ff ff8e 	bl	8000f9c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001080:	4b05      	ldr	r3, [pc, #20]	@ (8001098 <SysTick_Config+0x40>)
 8001082:	2200      	movs	r2, #0
 8001084:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001086:	4b04      	ldr	r3, [pc, #16]	@ (8001098 <SysTick_Config+0x40>)
 8001088:	2207      	movs	r2, #7
 800108a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800108c:	2300      	movs	r3, #0
}
 800108e:	4618      	mov	r0, r3
 8001090:	3708      	adds	r7, #8
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	e000e010 	.word	0xe000e010

0800109c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b082      	sub	sp, #8
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010a4:	6878      	ldr	r0, [r7, #4]
 80010a6:	f7ff ff29 	bl	8000efc <__NVIC_SetPriorityGrouping>
}
 80010aa:	bf00      	nop
 80010ac:	3708      	adds	r7, #8
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}

080010b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010b2:	b580      	push	{r7, lr}
 80010b4:	b086      	sub	sp, #24
 80010b6:	af00      	add	r7, sp, #0
 80010b8:	4603      	mov	r3, r0
 80010ba:	60b9      	str	r1, [r7, #8]
 80010bc:	607a      	str	r2, [r7, #4]
 80010be:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80010c0:	f7ff ff40 	bl	8000f44 <__NVIC_GetPriorityGrouping>
 80010c4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010c6:	687a      	ldr	r2, [r7, #4]
 80010c8:	68b9      	ldr	r1, [r7, #8]
 80010ca:	6978      	ldr	r0, [r7, #20]
 80010cc:	f7ff ff90 	bl	8000ff0 <NVIC_EncodePriority>
 80010d0:	4602      	mov	r2, r0
 80010d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010d6:	4611      	mov	r1, r2
 80010d8:	4618      	mov	r0, r3
 80010da:	f7ff ff5f 	bl	8000f9c <__NVIC_SetPriority>
}
 80010de:	bf00      	nop
 80010e0:	3718      	adds	r7, #24
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}

080010e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010e6:	b580      	push	{r7, lr}
 80010e8:	b082      	sub	sp, #8
 80010ea:	af00      	add	r7, sp, #0
 80010ec:	4603      	mov	r3, r0
 80010ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010f4:	4618      	mov	r0, r3
 80010f6:	f7ff ff33 	bl	8000f60 <__NVIC_EnableIRQ>
}
 80010fa:	bf00      	nop
 80010fc:	3708      	adds	r7, #8
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}

08001102 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001102:	b580      	push	{r7, lr}
 8001104:	b082      	sub	sp, #8
 8001106:	af00      	add	r7, sp, #0
 8001108:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800110a:	6878      	ldr	r0, [r7, #4]
 800110c:	f7ff ffa4 	bl	8001058 <SysTick_Config>
 8001110:	4603      	mov	r3, r0
}
 8001112:	4618      	mov	r0, r3
 8001114:	3708      	adds	r7, #8
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}
	...

0800111c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b082      	sub	sp, #8
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	2b00      	cmp	r3, #0
 8001128:	d101      	bne.n	800112e <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800112a:	2301      	movs	r3, #1
 800112c:	e054      	b.n	80011d8 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	7f5b      	ldrb	r3, [r3, #29]
 8001132:	b2db      	uxtb	r3, r3
 8001134:	2b00      	cmp	r3, #0
 8001136:	d105      	bne.n	8001144 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	2200      	movs	r2, #0
 800113c:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800113e:	6878      	ldr	r0, [r7, #4]
 8001140:	f7ff fbb2 	bl	80008a8 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	2202      	movs	r2, #2
 8001148:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	791b      	ldrb	r3, [r3, #4]
 800114e:	2b00      	cmp	r3, #0
 8001150:	d10c      	bne.n	800116c <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	4a22      	ldr	r2, [pc, #136]	@ (80011e0 <HAL_CRC_Init+0xc4>)
 8001158:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	689a      	ldr	r2, [r3, #8]
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	f022 0218 	bic.w	r2, r2, #24
 8001168:	609a      	str	r2, [r3, #8]
 800116a:	e00c      	b.n	8001186 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	6899      	ldr	r1, [r3, #8]
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	68db      	ldr	r3, [r3, #12]
 8001174:	461a      	mov	r2, r3
 8001176:	6878      	ldr	r0, [r7, #4]
 8001178:	f000 f834 	bl	80011e4 <HAL_CRCEx_Polynomial_Set>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d001      	beq.n	8001186 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8001182:	2301      	movs	r3, #1
 8001184:	e028      	b.n	80011d8 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	795b      	ldrb	r3, [r3, #5]
 800118a:	2b00      	cmp	r3, #0
 800118c:	d105      	bne.n	800119a <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	f04f 32ff 	mov.w	r2, #4294967295
 8001196:	611a      	str	r2, [r3, #16]
 8001198:	e004      	b.n	80011a4 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	687a      	ldr	r2, [r7, #4]
 80011a0:	6912      	ldr	r2, [r2, #16]
 80011a2:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	689b      	ldr	r3, [r3, #8]
 80011aa:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	695a      	ldr	r2, [r3, #20]
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	430a      	orrs	r2, r1
 80011b8:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	689b      	ldr	r3, [r3, #8]
 80011c0:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	699a      	ldr	r2, [r3, #24]
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	430a      	orrs	r2, r1
 80011ce:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	2201      	movs	r2, #1
 80011d4:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 80011d6:	2300      	movs	r3, #0
}
 80011d8:	4618      	mov	r0, r3
 80011da:	3708      	adds	r7, #8
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}
 80011e0:	04c11db7 	.word	0x04c11db7

080011e4 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 80011e4:	b480      	push	{r7}
 80011e6:	b087      	sub	sp, #28
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	60f8      	str	r0, [r7, #12]
 80011ec:	60b9      	str	r1, [r7, #8]
 80011ee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80011f0:	2300      	movs	r3, #0
 80011f2:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80011f4:	231f      	movs	r3, #31
 80011f6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 80011f8:	68bb      	ldr	r3, [r7, #8]
 80011fa:	f003 0301 	and.w	r3, r3, #1
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d102      	bne.n	8001208 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 8001202:	2301      	movs	r3, #1
 8001204:	75fb      	strb	r3, [r7, #23]
 8001206:	e063      	b.n	80012d0 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8001208:	bf00      	nop
 800120a:	693b      	ldr	r3, [r7, #16]
 800120c:	1e5a      	subs	r2, r3, #1
 800120e:	613a      	str	r2, [r7, #16]
 8001210:	2b00      	cmp	r3, #0
 8001212:	d009      	beq.n	8001228 <HAL_CRCEx_Polynomial_Set+0x44>
 8001214:	693b      	ldr	r3, [r7, #16]
 8001216:	f003 031f 	and.w	r3, r3, #31
 800121a:	68ba      	ldr	r2, [r7, #8]
 800121c:	fa22 f303 	lsr.w	r3, r2, r3
 8001220:	f003 0301 	and.w	r3, r3, #1
 8001224:	2b00      	cmp	r3, #0
 8001226:	d0f0      	beq.n	800120a <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	2b18      	cmp	r3, #24
 800122c:	d846      	bhi.n	80012bc <HAL_CRCEx_Polynomial_Set+0xd8>
 800122e:	a201      	add	r2, pc, #4	@ (adr r2, 8001234 <HAL_CRCEx_Polynomial_Set+0x50>)
 8001230:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001234:	080012c3 	.word	0x080012c3
 8001238:	080012bd 	.word	0x080012bd
 800123c:	080012bd 	.word	0x080012bd
 8001240:	080012bd 	.word	0x080012bd
 8001244:	080012bd 	.word	0x080012bd
 8001248:	080012bd 	.word	0x080012bd
 800124c:	080012bd 	.word	0x080012bd
 8001250:	080012bd 	.word	0x080012bd
 8001254:	080012b1 	.word	0x080012b1
 8001258:	080012bd 	.word	0x080012bd
 800125c:	080012bd 	.word	0x080012bd
 8001260:	080012bd 	.word	0x080012bd
 8001264:	080012bd 	.word	0x080012bd
 8001268:	080012bd 	.word	0x080012bd
 800126c:	080012bd 	.word	0x080012bd
 8001270:	080012bd 	.word	0x080012bd
 8001274:	080012a5 	.word	0x080012a5
 8001278:	080012bd 	.word	0x080012bd
 800127c:	080012bd 	.word	0x080012bd
 8001280:	080012bd 	.word	0x080012bd
 8001284:	080012bd 	.word	0x080012bd
 8001288:	080012bd 	.word	0x080012bd
 800128c:	080012bd 	.word	0x080012bd
 8001290:	080012bd 	.word	0x080012bd
 8001294:	08001299 	.word	0x08001299
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 8001298:	693b      	ldr	r3, [r7, #16]
 800129a:	2b06      	cmp	r3, #6
 800129c:	d913      	bls.n	80012c6 <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 800129e:	2301      	movs	r3, #1
 80012a0:	75fb      	strb	r3, [r7, #23]
        }
        break;
 80012a2:	e010      	b.n	80012c6 <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 80012a4:	693b      	ldr	r3, [r7, #16]
 80012a6:	2b07      	cmp	r3, #7
 80012a8:	d90f      	bls.n	80012ca <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 80012aa:	2301      	movs	r3, #1
 80012ac:	75fb      	strb	r3, [r7, #23]
        }
        break;
 80012ae:	e00c      	b.n	80012ca <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 80012b0:	693b      	ldr	r3, [r7, #16]
 80012b2:	2b0f      	cmp	r3, #15
 80012b4:	d90b      	bls.n	80012ce <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 80012b6:	2301      	movs	r3, #1
 80012b8:	75fb      	strb	r3, [r7, #23]
        }
        break;
 80012ba:	e008      	b.n	80012ce <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 80012bc:	2301      	movs	r3, #1
 80012be:	75fb      	strb	r3, [r7, #23]
        break;
 80012c0:	e006      	b.n	80012d0 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80012c2:	bf00      	nop
 80012c4:	e004      	b.n	80012d0 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80012c6:	bf00      	nop
 80012c8:	e002      	b.n	80012d0 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80012ca:	bf00      	nop
 80012cc:	e000      	b.n	80012d0 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80012ce:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 80012d0:	7dfb      	ldrb	r3, [r7, #23]
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d10d      	bne.n	80012f2 <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	68ba      	ldr	r2, [r7, #8]
 80012dc:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	689b      	ldr	r3, [r3, #8]
 80012e4:	f023 0118 	bic.w	r1, r3, #24
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	687a      	ldr	r2, [r7, #4]
 80012ee:	430a      	orrs	r2, r1
 80012f0:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 80012f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80012f4:	4618      	mov	r0, r3
 80012f6:	371c      	adds	r7, #28
 80012f8:	46bd      	mov	sp, r7
 80012fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fe:	4770      	bx	lr

08001300 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b084      	sub	sp, #16
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001308:	2300      	movs	r3, #0
 800130a:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001312:	b2db      	uxtb	r3, r3
 8001314:	2b02      	cmp	r3, #2
 8001316:	d00d      	beq.n	8001334 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	2204      	movs	r2, #4
 800131c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	2201      	movs	r2, #1
 8001322:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	2200      	movs	r2, #0
 800132a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 800132e:	2301      	movs	r3, #1
 8001330:	73fb      	strb	r3, [r7, #15]
 8001332:	e047      	b.n	80013c4 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	681a      	ldr	r2, [r3, #0]
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f022 020e 	bic.w	r2, r2, #14
 8001342:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	681a      	ldr	r2, [r3, #0]
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f022 0201 	bic.w	r2, r2, #1
 8001352:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001358:	681a      	ldr	r2, [r3, #0]
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800135e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001362:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001368:	f003 021f 	and.w	r2, r3, #31
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001370:	2101      	movs	r1, #1
 8001372:	fa01 f202 	lsl.w	r2, r1, r2
 8001376:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800137c:	687a      	ldr	r2, [r7, #4]
 800137e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001380:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001386:	2b00      	cmp	r3, #0
 8001388:	d00c      	beq.n	80013a4 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800138e:	681a      	ldr	r2, [r3, #0]
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001394:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001398:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800139e:	687a      	ldr	r2, [r7, #4]
 80013a0:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80013a2:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	2201      	movs	r2, #1
 80013a8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	2200      	movs	r2, #0
 80013b0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d003      	beq.n	80013c4 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80013c0:	6878      	ldr	r0, [r7, #4]
 80013c2:	4798      	blx	r3
    }
  }
  return status;
 80013c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80013c6:	4618      	mov	r0, r3
 80013c8:	3710      	adds	r7, #16
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}
	...

080013d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013d0:	b480      	push	{r7}
 80013d2:	b087      	sub	sp, #28
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
 80013d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80013da:	2300      	movs	r3, #0
 80013dc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80013de:	e15a      	b.n	8001696 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	681a      	ldr	r2, [r3, #0]
 80013e4:	2101      	movs	r1, #1
 80013e6:	697b      	ldr	r3, [r7, #20]
 80013e8:	fa01 f303 	lsl.w	r3, r1, r3
 80013ec:	4013      	ands	r3, r2
 80013ee:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	f000 814c 	beq.w	8001690 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	f003 0303 	and.w	r3, r3, #3
 8001400:	2b01      	cmp	r3, #1
 8001402:	d005      	beq.n	8001410 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800140c:	2b02      	cmp	r3, #2
 800140e:	d130      	bne.n	8001472 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	689b      	ldr	r3, [r3, #8]
 8001414:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001416:	697b      	ldr	r3, [r7, #20]
 8001418:	005b      	lsls	r3, r3, #1
 800141a:	2203      	movs	r2, #3
 800141c:	fa02 f303 	lsl.w	r3, r2, r3
 8001420:	43db      	mvns	r3, r3
 8001422:	693a      	ldr	r2, [r7, #16]
 8001424:	4013      	ands	r3, r2
 8001426:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	68da      	ldr	r2, [r3, #12]
 800142c:	697b      	ldr	r3, [r7, #20]
 800142e:	005b      	lsls	r3, r3, #1
 8001430:	fa02 f303 	lsl.w	r3, r2, r3
 8001434:	693a      	ldr	r2, [r7, #16]
 8001436:	4313      	orrs	r3, r2
 8001438:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	693a      	ldr	r2, [r7, #16]
 800143e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	685b      	ldr	r3, [r3, #4]
 8001444:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001446:	2201      	movs	r2, #1
 8001448:	697b      	ldr	r3, [r7, #20]
 800144a:	fa02 f303 	lsl.w	r3, r2, r3
 800144e:	43db      	mvns	r3, r3
 8001450:	693a      	ldr	r2, [r7, #16]
 8001452:	4013      	ands	r3, r2
 8001454:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	091b      	lsrs	r3, r3, #4
 800145c:	f003 0201 	and.w	r2, r3, #1
 8001460:	697b      	ldr	r3, [r7, #20]
 8001462:	fa02 f303 	lsl.w	r3, r2, r3
 8001466:	693a      	ldr	r2, [r7, #16]
 8001468:	4313      	orrs	r3, r2
 800146a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	693a      	ldr	r2, [r7, #16]
 8001470:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	685b      	ldr	r3, [r3, #4]
 8001476:	f003 0303 	and.w	r3, r3, #3
 800147a:	2b03      	cmp	r3, #3
 800147c:	d017      	beq.n	80014ae <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	68db      	ldr	r3, [r3, #12]
 8001482:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001484:	697b      	ldr	r3, [r7, #20]
 8001486:	005b      	lsls	r3, r3, #1
 8001488:	2203      	movs	r2, #3
 800148a:	fa02 f303 	lsl.w	r3, r2, r3
 800148e:	43db      	mvns	r3, r3
 8001490:	693a      	ldr	r2, [r7, #16]
 8001492:	4013      	ands	r3, r2
 8001494:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	689a      	ldr	r2, [r3, #8]
 800149a:	697b      	ldr	r3, [r7, #20]
 800149c:	005b      	lsls	r3, r3, #1
 800149e:	fa02 f303 	lsl.w	r3, r2, r3
 80014a2:	693a      	ldr	r2, [r7, #16]
 80014a4:	4313      	orrs	r3, r2
 80014a6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	693a      	ldr	r2, [r7, #16]
 80014ac:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	685b      	ldr	r3, [r3, #4]
 80014b2:	f003 0303 	and.w	r3, r3, #3
 80014b6:	2b02      	cmp	r3, #2
 80014b8:	d123      	bne.n	8001502 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80014ba:	697b      	ldr	r3, [r7, #20]
 80014bc:	08da      	lsrs	r2, r3, #3
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	3208      	adds	r2, #8
 80014c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014c6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80014c8:	697b      	ldr	r3, [r7, #20]
 80014ca:	f003 0307 	and.w	r3, r3, #7
 80014ce:	009b      	lsls	r3, r3, #2
 80014d0:	220f      	movs	r2, #15
 80014d2:	fa02 f303 	lsl.w	r3, r2, r3
 80014d6:	43db      	mvns	r3, r3
 80014d8:	693a      	ldr	r2, [r7, #16]
 80014da:	4013      	ands	r3, r2
 80014dc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	691a      	ldr	r2, [r3, #16]
 80014e2:	697b      	ldr	r3, [r7, #20]
 80014e4:	f003 0307 	and.w	r3, r3, #7
 80014e8:	009b      	lsls	r3, r3, #2
 80014ea:	fa02 f303 	lsl.w	r3, r2, r3
 80014ee:	693a      	ldr	r2, [r7, #16]
 80014f0:	4313      	orrs	r3, r2
 80014f2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80014f4:	697b      	ldr	r3, [r7, #20]
 80014f6:	08da      	lsrs	r2, r3, #3
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	3208      	adds	r2, #8
 80014fc:	6939      	ldr	r1, [r7, #16]
 80014fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001508:	697b      	ldr	r3, [r7, #20]
 800150a:	005b      	lsls	r3, r3, #1
 800150c:	2203      	movs	r2, #3
 800150e:	fa02 f303 	lsl.w	r3, r2, r3
 8001512:	43db      	mvns	r3, r3
 8001514:	693a      	ldr	r2, [r7, #16]
 8001516:	4013      	ands	r3, r2
 8001518:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	685b      	ldr	r3, [r3, #4]
 800151e:	f003 0203 	and.w	r2, r3, #3
 8001522:	697b      	ldr	r3, [r7, #20]
 8001524:	005b      	lsls	r3, r3, #1
 8001526:	fa02 f303 	lsl.w	r3, r2, r3
 800152a:	693a      	ldr	r2, [r7, #16]
 800152c:	4313      	orrs	r3, r2
 800152e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	693a      	ldr	r2, [r7, #16]
 8001534:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001536:	683b      	ldr	r3, [r7, #0]
 8001538:	685b      	ldr	r3, [r3, #4]
 800153a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800153e:	2b00      	cmp	r3, #0
 8001540:	f000 80a6 	beq.w	8001690 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001544:	4b5b      	ldr	r3, [pc, #364]	@ (80016b4 <HAL_GPIO_Init+0x2e4>)
 8001546:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001548:	4a5a      	ldr	r2, [pc, #360]	@ (80016b4 <HAL_GPIO_Init+0x2e4>)
 800154a:	f043 0301 	orr.w	r3, r3, #1
 800154e:	6613      	str	r3, [r2, #96]	@ 0x60
 8001550:	4b58      	ldr	r3, [pc, #352]	@ (80016b4 <HAL_GPIO_Init+0x2e4>)
 8001552:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001554:	f003 0301 	and.w	r3, r3, #1
 8001558:	60bb      	str	r3, [r7, #8]
 800155a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800155c:	4a56      	ldr	r2, [pc, #344]	@ (80016b8 <HAL_GPIO_Init+0x2e8>)
 800155e:	697b      	ldr	r3, [r7, #20]
 8001560:	089b      	lsrs	r3, r3, #2
 8001562:	3302      	adds	r3, #2
 8001564:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001568:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800156a:	697b      	ldr	r3, [r7, #20]
 800156c:	f003 0303 	and.w	r3, r3, #3
 8001570:	009b      	lsls	r3, r3, #2
 8001572:	220f      	movs	r2, #15
 8001574:	fa02 f303 	lsl.w	r3, r2, r3
 8001578:	43db      	mvns	r3, r3
 800157a:	693a      	ldr	r2, [r7, #16]
 800157c:	4013      	ands	r3, r2
 800157e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001586:	d01f      	beq.n	80015c8 <HAL_GPIO_Init+0x1f8>
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	4a4c      	ldr	r2, [pc, #304]	@ (80016bc <HAL_GPIO_Init+0x2ec>)
 800158c:	4293      	cmp	r3, r2
 800158e:	d019      	beq.n	80015c4 <HAL_GPIO_Init+0x1f4>
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	4a4b      	ldr	r2, [pc, #300]	@ (80016c0 <HAL_GPIO_Init+0x2f0>)
 8001594:	4293      	cmp	r3, r2
 8001596:	d013      	beq.n	80015c0 <HAL_GPIO_Init+0x1f0>
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	4a4a      	ldr	r2, [pc, #296]	@ (80016c4 <HAL_GPIO_Init+0x2f4>)
 800159c:	4293      	cmp	r3, r2
 800159e:	d00d      	beq.n	80015bc <HAL_GPIO_Init+0x1ec>
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	4a49      	ldr	r2, [pc, #292]	@ (80016c8 <HAL_GPIO_Init+0x2f8>)
 80015a4:	4293      	cmp	r3, r2
 80015a6:	d007      	beq.n	80015b8 <HAL_GPIO_Init+0x1e8>
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	4a48      	ldr	r2, [pc, #288]	@ (80016cc <HAL_GPIO_Init+0x2fc>)
 80015ac:	4293      	cmp	r3, r2
 80015ae:	d101      	bne.n	80015b4 <HAL_GPIO_Init+0x1e4>
 80015b0:	2305      	movs	r3, #5
 80015b2:	e00a      	b.n	80015ca <HAL_GPIO_Init+0x1fa>
 80015b4:	2306      	movs	r3, #6
 80015b6:	e008      	b.n	80015ca <HAL_GPIO_Init+0x1fa>
 80015b8:	2304      	movs	r3, #4
 80015ba:	e006      	b.n	80015ca <HAL_GPIO_Init+0x1fa>
 80015bc:	2303      	movs	r3, #3
 80015be:	e004      	b.n	80015ca <HAL_GPIO_Init+0x1fa>
 80015c0:	2302      	movs	r3, #2
 80015c2:	e002      	b.n	80015ca <HAL_GPIO_Init+0x1fa>
 80015c4:	2301      	movs	r3, #1
 80015c6:	e000      	b.n	80015ca <HAL_GPIO_Init+0x1fa>
 80015c8:	2300      	movs	r3, #0
 80015ca:	697a      	ldr	r2, [r7, #20]
 80015cc:	f002 0203 	and.w	r2, r2, #3
 80015d0:	0092      	lsls	r2, r2, #2
 80015d2:	4093      	lsls	r3, r2
 80015d4:	693a      	ldr	r2, [r7, #16]
 80015d6:	4313      	orrs	r3, r2
 80015d8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80015da:	4937      	ldr	r1, [pc, #220]	@ (80016b8 <HAL_GPIO_Init+0x2e8>)
 80015dc:	697b      	ldr	r3, [r7, #20]
 80015de:	089b      	lsrs	r3, r3, #2
 80015e0:	3302      	adds	r3, #2
 80015e2:	693a      	ldr	r2, [r7, #16]
 80015e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80015e8:	4b39      	ldr	r3, [pc, #228]	@ (80016d0 <HAL_GPIO_Init+0x300>)
 80015ea:	689b      	ldr	r3, [r3, #8]
 80015ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	43db      	mvns	r3, r3
 80015f2:	693a      	ldr	r2, [r7, #16]
 80015f4:	4013      	ands	r3, r2
 80015f6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	685b      	ldr	r3, [r3, #4]
 80015fc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001600:	2b00      	cmp	r3, #0
 8001602:	d003      	beq.n	800160c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001604:	693a      	ldr	r2, [r7, #16]
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	4313      	orrs	r3, r2
 800160a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800160c:	4a30      	ldr	r2, [pc, #192]	@ (80016d0 <HAL_GPIO_Init+0x300>)
 800160e:	693b      	ldr	r3, [r7, #16]
 8001610:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001612:	4b2f      	ldr	r3, [pc, #188]	@ (80016d0 <HAL_GPIO_Init+0x300>)
 8001614:	68db      	ldr	r3, [r3, #12]
 8001616:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	43db      	mvns	r3, r3
 800161c:	693a      	ldr	r2, [r7, #16]
 800161e:	4013      	ands	r3, r2
 8001620:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	685b      	ldr	r3, [r3, #4]
 8001626:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800162a:	2b00      	cmp	r3, #0
 800162c:	d003      	beq.n	8001636 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800162e:	693a      	ldr	r2, [r7, #16]
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	4313      	orrs	r3, r2
 8001634:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001636:	4a26      	ldr	r2, [pc, #152]	@ (80016d0 <HAL_GPIO_Init+0x300>)
 8001638:	693b      	ldr	r3, [r7, #16]
 800163a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 800163c:	4b24      	ldr	r3, [pc, #144]	@ (80016d0 <HAL_GPIO_Init+0x300>)
 800163e:	685b      	ldr	r3, [r3, #4]
 8001640:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	43db      	mvns	r3, r3
 8001646:	693a      	ldr	r2, [r7, #16]
 8001648:	4013      	ands	r3, r2
 800164a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	685b      	ldr	r3, [r3, #4]
 8001650:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001654:	2b00      	cmp	r3, #0
 8001656:	d003      	beq.n	8001660 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001658:	693a      	ldr	r2, [r7, #16]
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	4313      	orrs	r3, r2
 800165e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001660:	4a1b      	ldr	r2, [pc, #108]	@ (80016d0 <HAL_GPIO_Init+0x300>)
 8001662:	693b      	ldr	r3, [r7, #16]
 8001664:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001666:	4b1a      	ldr	r3, [pc, #104]	@ (80016d0 <HAL_GPIO_Init+0x300>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	43db      	mvns	r3, r3
 8001670:	693a      	ldr	r2, [r7, #16]
 8001672:	4013      	ands	r3, r2
 8001674:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	685b      	ldr	r3, [r3, #4]
 800167a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800167e:	2b00      	cmp	r3, #0
 8001680:	d003      	beq.n	800168a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001682:	693a      	ldr	r2, [r7, #16]
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	4313      	orrs	r3, r2
 8001688:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800168a:	4a11      	ldr	r2, [pc, #68]	@ (80016d0 <HAL_GPIO_Init+0x300>)
 800168c:	693b      	ldr	r3, [r7, #16]
 800168e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001690:	697b      	ldr	r3, [r7, #20]
 8001692:	3301      	adds	r3, #1
 8001694:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001696:	683b      	ldr	r3, [r7, #0]
 8001698:	681a      	ldr	r2, [r3, #0]
 800169a:	697b      	ldr	r3, [r7, #20]
 800169c:	fa22 f303 	lsr.w	r3, r2, r3
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	f47f ae9d 	bne.w	80013e0 <HAL_GPIO_Init+0x10>
  }
}
 80016a6:	bf00      	nop
 80016a8:	bf00      	nop
 80016aa:	371c      	adds	r7, #28
 80016ac:	46bd      	mov	sp, r7
 80016ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b2:	4770      	bx	lr
 80016b4:	40021000 	.word	0x40021000
 80016b8:	40010000 	.word	0x40010000
 80016bc:	48000400 	.word	0x48000400
 80016c0:	48000800 	.word	0x48000800
 80016c4:	48000c00 	.word	0x48000c00
 80016c8:	48001000 	.word	0x48001000
 80016cc:	48001400 	.word	0x48001400
 80016d0:	40010400 	.word	0x40010400

080016d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016d4:	b480      	push	{r7}
 80016d6:	b083      	sub	sp, #12
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
 80016dc:	460b      	mov	r3, r1
 80016de:	807b      	strh	r3, [r7, #2]
 80016e0:	4613      	mov	r3, r2
 80016e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80016e4:	787b      	ldrb	r3, [r7, #1]
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d003      	beq.n	80016f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80016ea:	887a      	ldrh	r2, [r7, #2]
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80016f0:	e002      	b.n	80016f8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80016f2:	887a      	ldrh	r2, [r7, #2]
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80016f8:	bf00      	nop
 80016fa:	370c      	adds	r7, #12
 80016fc:	46bd      	mov	sp, r7
 80016fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001702:	4770      	bx	lr

08001704 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b082      	sub	sp, #8
 8001708:	af00      	add	r7, sp, #0
 800170a:	4603      	mov	r3, r0
 800170c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800170e:	4b08      	ldr	r3, [pc, #32]	@ (8001730 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001710:	695a      	ldr	r2, [r3, #20]
 8001712:	88fb      	ldrh	r3, [r7, #6]
 8001714:	4013      	ands	r3, r2
 8001716:	2b00      	cmp	r3, #0
 8001718:	d006      	beq.n	8001728 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800171a:	4a05      	ldr	r2, [pc, #20]	@ (8001730 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800171c:	88fb      	ldrh	r3, [r7, #6]
 800171e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001720:	88fb      	ldrh	r3, [r7, #6]
 8001722:	4618      	mov	r0, r3
 8001724:	f7fe ff16 	bl	8000554 <HAL_GPIO_EXTI_Callback>
  }
}
 8001728:	bf00      	nop
 800172a:	3708      	adds	r7, #8
 800172c:	46bd      	mov	sp, r7
 800172e:	bd80      	pop	{r7, pc}
 8001730:	40010400 	.word	0x40010400

08001734 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001734:	b480      	push	{r7}
 8001736:	b085      	sub	sp, #20
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	2b00      	cmp	r3, #0
 8001740:	d141      	bne.n	80017c6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001742:	4b4b      	ldr	r3, [pc, #300]	@ (8001870 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800174a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800174e:	d131      	bne.n	80017b4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001750:	4b47      	ldr	r3, [pc, #284]	@ (8001870 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001752:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001756:	4a46      	ldr	r2, [pc, #280]	@ (8001870 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001758:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800175c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001760:	4b43      	ldr	r3, [pc, #268]	@ (8001870 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001768:	4a41      	ldr	r2, [pc, #260]	@ (8001870 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800176a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800176e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001770:	4b40      	ldr	r3, [pc, #256]	@ (8001874 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	2232      	movs	r2, #50	@ 0x32
 8001776:	fb02 f303 	mul.w	r3, r2, r3
 800177a:	4a3f      	ldr	r2, [pc, #252]	@ (8001878 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800177c:	fba2 2303 	umull	r2, r3, r2, r3
 8001780:	0c9b      	lsrs	r3, r3, #18
 8001782:	3301      	adds	r3, #1
 8001784:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001786:	e002      	b.n	800178e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	3b01      	subs	r3, #1
 800178c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800178e:	4b38      	ldr	r3, [pc, #224]	@ (8001870 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001790:	695b      	ldr	r3, [r3, #20]
 8001792:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001796:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800179a:	d102      	bne.n	80017a2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d1f2      	bne.n	8001788 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80017a2:	4b33      	ldr	r3, [pc, #204]	@ (8001870 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017a4:	695b      	ldr	r3, [r3, #20]
 80017a6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80017aa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80017ae:	d158      	bne.n	8001862 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80017b0:	2303      	movs	r3, #3
 80017b2:	e057      	b.n	8001864 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80017b4:	4b2e      	ldr	r3, [pc, #184]	@ (8001870 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80017ba:	4a2d      	ldr	r2, [pc, #180]	@ (8001870 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017bc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80017c0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80017c4:	e04d      	b.n	8001862 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80017cc:	d141      	bne.n	8001852 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80017ce:	4b28      	ldr	r3, [pc, #160]	@ (8001870 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80017d6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80017da:	d131      	bne.n	8001840 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80017dc:	4b24      	ldr	r3, [pc, #144]	@ (8001870 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017de:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80017e2:	4a23      	ldr	r2, [pc, #140]	@ (8001870 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80017e8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80017ec:	4b20      	ldr	r3, [pc, #128]	@ (8001870 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80017f4:	4a1e      	ldr	r2, [pc, #120]	@ (8001870 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017f6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80017fa:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80017fc:	4b1d      	ldr	r3, [pc, #116]	@ (8001874 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	2232      	movs	r2, #50	@ 0x32
 8001802:	fb02 f303 	mul.w	r3, r2, r3
 8001806:	4a1c      	ldr	r2, [pc, #112]	@ (8001878 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001808:	fba2 2303 	umull	r2, r3, r2, r3
 800180c:	0c9b      	lsrs	r3, r3, #18
 800180e:	3301      	adds	r3, #1
 8001810:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001812:	e002      	b.n	800181a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	3b01      	subs	r3, #1
 8001818:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800181a:	4b15      	ldr	r3, [pc, #84]	@ (8001870 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800181c:	695b      	ldr	r3, [r3, #20]
 800181e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001822:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001826:	d102      	bne.n	800182e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	2b00      	cmp	r3, #0
 800182c:	d1f2      	bne.n	8001814 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800182e:	4b10      	ldr	r3, [pc, #64]	@ (8001870 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001830:	695b      	ldr	r3, [r3, #20]
 8001832:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001836:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800183a:	d112      	bne.n	8001862 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800183c:	2303      	movs	r3, #3
 800183e:	e011      	b.n	8001864 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001840:	4b0b      	ldr	r3, [pc, #44]	@ (8001870 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001842:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001846:	4a0a      	ldr	r2, [pc, #40]	@ (8001870 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001848:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800184c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001850:	e007      	b.n	8001862 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001852:	4b07      	ldr	r3, [pc, #28]	@ (8001870 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800185a:	4a05      	ldr	r2, [pc, #20]	@ (8001870 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800185c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001860:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001862:	2300      	movs	r3, #0
}
 8001864:	4618      	mov	r0, r3
 8001866:	3714      	adds	r7, #20
 8001868:	46bd      	mov	sp, r7
 800186a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186e:	4770      	bx	lr
 8001870:	40007000 	.word	0x40007000
 8001874:	20000000 	.word	0x20000000
 8001878:	431bde83 	.word	0x431bde83

0800187c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800187c:	b480      	push	{r7}
 800187e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001880:	4b05      	ldr	r3, [pc, #20]	@ (8001898 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001882:	689b      	ldr	r3, [r3, #8]
 8001884:	4a04      	ldr	r2, [pc, #16]	@ (8001898 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001886:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800188a:	6093      	str	r3, [r2, #8]
}
 800188c:	bf00      	nop
 800188e:	46bd      	mov	sp, r7
 8001890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001894:	4770      	bx	lr
 8001896:	bf00      	nop
 8001898:	40007000 	.word	0x40007000

0800189c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b088      	sub	sp, #32
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d101      	bne.n	80018ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80018aa:	2301      	movs	r3, #1
 80018ac:	e2fe      	b.n	8001eac <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f003 0301 	and.w	r3, r3, #1
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d075      	beq.n	80019a6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80018ba:	4b97      	ldr	r3, [pc, #604]	@ (8001b18 <HAL_RCC_OscConfig+0x27c>)
 80018bc:	689b      	ldr	r3, [r3, #8]
 80018be:	f003 030c 	and.w	r3, r3, #12
 80018c2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80018c4:	4b94      	ldr	r3, [pc, #592]	@ (8001b18 <HAL_RCC_OscConfig+0x27c>)
 80018c6:	68db      	ldr	r3, [r3, #12]
 80018c8:	f003 0303 	and.w	r3, r3, #3
 80018cc:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80018ce:	69bb      	ldr	r3, [r7, #24]
 80018d0:	2b0c      	cmp	r3, #12
 80018d2:	d102      	bne.n	80018da <HAL_RCC_OscConfig+0x3e>
 80018d4:	697b      	ldr	r3, [r7, #20]
 80018d6:	2b03      	cmp	r3, #3
 80018d8:	d002      	beq.n	80018e0 <HAL_RCC_OscConfig+0x44>
 80018da:	69bb      	ldr	r3, [r7, #24]
 80018dc:	2b08      	cmp	r3, #8
 80018de:	d10b      	bne.n	80018f8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018e0:	4b8d      	ldr	r3, [pc, #564]	@ (8001b18 <HAL_RCC_OscConfig+0x27c>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d05b      	beq.n	80019a4 <HAL_RCC_OscConfig+0x108>
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d157      	bne.n	80019a4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80018f4:	2301      	movs	r3, #1
 80018f6:	e2d9      	b.n	8001eac <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	685b      	ldr	r3, [r3, #4]
 80018fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001900:	d106      	bne.n	8001910 <HAL_RCC_OscConfig+0x74>
 8001902:	4b85      	ldr	r3, [pc, #532]	@ (8001b18 <HAL_RCC_OscConfig+0x27c>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	4a84      	ldr	r2, [pc, #528]	@ (8001b18 <HAL_RCC_OscConfig+0x27c>)
 8001908:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800190c:	6013      	str	r3, [r2, #0]
 800190e:	e01d      	b.n	800194c <HAL_RCC_OscConfig+0xb0>
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	685b      	ldr	r3, [r3, #4]
 8001914:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001918:	d10c      	bne.n	8001934 <HAL_RCC_OscConfig+0x98>
 800191a:	4b7f      	ldr	r3, [pc, #508]	@ (8001b18 <HAL_RCC_OscConfig+0x27c>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	4a7e      	ldr	r2, [pc, #504]	@ (8001b18 <HAL_RCC_OscConfig+0x27c>)
 8001920:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001924:	6013      	str	r3, [r2, #0]
 8001926:	4b7c      	ldr	r3, [pc, #496]	@ (8001b18 <HAL_RCC_OscConfig+0x27c>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	4a7b      	ldr	r2, [pc, #492]	@ (8001b18 <HAL_RCC_OscConfig+0x27c>)
 800192c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001930:	6013      	str	r3, [r2, #0]
 8001932:	e00b      	b.n	800194c <HAL_RCC_OscConfig+0xb0>
 8001934:	4b78      	ldr	r3, [pc, #480]	@ (8001b18 <HAL_RCC_OscConfig+0x27c>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4a77      	ldr	r2, [pc, #476]	@ (8001b18 <HAL_RCC_OscConfig+0x27c>)
 800193a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800193e:	6013      	str	r3, [r2, #0]
 8001940:	4b75      	ldr	r3, [pc, #468]	@ (8001b18 <HAL_RCC_OscConfig+0x27c>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4a74      	ldr	r2, [pc, #464]	@ (8001b18 <HAL_RCC_OscConfig+0x27c>)
 8001946:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800194a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	2b00      	cmp	r3, #0
 8001952:	d013      	beq.n	800197c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001954:	f7ff faa4 	bl	8000ea0 <HAL_GetTick>
 8001958:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800195a:	e008      	b.n	800196e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800195c:	f7ff faa0 	bl	8000ea0 <HAL_GetTick>
 8001960:	4602      	mov	r2, r0
 8001962:	693b      	ldr	r3, [r7, #16]
 8001964:	1ad3      	subs	r3, r2, r3
 8001966:	2b64      	cmp	r3, #100	@ 0x64
 8001968:	d901      	bls.n	800196e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800196a:	2303      	movs	r3, #3
 800196c:	e29e      	b.n	8001eac <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800196e:	4b6a      	ldr	r3, [pc, #424]	@ (8001b18 <HAL_RCC_OscConfig+0x27c>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001976:	2b00      	cmp	r3, #0
 8001978:	d0f0      	beq.n	800195c <HAL_RCC_OscConfig+0xc0>
 800197a:	e014      	b.n	80019a6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800197c:	f7ff fa90 	bl	8000ea0 <HAL_GetTick>
 8001980:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001982:	e008      	b.n	8001996 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001984:	f7ff fa8c 	bl	8000ea0 <HAL_GetTick>
 8001988:	4602      	mov	r2, r0
 800198a:	693b      	ldr	r3, [r7, #16]
 800198c:	1ad3      	subs	r3, r2, r3
 800198e:	2b64      	cmp	r3, #100	@ 0x64
 8001990:	d901      	bls.n	8001996 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001992:	2303      	movs	r3, #3
 8001994:	e28a      	b.n	8001eac <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001996:	4b60      	ldr	r3, [pc, #384]	@ (8001b18 <HAL_RCC_OscConfig+0x27c>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d1f0      	bne.n	8001984 <HAL_RCC_OscConfig+0xe8>
 80019a2:	e000      	b.n	80019a6 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f003 0302 	and.w	r3, r3, #2
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d075      	beq.n	8001a9e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80019b2:	4b59      	ldr	r3, [pc, #356]	@ (8001b18 <HAL_RCC_OscConfig+0x27c>)
 80019b4:	689b      	ldr	r3, [r3, #8]
 80019b6:	f003 030c 	and.w	r3, r3, #12
 80019ba:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80019bc:	4b56      	ldr	r3, [pc, #344]	@ (8001b18 <HAL_RCC_OscConfig+0x27c>)
 80019be:	68db      	ldr	r3, [r3, #12]
 80019c0:	f003 0303 	and.w	r3, r3, #3
 80019c4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80019c6:	69bb      	ldr	r3, [r7, #24]
 80019c8:	2b0c      	cmp	r3, #12
 80019ca:	d102      	bne.n	80019d2 <HAL_RCC_OscConfig+0x136>
 80019cc:	697b      	ldr	r3, [r7, #20]
 80019ce:	2b02      	cmp	r3, #2
 80019d0:	d002      	beq.n	80019d8 <HAL_RCC_OscConfig+0x13c>
 80019d2:	69bb      	ldr	r3, [r7, #24]
 80019d4:	2b04      	cmp	r3, #4
 80019d6:	d11f      	bne.n	8001a18 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80019d8:	4b4f      	ldr	r3, [pc, #316]	@ (8001b18 <HAL_RCC_OscConfig+0x27c>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d005      	beq.n	80019f0 <HAL_RCC_OscConfig+0x154>
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	68db      	ldr	r3, [r3, #12]
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d101      	bne.n	80019f0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80019ec:	2301      	movs	r3, #1
 80019ee:	e25d      	b.n	8001eac <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019f0:	4b49      	ldr	r3, [pc, #292]	@ (8001b18 <HAL_RCC_OscConfig+0x27c>)
 80019f2:	685b      	ldr	r3, [r3, #4]
 80019f4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	691b      	ldr	r3, [r3, #16]
 80019fc:	061b      	lsls	r3, r3, #24
 80019fe:	4946      	ldr	r1, [pc, #280]	@ (8001b18 <HAL_RCC_OscConfig+0x27c>)
 8001a00:	4313      	orrs	r3, r2
 8001a02:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001a04:	4b45      	ldr	r3, [pc, #276]	@ (8001b1c <HAL_RCC_OscConfig+0x280>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	4618      	mov	r0, r3
 8001a0a:	f7ff f9fd 	bl	8000e08 <HAL_InitTick>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d043      	beq.n	8001a9c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001a14:	2301      	movs	r3, #1
 8001a16:	e249      	b.n	8001eac <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	68db      	ldr	r3, [r3, #12]
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d023      	beq.n	8001a68 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a20:	4b3d      	ldr	r3, [pc, #244]	@ (8001b18 <HAL_RCC_OscConfig+0x27c>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	4a3c      	ldr	r2, [pc, #240]	@ (8001b18 <HAL_RCC_OscConfig+0x27c>)
 8001a26:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a2a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a2c:	f7ff fa38 	bl	8000ea0 <HAL_GetTick>
 8001a30:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a32:	e008      	b.n	8001a46 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a34:	f7ff fa34 	bl	8000ea0 <HAL_GetTick>
 8001a38:	4602      	mov	r2, r0
 8001a3a:	693b      	ldr	r3, [r7, #16]
 8001a3c:	1ad3      	subs	r3, r2, r3
 8001a3e:	2b02      	cmp	r3, #2
 8001a40:	d901      	bls.n	8001a46 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001a42:	2303      	movs	r3, #3
 8001a44:	e232      	b.n	8001eac <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a46:	4b34      	ldr	r3, [pc, #208]	@ (8001b18 <HAL_RCC_OscConfig+0x27c>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d0f0      	beq.n	8001a34 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a52:	4b31      	ldr	r3, [pc, #196]	@ (8001b18 <HAL_RCC_OscConfig+0x27c>)
 8001a54:	685b      	ldr	r3, [r3, #4]
 8001a56:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	691b      	ldr	r3, [r3, #16]
 8001a5e:	061b      	lsls	r3, r3, #24
 8001a60:	492d      	ldr	r1, [pc, #180]	@ (8001b18 <HAL_RCC_OscConfig+0x27c>)
 8001a62:	4313      	orrs	r3, r2
 8001a64:	604b      	str	r3, [r1, #4]
 8001a66:	e01a      	b.n	8001a9e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a68:	4b2b      	ldr	r3, [pc, #172]	@ (8001b18 <HAL_RCC_OscConfig+0x27c>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	4a2a      	ldr	r2, [pc, #168]	@ (8001b18 <HAL_RCC_OscConfig+0x27c>)
 8001a6e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001a72:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a74:	f7ff fa14 	bl	8000ea0 <HAL_GetTick>
 8001a78:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001a7a:	e008      	b.n	8001a8e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a7c:	f7ff fa10 	bl	8000ea0 <HAL_GetTick>
 8001a80:	4602      	mov	r2, r0
 8001a82:	693b      	ldr	r3, [r7, #16]
 8001a84:	1ad3      	subs	r3, r2, r3
 8001a86:	2b02      	cmp	r3, #2
 8001a88:	d901      	bls.n	8001a8e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001a8a:	2303      	movs	r3, #3
 8001a8c:	e20e      	b.n	8001eac <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001a8e:	4b22      	ldr	r3, [pc, #136]	@ (8001b18 <HAL_RCC_OscConfig+0x27c>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d1f0      	bne.n	8001a7c <HAL_RCC_OscConfig+0x1e0>
 8001a9a:	e000      	b.n	8001a9e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a9c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f003 0308 	and.w	r3, r3, #8
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d041      	beq.n	8001b2e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	695b      	ldr	r3, [r3, #20]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d01c      	beq.n	8001aec <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ab2:	4b19      	ldr	r3, [pc, #100]	@ (8001b18 <HAL_RCC_OscConfig+0x27c>)
 8001ab4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001ab8:	4a17      	ldr	r2, [pc, #92]	@ (8001b18 <HAL_RCC_OscConfig+0x27c>)
 8001aba:	f043 0301 	orr.w	r3, r3, #1
 8001abe:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ac2:	f7ff f9ed 	bl	8000ea0 <HAL_GetTick>
 8001ac6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001ac8:	e008      	b.n	8001adc <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001aca:	f7ff f9e9 	bl	8000ea0 <HAL_GetTick>
 8001ace:	4602      	mov	r2, r0
 8001ad0:	693b      	ldr	r3, [r7, #16]
 8001ad2:	1ad3      	subs	r3, r2, r3
 8001ad4:	2b02      	cmp	r3, #2
 8001ad6:	d901      	bls.n	8001adc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001ad8:	2303      	movs	r3, #3
 8001ada:	e1e7      	b.n	8001eac <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001adc:	4b0e      	ldr	r3, [pc, #56]	@ (8001b18 <HAL_RCC_OscConfig+0x27c>)
 8001ade:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001ae2:	f003 0302 	and.w	r3, r3, #2
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d0ef      	beq.n	8001aca <HAL_RCC_OscConfig+0x22e>
 8001aea:	e020      	b.n	8001b2e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001aec:	4b0a      	ldr	r3, [pc, #40]	@ (8001b18 <HAL_RCC_OscConfig+0x27c>)
 8001aee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001af2:	4a09      	ldr	r2, [pc, #36]	@ (8001b18 <HAL_RCC_OscConfig+0x27c>)
 8001af4:	f023 0301 	bic.w	r3, r3, #1
 8001af8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001afc:	f7ff f9d0 	bl	8000ea0 <HAL_GetTick>
 8001b00:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001b02:	e00d      	b.n	8001b20 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b04:	f7ff f9cc 	bl	8000ea0 <HAL_GetTick>
 8001b08:	4602      	mov	r2, r0
 8001b0a:	693b      	ldr	r3, [r7, #16]
 8001b0c:	1ad3      	subs	r3, r2, r3
 8001b0e:	2b02      	cmp	r3, #2
 8001b10:	d906      	bls.n	8001b20 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001b12:	2303      	movs	r3, #3
 8001b14:	e1ca      	b.n	8001eac <HAL_RCC_OscConfig+0x610>
 8001b16:	bf00      	nop
 8001b18:	40021000 	.word	0x40021000
 8001b1c:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001b20:	4b8c      	ldr	r3, [pc, #560]	@ (8001d54 <HAL_RCC_OscConfig+0x4b8>)
 8001b22:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001b26:	f003 0302 	and.w	r3, r3, #2
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d1ea      	bne.n	8001b04 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f003 0304 	and.w	r3, r3, #4
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	f000 80a6 	beq.w	8001c88 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001b40:	4b84      	ldr	r3, [pc, #528]	@ (8001d54 <HAL_RCC_OscConfig+0x4b8>)
 8001b42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b44:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d101      	bne.n	8001b50 <HAL_RCC_OscConfig+0x2b4>
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	e000      	b.n	8001b52 <HAL_RCC_OscConfig+0x2b6>
 8001b50:	2300      	movs	r3, #0
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d00d      	beq.n	8001b72 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b56:	4b7f      	ldr	r3, [pc, #508]	@ (8001d54 <HAL_RCC_OscConfig+0x4b8>)
 8001b58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b5a:	4a7e      	ldr	r2, [pc, #504]	@ (8001d54 <HAL_RCC_OscConfig+0x4b8>)
 8001b5c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b60:	6593      	str	r3, [r2, #88]	@ 0x58
 8001b62:	4b7c      	ldr	r3, [pc, #496]	@ (8001d54 <HAL_RCC_OscConfig+0x4b8>)
 8001b64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b66:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b6a:	60fb      	str	r3, [r7, #12]
 8001b6c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001b6e:	2301      	movs	r3, #1
 8001b70:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b72:	4b79      	ldr	r3, [pc, #484]	@ (8001d58 <HAL_RCC_OscConfig+0x4bc>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d118      	bne.n	8001bb0 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001b7e:	4b76      	ldr	r3, [pc, #472]	@ (8001d58 <HAL_RCC_OscConfig+0x4bc>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	4a75      	ldr	r2, [pc, #468]	@ (8001d58 <HAL_RCC_OscConfig+0x4bc>)
 8001b84:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b88:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b8a:	f7ff f989 	bl	8000ea0 <HAL_GetTick>
 8001b8e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b90:	e008      	b.n	8001ba4 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b92:	f7ff f985 	bl	8000ea0 <HAL_GetTick>
 8001b96:	4602      	mov	r2, r0
 8001b98:	693b      	ldr	r3, [r7, #16]
 8001b9a:	1ad3      	subs	r3, r2, r3
 8001b9c:	2b02      	cmp	r3, #2
 8001b9e:	d901      	bls.n	8001ba4 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001ba0:	2303      	movs	r3, #3
 8001ba2:	e183      	b.n	8001eac <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ba4:	4b6c      	ldr	r3, [pc, #432]	@ (8001d58 <HAL_RCC_OscConfig+0x4bc>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d0f0      	beq.n	8001b92 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	689b      	ldr	r3, [r3, #8]
 8001bb4:	2b01      	cmp	r3, #1
 8001bb6:	d108      	bne.n	8001bca <HAL_RCC_OscConfig+0x32e>
 8001bb8:	4b66      	ldr	r3, [pc, #408]	@ (8001d54 <HAL_RCC_OscConfig+0x4b8>)
 8001bba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001bbe:	4a65      	ldr	r2, [pc, #404]	@ (8001d54 <HAL_RCC_OscConfig+0x4b8>)
 8001bc0:	f043 0301 	orr.w	r3, r3, #1
 8001bc4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001bc8:	e024      	b.n	8001c14 <HAL_RCC_OscConfig+0x378>
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	689b      	ldr	r3, [r3, #8]
 8001bce:	2b05      	cmp	r3, #5
 8001bd0:	d110      	bne.n	8001bf4 <HAL_RCC_OscConfig+0x358>
 8001bd2:	4b60      	ldr	r3, [pc, #384]	@ (8001d54 <HAL_RCC_OscConfig+0x4b8>)
 8001bd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001bd8:	4a5e      	ldr	r2, [pc, #376]	@ (8001d54 <HAL_RCC_OscConfig+0x4b8>)
 8001bda:	f043 0304 	orr.w	r3, r3, #4
 8001bde:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001be2:	4b5c      	ldr	r3, [pc, #368]	@ (8001d54 <HAL_RCC_OscConfig+0x4b8>)
 8001be4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001be8:	4a5a      	ldr	r2, [pc, #360]	@ (8001d54 <HAL_RCC_OscConfig+0x4b8>)
 8001bea:	f043 0301 	orr.w	r3, r3, #1
 8001bee:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001bf2:	e00f      	b.n	8001c14 <HAL_RCC_OscConfig+0x378>
 8001bf4:	4b57      	ldr	r3, [pc, #348]	@ (8001d54 <HAL_RCC_OscConfig+0x4b8>)
 8001bf6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001bfa:	4a56      	ldr	r2, [pc, #344]	@ (8001d54 <HAL_RCC_OscConfig+0x4b8>)
 8001bfc:	f023 0301 	bic.w	r3, r3, #1
 8001c00:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001c04:	4b53      	ldr	r3, [pc, #332]	@ (8001d54 <HAL_RCC_OscConfig+0x4b8>)
 8001c06:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001c0a:	4a52      	ldr	r2, [pc, #328]	@ (8001d54 <HAL_RCC_OscConfig+0x4b8>)
 8001c0c:	f023 0304 	bic.w	r3, r3, #4
 8001c10:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	689b      	ldr	r3, [r3, #8]
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d016      	beq.n	8001c4a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c1c:	f7ff f940 	bl	8000ea0 <HAL_GetTick>
 8001c20:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c22:	e00a      	b.n	8001c3a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c24:	f7ff f93c 	bl	8000ea0 <HAL_GetTick>
 8001c28:	4602      	mov	r2, r0
 8001c2a:	693b      	ldr	r3, [r7, #16]
 8001c2c:	1ad3      	subs	r3, r2, r3
 8001c2e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d901      	bls.n	8001c3a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001c36:	2303      	movs	r3, #3
 8001c38:	e138      	b.n	8001eac <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c3a:	4b46      	ldr	r3, [pc, #280]	@ (8001d54 <HAL_RCC_OscConfig+0x4b8>)
 8001c3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001c40:	f003 0302 	and.w	r3, r3, #2
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d0ed      	beq.n	8001c24 <HAL_RCC_OscConfig+0x388>
 8001c48:	e015      	b.n	8001c76 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c4a:	f7ff f929 	bl	8000ea0 <HAL_GetTick>
 8001c4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001c50:	e00a      	b.n	8001c68 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c52:	f7ff f925 	bl	8000ea0 <HAL_GetTick>
 8001c56:	4602      	mov	r2, r0
 8001c58:	693b      	ldr	r3, [r7, #16]
 8001c5a:	1ad3      	subs	r3, r2, r3
 8001c5c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c60:	4293      	cmp	r3, r2
 8001c62:	d901      	bls.n	8001c68 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001c64:	2303      	movs	r3, #3
 8001c66:	e121      	b.n	8001eac <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001c68:	4b3a      	ldr	r3, [pc, #232]	@ (8001d54 <HAL_RCC_OscConfig+0x4b8>)
 8001c6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001c6e:	f003 0302 	and.w	r3, r3, #2
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d1ed      	bne.n	8001c52 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001c76:	7ffb      	ldrb	r3, [r7, #31]
 8001c78:	2b01      	cmp	r3, #1
 8001c7a:	d105      	bne.n	8001c88 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c7c:	4b35      	ldr	r3, [pc, #212]	@ (8001d54 <HAL_RCC_OscConfig+0x4b8>)
 8001c7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c80:	4a34      	ldr	r2, [pc, #208]	@ (8001d54 <HAL_RCC_OscConfig+0x4b8>)
 8001c82:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001c86:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f003 0320 	and.w	r3, r3, #32
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d03c      	beq.n	8001d0e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	699b      	ldr	r3, [r3, #24]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d01c      	beq.n	8001cd6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001c9c:	4b2d      	ldr	r3, [pc, #180]	@ (8001d54 <HAL_RCC_OscConfig+0x4b8>)
 8001c9e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001ca2:	4a2c      	ldr	r2, [pc, #176]	@ (8001d54 <HAL_RCC_OscConfig+0x4b8>)
 8001ca4:	f043 0301 	orr.w	r3, r3, #1
 8001ca8:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cac:	f7ff f8f8 	bl	8000ea0 <HAL_GetTick>
 8001cb0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001cb2:	e008      	b.n	8001cc6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001cb4:	f7ff f8f4 	bl	8000ea0 <HAL_GetTick>
 8001cb8:	4602      	mov	r2, r0
 8001cba:	693b      	ldr	r3, [r7, #16]
 8001cbc:	1ad3      	subs	r3, r2, r3
 8001cbe:	2b02      	cmp	r3, #2
 8001cc0:	d901      	bls.n	8001cc6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001cc2:	2303      	movs	r3, #3
 8001cc4:	e0f2      	b.n	8001eac <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001cc6:	4b23      	ldr	r3, [pc, #140]	@ (8001d54 <HAL_RCC_OscConfig+0x4b8>)
 8001cc8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001ccc:	f003 0302 	and.w	r3, r3, #2
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d0ef      	beq.n	8001cb4 <HAL_RCC_OscConfig+0x418>
 8001cd4:	e01b      	b.n	8001d0e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001cd6:	4b1f      	ldr	r3, [pc, #124]	@ (8001d54 <HAL_RCC_OscConfig+0x4b8>)
 8001cd8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001cdc:	4a1d      	ldr	r2, [pc, #116]	@ (8001d54 <HAL_RCC_OscConfig+0x4b8>)
 8001cde:	f023 0301 	bic.w	r3, r3, #1
 8001ce2:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ce6:	f7ff f8db 	bl	8000ea0 <HAL_GetTick>
 8001cea:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001cec:	e008      	b.n	8001d00 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001cee:	f7ff f8d7 	bl	8000ea0 <HAL_GetTick>
 8001cf2:	4602      	mov	r2, r0
 8001cf4:	693b      	ldr	r3, [r7, #16]
 8001cf6:	1ad3      	subs	r3, r2, r3
 8001cf8:	2b02      	cmp	r3, #2
 8001cfa:	d901      	bls.n	8001d00 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001cfc:	2303      	movs	r3, #3
 8001cfe:	e0d5      	b.n	8001eac <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001d00:	4b14      	ldr	r3, [pc, #80]	@ (8001d54 <HAL_RCC_OscConfig+0x4b8>)
 8001d02:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001d06:	f003 0302 	and.w	r3, r3, #2
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d1ef      	bne.n	8001cee <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	69db      	ldr	r3, [r3, #28]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	f000 80c9 	beq.w	8001eaa <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001d18:	4b0e      	ldr	r3, [pc, #56]	@ (8001d54 <HAL_RCC_OscConfig+0x4b8>)
 8001d1a:	689b      	ldr	r3, [r3, #8]
 8001d1c:	f003 030c 	and.w	r3, r3, #12
 8001d20:	2b0c      	cmp	r3, #12
 8001d22:	f000 8083 	beq.w	8001e2c <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	69db      	ldr	r3, [r3, #28]
 8001d2a:	2b02      	cmp	r3, #2
 8001d2c:	d15e      	bne.n	8001dec <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d2e:	4b09      	ldr	r3, [pc, #36]	@ (8001d54 <HAL_RCC_OscConfig+0x4b8>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	4a08      	ldr	r2, [pc, #32]	@ (8001d54 <HAL_RCC_OscConfig+0x4b8>)
 8001d34:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001d38:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d3a:	f7ff f8b1 	bl	8000ea0 <HAL_GetTick>
 8001d3e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d40:	e00c      	b.n	8001d5c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d42:	f7ff f8ad 	bl	8000ea0 <HAL_GetTick>
 8001d46:	4602      	mov	r2, r0
 8001d48:	693b      	ldr	r3, [r7, #16]
 8001d4a:	1ad3      	subs	r3, r2, r3
 8001d4c:	2b02      	cmp	r3, #2
 8001d4e:	d905      	bls.n	8001d5c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8001d50:	2303      	movs	r3, #3
 8001d52:	e0ab      	b.n	8001eac <HAL_RCC_OscConfig+0x610>
 8001d54:	40021000 	.word	0x40021000
 8001d58:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d5c:	4b55      	ldr	r3, [pc, #340]	@ (8001eb4 <HAL_RCC_OscConfig+0x618>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d1ec      	bne.n	8001d42 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d68:	4b52      	ldr	r3, [pc, #328]	@ (8001eb4 <HAL_RCC_OscConfig+0x618>)
 8001d6a:	68da      	ldr	r2, [r3, #12]
 8001d6c:	4b52      	ldr	r3, [pc, #328]	@ (8001eb8 <HAL_RCC_OscConfig+0x61c>)
 8001d6e:	4013      	ands	r3, r2
 8001d70:	687a      	ldr	r2, [r7, #4]
 8001d72:	6a11      	ldr	r1, [r2, #32]
 8001d74:	687a      	ldr	r2, [r7, #4]
 8001d76:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001d78:	3a01      	subs	r2, #1
 8001d7a:	0112      	lsls	r2, r2, #4
 8001d7c:	4311      	orrs	r1, r2
 8001d7e:	687a      	ldr	r2, [r7, #4]
 8001d80:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8001d82:	0212      	lsls	r2, r2, #8
 8001d84:	4311      	orrs	r1, r2
 8001d86:	687a      	ldr	r2, [r7, #4]
 8001d88:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001d8a:	0852      	lsrs	r2, r2, #1
 8001d8c:	3a01      	subs	r2, #1
 8001d8e:	0552      	lsls	r2, r2, #21
 8001d90:	4311      	orrs	r1, r2
 8001d92:	687a      	ldr	r2, [r7, #4]
 8001d94:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001d96:	0852      	lsrs	r2, r2, #1
 8001d98:	3a01      	subs	r2, #1
 8001d9a:	0652      	lsls	r2, r2, #25
 8001d9c:	4311      	orrs	r1, r2
 8001d9e:	687a      	ldr	r2, [r7, #4]
 8001da0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001da2:	06d2      	lsls	r2, r2, #27
 8001da4:	430a      	orrs	r2, r1
 8001da6:	4943      	ldr	r1, [pc, #268]	@ (8001eb4 <HAL_RCC_OscConfig+0x618>)
 8001da8:	4313      	orrs	r3, r2
 8001daa:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001dac:	4b41      	ldr	r3, [pc, #260]	@ (8001eb4 <HAL_RCC_OscConfig+0x618>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4a40      	ldr	r2, [pc, #256]	@ (8001eb4 <HAL_RCC_OscConfig+0x618>)
 8001db2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001db6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001db8:	4b3e      	ldr	r3, [pc, #248]	@ (8001eb4 <HAL_RCC_OscConfig+0x618>)
 8001dba:	68db      	ldr	r3, [r3, #12]
 8001dbc:	4a3d      	ldr	r2, [pc, #244]	@ (8001eb4 <HAL_RCC_OscConfig+0x618>)
 8001dbe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001dc2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dc4:	f7ff f86c 	bl	8000ea0 <HAL_GetTick>
 8001dc8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001dca:	e008      	b.n	8001dde <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dcc:	f7ff f868 	bl	8000ea0 <HAL_GetTick>
 8001dd0:	4602      	mov	r2, r0
 8001dd2:	693b      	ldr	r3, [r7, #16]
 8001dd4:	1ad3      	subs	r3, r2, r3
 8001dd6:	2b02      	cmp	r3, #2
 8001dd8:	d901      	bls.n	8001dde <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8001dda:	2303      	movs	r3, #3
 8001ddc:	e066      	b.n	8001eac <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001dde:	4b35      	ldr	r3, [pc, #212]	@ (8001eb4 <HAL_RCC_OscConfig+0x618>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d0f0      	beq.n	8001dcc <HAL_RCC_OscConfig+0x530>
 8001dea:	e05e      	b.n	8001eaa <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dec:	4b31      	ldr	r3, [pc, #196]	@ (8001eb4 <HAL_RCC_OscConfig+0x618>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4a30      	ldr	r2, [pc, #192]	@ (8001eb4 <HAL_RCC_OscConfig+0x618>)
 8001df2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001df6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001df8:	f7ff f852 	bl	8000ea0 <HAL_GetTick>
 8001dfc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001dfe:	e008      	b.n	8001e12 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e00:	f7ff f84e 	bl	8000ea0 <HAL_GetTick>
 8001e04:	4602      	mov	r2, r0
 8001e06:	693b      	ldr	r3, [r7, #16]
 8001e08:	1ad3      	subs	r3, r2, r3
 8001e0a:	2b02      	cmp	r3, #2
 8001e0c:	d901      	bls.n	8001e12 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8001e0e:	2303      	movs	r3, #3
 8001e10:	e04c      	b.n	8001eac <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e12:	4b28      	ldr	r3, [pc, #160]	@ (8001eb4 <HAL_RCC_OscConfig+0x618>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d1f0      	bne.n	8001e00 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001e1e:	4b25      	ldr	r3, [pc, #148]	@ (8001eb4 <HAL_RCC_OscConfig+0x618>)
 8001e20:	68da      	ldr	r2, [r3, #12]
 8001e22:	4924      	ldr	r1, [pc, #144]	@ (8001eb4 <HAL_RCC_OscConfig+0x618>)
 8001e24:	4b25      	ldr	r3, [pc, #148]	@ (8001ebc <HAL_RCC_OscConfig+0x620>)
 8001e26:	4013      	ands	r3, r2
 8001e28:	60cb      	str	r3, [r1, #12]
 8001e2a:	e03e      	b.n	8001eaa <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	69db      	ldr	r3, [r3, #28]
 8001e30:	2b01      	cmp	r3, #1
 8001e32:	d101      	bne.n	8001e38 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8001e34:	2301      	movs	r3, #1
 8001e36:	e039      	b.n	8001eac <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001e38:	4b1e      	ldr	r3, [pc, #120]	@ (8001eb4 <HAL_RCC_OscConfig+0x618>)
 8001e3a:	68db      	ldr	r3, [r3, #12]
 8001e3c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e3e:	697b      	ldr	r3, [r7, #20]
 8001e40:	f003 0203 	and.w	r2, r3, #3
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	6a1b      	ldr	r3, [r3, #32]
 8001e48:	429a      	cmp	r2, r3
 8001e4a:	d12c      	bne.n	8001ea6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001e4c:	697b      	ldr	r3, [r7, #20]
 8001e4e:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e56:	3b01      	subs	r3, #1
 8001e58:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e5a:	429a      	cmp	r2, r3
 8001e5c:	d123      	bne.n	8001ea6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001e5e:	697b      	ldr	r3, [r7, #20]
 8001e60:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e68:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001e6a:	429a      	cmp	r2, r3
 8001e6c:	d11b      	bne.n	8001ea6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001e6e:	697b      	ldr	r3, [r7, #20]
 8001e70:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e78:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001e7a:	429a      	cmp	r2, r3
 8001e7c:	d113      	bne.n	8001ea6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001e7e:	697b      	ldr	r3, [r7, #20]
 8001e80:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e88:	085b      	lsrs	r3, r3, #1
 8001e8a:	3b01      	subs	r3, #1
 8001e8c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001e8e:	429a      	cmp	r2, r3
 8001e90:	d109      	bne.n	8001ea6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001e92:	697b      	ldr	r3, [r7, #20]
 8001e94:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e9c:	085b      	lsrs	r3, r3, #1
 8001e9e:	3b01      	subs	r3, #1
 8001ea0:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ea2:	429a      	cmp	r2, r3
 8001ea4:	d001      	beq.n	8001eaa <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	e000      	b.n	8001eac <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8001eaa:	2300      	movs	r3, #0
}
 8001eac:	4618      	mov	r0, r3
 8001eae:	3720      	adds	r7, #32
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bd80      	pop	{r7, pc}
 8001eb4:	40021000 	.word	0x40021000
 8001eb8:	019f800c 	.word	0x019f800c
 8001ebc:	feeefffc 	.word	0xfeeefffc

08001ec0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b086      	sub	sp, #24
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
 8001ec8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d101      	bne.n	8001ed8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001ed4:	2301      	movs	r3, #1
 8001ed6:	e11e      	b.n	8002116 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001ed8:	4b91      	ldr	r3, [pc, #580]	@ (8002120 <HAL_RCC_ClockConfig+0x260>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f003 030f 	and.w	r3, r3, #15
 8001ee0:	683a      	ldr	r2, [r7, #0]
 8001ee2:	429a      	cmp	r2, r3
 8001ee4:	d910      	bls.n	8001f08 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ee6:	4b8e      	ldr	r3, [pc, #568]	@ (8002120 <HAL_RCC_ClockConfig+0x260>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f023 020f 	bic.w	r2, r3, #15
 8001eee:	498c      	ldr	r1, [pc, #560]	@ (8002120 <HAL_RCC_ClockConfig+0x260>)
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	4313      	orrs	r3, r2
 8001ef4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ef6:	4b8a      	ldr	r3, [pc, #552]	@ (8002120 <HAL_RCC_ClockConfig+0x260>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f003 030f 	and.w	r3, r3, #15
 8001efe:	683a      	ldr	r2, [r7, #0]
 8001f00:	429a      	cmp	r2, r3
 8001f02:	d001      	beq.n	8001f08 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001f04:	2301      	movs	r3, #1
 8001f06:	e106      	b.n	8002116 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f003 0301 	and.w	r3, r3, #1
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d073      	beq.n	8001ffc <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	2b03      	cmp	r3, #3
 8001f1a:	d129      	bne.n	8001f70 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f1c:	4b81      	ldr	r3, [pc, #516]	@ (8002124 <HAL_RCC_ClockConfig+0x264>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d101      	bne.n	8001f2c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001f28:	2301      	movs	r3, #1
 8001f2a:	e0f4      	b.n	8002116 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001f2c:	f000 f966 	bl	80021fc <RCC_GetSysClockFreqFromPLLSource>
 8001f30:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8001f32:	693b      	ldr	r3, [r7, #16]
 8001f34:	4a7c      	ldr	r2, [pc, #496]	@ (8002128 <HAL_RCC_ClockConfig+0x268>)
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d93f      	bls.n	8001fba <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001f3a:	4b7a      	ldr	r3, [pc, #488]	@ (8002124 <HAL_RCC_ClockConfig+0x264>)
 8001f3c:	689b      	ldr	r3, [r3, #8]
 8001f3e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d009      	beq.n	8001f5a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d033      	beq.n	8001fba <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d12f      	bne.n	8001fba <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001f5a:	4b72      	ldr	r3, [pc, #456]	@ (8002124 <HAL_RCC_ClockConfig+0x264>)
 8001f5c:	689b      	ldr	r3, [r3, #8]
 8001f5e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001f62:	4a70      	ldr	r2, [pc, #448]	@ (8002124 <HAL_RCC_ClockConfig+0x264>)
 8001f64:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001f68:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001f6a:	2380      	movs	r3, #128	@ 0x80
 8001f6c:	617b      	str	r3, [r7, #20]
 8001f6e:	e024      	b.n	8001fba <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	685b      	ldr	r3, [r3, #4]
 8001f74:	2b02      	cmp	r3, #2
 8001f76:	d107      	bne.n	8001f88 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f78:	4b6a      	ldr	r3, [pc, #424]	@ (8002124 <HAL_RCC_ClockConfig+0x264>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d109      	bne.n	8001f98 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001f84:	2301      	movs	r3, #1
 8001f86:	e0c6      	b.n	8002116 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f88:	4b66      	ldr	r3, [pc, #408]	@ (8002124 <HAL_RCC_ClockConfig+0x264>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d101      	bne.n	8001f98 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001f94:	2301      	movs	r3, #1
 8001f96:	e0be      	b.n	8002116 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001f98:	f000 f8ce 	bl	8002138 <HAL_RCC_GetSysClockFreq>
 8001f9c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8001f9e:	693b      	ldr	r3, [r7, #16]
 8001fa0:	4a61      	ldr	r2, [pc, #388]	@ (8002128 <HAL_RCC_ClockConfig+0x268>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d909      	bls.n	8001fba <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001fa6:	4b5f      	ldr	r3, [pc, #380]	@ (8002124 <HAL_RCC_ClockConfig+0x264>)
 8001fa8:	689b      	ldr	r3, [r3, #8]
 8001faa:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001fae:	4a5d      	ldr	r2, [pc, #372]	@ (8002124 <HAL_RCC_ClockConfig+0x264>)
 8001fb0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001fb4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001fb6:	2380      	movs	r3, #128	@ 0x80
 8001fb8:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001fba:	4b5a      	ldr	r3, [pc, #360]	@ (8002124 <HAL_RCC_ClockConfig+0x264>)
 8001fbc:	689b      	ldr	r3, [r3, #8]
 8001fbe:	f023 0203 	bic.w	r2, r3, #3
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	4957      	ldr	r1, [pc, #348]	@ (8002124 <HAL_RCC_ClockConfig+0x264>)
 8001fc8:	4313      	orrs	r3, r2
 8001fca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001fcc:	f7fe ff68 	bl	8000ea0 <HAL_GetTick>
 8001fd0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fd2:	e00a      	b.n	8001fea <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fd4:	f7fe ff64 	bl	8000ea0 <HAL_GetTick>
 8001fd8:	4602      	mov	r2, r0
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	1ad3      	subs	r3, r2, r3
 8001fde:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d901      	bls.n	8001fea <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8001fe6:	2303      	movs	r3, #3
 8001fe8:	e095      	b.n	8002116 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fea:	4b4e      	ldr	r3, [pc, #312]	@ (8002124 <HAL_RCC_ClockConfig+0x264>)
 8001fec:	689b      	ldr	r3, [r3, #8]
 8001fee:	f003 020c 	and.w	r2, r3, #12
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	685b      	ldr	r3, [r3, #4]
 8001ff6:	009b      	lsls	r3, r3, #2
 8001ff8:	429a      	cmp	r2, r3
 8001ffa:	d1eb      	bne.n	8001fd4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f003 0302 	and.w	r3, r3, #2
 8002004:	2b00      	cmp	r3, #0
 8002006:	d023      	beq.n	8002050 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f003 0304 	and.w	r3, r3, #4
 8002010:	2b00      	cmp	r3, #0
 8002012:	d005      	beq.n	8002020 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002014:	4b43      	ldr	r3, [pc, #268]	@ (8002124 <HAL_RCC_ClockConfig+0x264>)
 8002016:	689b      	ldr	r3, [r3, #8]
 8002018:	4a42      	ldr	r2, [pc, #264]	@ (8002124 <HAL_RCC_ClockConfig+0x264>)
 800201a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800201e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f003 0308 	and.w	r3, r3, #8
 8002028:	2b00      	cmp	r3, #0
 800202a:	d007      	beq.n	800203c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800202c:	4b3d      	ldr	r3, [pc, #244]	@ (8002124 <HAL_RCC_ClockConfig+0x264>)
 800202e:	689b      	ldr	r3, [r3, #8]
 8002030:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8002034:	4a3b      	ldr	r2, [pc, #236]	@ (8002124 <HAL_RCC_ClockConfig+0x264>)
 8002036:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800203a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800203c:	4b39      	ldr	r3, [pc, #228]	@ (8002124 <HAL_RCC_ClockConfig+0x264>)
 800203e:	689b      	ldr	r3, [r3, #8]
 8002040:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	689b      	ldr	r3, [r3, #8]
 8002048:	4936      	ldr	r1, [pc, #216]	@ (8002124 <HAL_RCC_ClockConfig+0x264>)
 800204a:	4313      	orrs	r3, r2
 800204c:	608b      	str	r3, [r1, #8]
 800204e:	e008      	b.n	8002062 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002050:	697b      	ldr	r3, [r7, #20]
 8002052:	2b80      	cmp	r3, #128	@ 0x80
 8002054:	d105      	bne.n	8002062 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002056:	4b33      	ldr	r3, [pc, #204]	@ (8002124 <HAL_RCC_ClockConfig+0x264>)
 8002058:	689b      	ldr	r3, [r3, #8]
 800205a:	4a32      	ldr	r2, [pc, #200]	@ (8002124 <HAL_RCC_ClockConfig+0x264>)
 800205c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002060:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002062:	4b2f      	ldr	r3, [pc, #188]	@ (8002120 <HAL_RCC_ClockConfig+0x260>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f003 030f 	and.w	r3, r3, #15
 800206a:	683a      	ldr	r2, [r7, #0]
 800206c:	429a      	cmp	r2, r3
 800206e:	d21d      	bcs.n	80020ac <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002070:	4b2b      	ldr	r3, [pc, #172]	@ (8002120 <HAL_RCC_ClockConfig+0x260>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f023 020f 	bic.w	r2, r3, #15
 8002078:	4929      	ldr	r1, [pc, #164]	@ (8002120 <HAL_RCC_ClockConfig+0x260>)
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	4313      	orrs	r3, r2
 800207e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002080:	f7fe ff0e 	bl	8000ea0 <HAL_GetTick>
 8002084:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002086:	e00a      	b.n	800209e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002088:	f7fe ff0a 	bl	8000ea0 <HAL_GetTick>
 800208c:	4602      	mov	r2, r0
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	1ad3      	subs	r3, r2, r3
 8002092:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002096:	4293      	cmp	r3, r2
 8002098:	d901      	bls.n	800209e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800209a:	2303      	movs	r3, #3
 800209c:	e03b      	b.n	8002116 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800209e:	4b20      	ldr	r3, [pc, #128]	@ (8002120 <HAL_RCC_ClockConfig+0x260>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f003 030f 	and.w	r3, r3, #15
 80020a6:	683a      	ldr	r2, [r7, #0]
 80020a8:	429a      	cmp	r2, r3
 80020aa:	d1ed      	bne.n	8002088 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f003 0304 	and.w	r3, r3, #4
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d008      	beq.n	80020ca <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80020b8:	4b1a      	ldr	r3, [pc, #104]	@ (8002124 <HAL_RCC_ClockConfig+0x264>)
 80020ba:	689b      	ldr	r3, [r3, #8]
 80020bc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	68db      	ldr	r3, [r3, #12]
 80020c4:	4917      	ldr	r1, [pc, #92]	@ (8002124 <HAL_RCC_ClockConfig+0x264>)
 80020c6:	4313      	orrs	r3, r2
 80020c8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f003 0308 	and.w	r3, r3, #8
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d009      	beq.n	80020ea <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80020d6:	4b13      	ldr	r3, [pc, #76]	@ (8002124 <HAL_RCC_ClockConfig+0x264>)
 80020d8:	689b      	ldr	r3, [r3, #8]
 80020da:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	691b      	ldr	r3, [r3, #16]
 80020e2:	00db      	lsls	r3, r3, #3
 80020e4:	490f      	ldr	r1, [pc, #60]	@ (8002124 <HAL_RCC_ClockConfig+0x264>)
 80020e6:	4313      	orrs	r3, r2
 80020e8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80020ea:	f000 f825 	bl	8002138 <HAL_RCC_GetSysClockFreq>
 80020ee:	4602      	mov	r2, r0
 80020f0:	4b0c      	ldr	r3, [pc, #48]	@ (8002124 <HAL_RCC_ClockConfig+0x264>)
 80020f2:	689b      	ldr	r3, [r3, #8]
 80020f4:	091b      	lsrs	r3, r3, #4
 80020f6:	f003 030f 	and.w	r3, r3, #15
 80020fa:	490c      	ldr	r1, [pc, #48]	@ (800212c <HAL_RCC_ClockConfig+0x26c>)
 80020fc:	5ccb      	ldrb	r3, [r1, r3]
 80020fe:	f003 031f 	and.w	r3, r3, #31
 8002102:	fa22 f303 	lsr.w	r3, r2, r3
 8002106:	4a0a      	ldr	r2, [pc, #40]	@ (8002130 <HAL_RCC_ClockConfig+0x270>)
 8002108:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800210a:	4b0a      	ldr	r3, [pc, #40]	@ (8002134 <HAL_RCC_ClockConfig+0x274>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4618      	mov	r0, r3
 8002110:	f7fe fe7a 	bl	8000e08 <HAL_InitTick>
 8002114:	4603      	mov	r3, r0
}
 8002116:	4618      	mov	r0, r3
 8002118:	3718      	adds	r7, #24
 800211a:	46bd      	mov	sp, r7
 800211c:	bd80      	pop	{r7, pc}
 800211e:	bf00      	nop
 8002120:	40022000 	.word	0x40022000
 8002124:	40021000 	.word	0x40021000
 8002128:	04c4b400 	.word	0x04c4b400
 800212c:	080033ac 	.word	0x080033ac
 8002130:	20000000 	.word	0x20000000
 8002134:	20000004 	.word	0x20000004

08002138 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002138:	b480      	push	{r7}
 800213a:	b087      	sub	sp, #28
 800213c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800213e:	4b2c      	ldr	r3, [pc, #176]	@ (80021f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002140:	689b      	ldr	r3, [r3, #8]
 8002142:	f003 030c 	and.w	r3, r3, #12
 8002146:	2b04      	cmp	r3, #4
 8002148:	d102      	bne.n	8002150 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800214a:	4b2a      	ldr	r3, [pc, #168]	@ (80021f4 <HAL_RCC_GetSysClockFreq+0xbc>)
 800214c:	613b      	str	r3, [r7, #16]
 800214e:	e047      	b.n	80021e0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002150:	4b27      	ldr	r3, [pc, #156]	@ (80021f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002152:	689b      	ldr	r3, [r3, #8]
 8002154:	f003 030c 	and.w	r3, r3, #12
 8002158:	2b08      	cmp	r3, #8
 800215a:	d102      	bne.n	8002162 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800215c:	4b26      	ldr	r3, [pc, #152]	@ (80021f8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800215e:	613b      	str	r3, [r7, #16]
 8002160:	e03e      	b.n	80021e0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002162:	4b23      	ldr	r3, [pc, #140]	@ (80021f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002164:	689b      	ldr	r3, [r3, #8]
 8002166:	f003 030c 	and.w	r3, r3, #12
 800216a:	2b0c      	cmp	r3, #12
 800216c:	d136      	bne.n	80021dc <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800216e:	4b20      	ldr	r3, [pc, #128]	@ (80021f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002170:	68db      	ldr	r3, [r3, #12]
 8002172:	f003 0303 	and.w	r3, r3, #3
 8002176:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002178:	4b1d      	ldr	r3, [pc, #116]	@ (80021f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800217a:	68db      	ldr	r3, [r3, #12]
 800217c:	091b      	lsrs	r3, r3, #4
 800217e:	f003 030f 	and.w	r3, r3, #15
 8002182:	3301      	adds	r3, #1
 8002184:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	2b03      	cmp	r3, #3
 800218a:	d10c      	bne.n	80021a6 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800218c:	4a1a      	ldr	r2, [pc, #104]	@ (80021f8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800218e:	68bb      	ldr	r3, [r7, #8]
 8002190:	fbb2 f3f3 	udiv	r3, r2, r3
 8002194:	4a16      	ldr	r2, [pc, #88]	@ (80021f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002196:	68d2      	ldr	r2, [r2, #12]
 8002198:	0a12      	lsrs	r2, r2, #8
 800219a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800219e:	fb02 f303 	mul.w	r3, r2, r3
 80021a2:	617b      	str	r3, [r7, #20]
      break;
 80021a4:	e00c      	b.n	80021c0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80021a6:	4a13      	ldr	r2, [pc, #76]	@ (80021f4 <HAL_RCC_GetSysClockFreq+0xbc>)
 80021a8:	68bb      	ldr	r3, [r7, #8]
 80021aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80021ae:	4a10      	ldr	r2, [pc, #64]	@ (80021f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80021b0:	68d2      	ldr	r2, [r2, #12]
 80021b2:	0a12      	lsrs	r2, r2, #8
 80021b4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80021b8:	fb02 f303 	mul.w	r3, r2, r3
 80021bc:	617b      	str	r3, [r7, #20]
      break;
 80021be:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80021c0:	4b0b      	ldr	r3, [pc, #44]	@ (80021f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80021c2:	68db      	ldr	r3, [r3, #12]
 80021c4:	0e5b      	lsrs	r3, r3, #25
 80021c6:	f003 0303 	and.w	r3, r3, #3
 80021ca:	3301      	adds	r3, #1
 80021cc:	005b      	lsls	r3, r3, #1
 80021ce:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80021d0:	697a      	ldr	r2, [r7, #20]
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80021d8:	613b      	str	r3, [r7, #16]
 80021da:	e001      	b.n	80021e0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80021dc:	2300      	movs	r3, #0
 80021de:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80021e0:	693b      	ldr	r3, [r7, #16]
}
 80021e2:	4618      	mov	r0, r3
 80021e4:	371c      	adds	r7, #28
 80021e6:	46bd      	mov	sp, r7
 80021e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ec:	4770      	bx	lr
 80021ee:	bf00      	nop
 80021f0:	40021000 	.word	0x40021000
 80021f4:	00f42400 	.word	0x00f42400
 80021f8:	007a1200 	.word	0x007a1200

080021fc <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80021fc:	b480      	push	{r7}
 80021fe:	b087      	sub	sp, #28
 8002200:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002202:	4b1e      	ldr	r3, [pc, #120]	@ (800227c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002204:	68db      	ldr	r3, [r3, #12]
 8002206:	f003 0303 	and.w	r3, r3, #3
 800220a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800220c:	4b1b      	ldr	r3, [pc, #108]	@ (800227c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800220e:	68db      	ldr	r3, [r3, #12]
 8002210:	091b      	lsrs	r3, r3, #4
 8002212:	f003 030f 	and.w	r3, r3, #15
 8002216:	3301      	adds	r3, #1
 8002218:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800221a:	693b      	ldr	r3, [r7, #16]
 800221c:	2b03      	cmp	r3, #3
 800221e:	d10c      	bne.n	800223a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002220:	4a17      	ldr	r2, [pc, #92]	@ (8002280 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	fbb2 f3f3 	udiv	r3, r2, r3
 8002228:	4a14      	ldr	r2, [pc, #80]	@ (800227c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800222a:	68d2      	ldr	r2, [r2, #12]
 800222c:	0a12      	lsrs	r2, r2, #8
 800222e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002232:	fb02 f303 	mul.w	r3, r2, r3
 8002236:	617b      	str	r3, [r7, #20]
    break;
 8002238:	e00c      	b.n	8002254 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800223a:	4a12      	ldr	r2, [pc, #72]	@ (8002284 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002242:	4a0e      	ldr	r2, [pc, #56]	@ (800227c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002244:	68d2      	ldr	r2, [r2, #12]
 8002246:	0a12      	lsrs	r2, r2, #8
 8002248:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800224c:	fb02 f303 	mul.w	r3, r2, r3
 8002250:	617b      	str	r3, [r7, #20]
    break;
 8002252:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002254:	4b09      	ldr	r3, [pc, #36]	@ (800227c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002256:	68db      	ldr	r3, [r3, #12]
 8002258:	0e5b      	lsrs	r3, r3, #25
 800225a:	f003 0303 	and.w	r3, r3, #3
 800225e:	3301      	adds	r3, #1
 8002260:	005b      	lsls	r3, r3, #1
 8002262:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002264:	697a      	ldr	r2, [r7, #20]
 8002266:	68bb      	ldr	r3, [r7, #8]
 8002268:	fbb2 f3f3 	udiv	r3, r2, r3
 800226c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800226e:	687b      	ldr	r3, [r7, #4]
}
 8002270:	4618      	mov	r0, r3
 8002272:	371c      	adds	r7, #28
 8002274:	46bd      	mov	sp, r7
 8002276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227a:	4770      	bx	lr
 800227c:	40021000 	.word	0x40021000
 8002280:	007a1200 	.word	0x007a1200
 8002284:	00f42400 	.word	0x00f42400

08002288 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b084      	sub	sp, #16
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2b00      	cmp	r3, #0
 8002294:	d101      	bne.n	800229a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002296:	2301      	movs	r3, #1
 8002298:	e09d      	b.n	80023d6 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d108      	bne.n	80022b4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80022aa:	d009      	beq.n	80022c0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2200      	movs	r2, #0
 80022b0:	61da      	str	r2, [r3, #28]
 80022b2:	e005      	b.n	80022c0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2200      	movs	r2, #0
 80022b8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	2200      	movs	r2, #0
 80022be:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2200      	movs	r2, #0
 80022c4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80022cc:	b2db      	uxtb	r3, r3
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d106      	bne.n	80022e0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	2200      	movs	r2, #0
 80022d6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80022da:	6878      	ldr	r0, [r7, #4]
 80022dc:	f7fe fb04 	bl	80008e8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2202      	movs	r2, #2
 80022e4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	681a      	ldr	r2, [r3, #0]
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80022f6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	68db      	ldr	r3, [r3, #12]
 80022fc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002300:	d902      	bls.n	8002308 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002302:	2300      	movs	r3, #0
 8002304:	60fb      	str	r3, [r7, #12]
 8002306:	e002      	b.n	800230e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002308:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800230c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	68db      	ldr	r3, [r3, #12]
 8002312:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8002316:	d007      	beq.n	8002328 <HAL_SPI_Init+0xa0>
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	68db      	ldr	r3, [r3, #12]
 800231c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002320:	d002      	beq.n	8002328 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2200      	movs	r2, #0
 8002326:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	689b      	ldr	r3, [r3, #8]
 8002334:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002338:	431a      	orrs	r2, r3
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	691b      	ldr	r3, [r3, #16]
 800233e:	f003 0302 	and.w	r3, r3, #2
 8002342:	431a      	orrs	r2, r3
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	695b      	ldr	r3, [r3, #20]
 8002348:	f003 0301 	and.w	r3, r3, #1
 800234c:	431a      	orrs	r2, r3
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	699b      	ldr	r3, [r3, #24]
 8002352:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002356:	431a      	orrs	r2, r3
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	69db      	ldr	r3, [r3, #28]
 800235c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002360:	431a      	orrs	r2, r3
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6a1b      	ldr	r3, [r3, #32]
 8002366:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800236a:	ea42 0103 	orr.w	r1, r2, r3
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002372:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	430a      	orrs	r2, r1
 800237c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	699b      	ldr	r3, [r3, #24]
 8002382:	0c1b      	lsrs	r3, r3, #16
 8002384:	f003 0204 	and.w	r2, r3, #4
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800238c:	f003 0310 	and.w	r3, r3, #16
 8002390:	431a      	orrs	r2, r3
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002396:	f003 0308 	and.w	r3, r3, #8
 800239a:	431a      	orrs	r2, r3
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	68db      	ldr	r3, [r3, #12]
 80023a0:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80023a4:	ea42 0103 	orr.w	r1, r2, r3
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	430a      	orrs	r2, r1
 80023b4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	69da      	ldr	r2, [r3, #28]
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80023c4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	2200      	movs	r2, #0
 80023ca:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2201      	movs	r2, #1
 80023d0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80023d4:	2300      	movs	r3, #0
}
 80023d6:	4618      	mov	r0, r3
 80023d8:	3710      	adds	r7, #16
 80023da:	46bd      	mov	sp, r7
 80023dc:	bd80      	pop	{r7, pc}

080023de <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80023de:	b580      	push	{r7, lr}
 80023e0:	b088      	sub	sp, #32
 80023e2:	af00      	add	r7, sp, #0
 80023e4:	60f8      	str	r0, [r7, #12]
 80023e6:	60b9      	str	r1, [r7, #8]
 80023e8:	603b      	str	r3, [r7, #0]
 80023ea:	4613      	mov	r3, r2
 80023ec:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80023ee:	f7fe fd57 	bl	8000ea0 <HAL_GetTick>
 80023f2:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80023f4:	88fb      	ldrh	r3, [r7, #6]
 80023f6:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80023fe:	b2db      	uxtb	r3, r3
 8002400:	2b01      	cmp	r3, #1
 8002402:	d001      	beq.n	8002408 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8002404:	2302      	movs	r3, #2
 8002406:	e15c      	b.n	80026c2 <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8002408:	68bb      	ldr	r3, [r7, #8]
 800240a:	2b00      	cmp	r3, #0
 800240c:	d002      	beq.n	8002414 <HAL_SPI_Transmit+0x36>
 800240e:	88fb      	ldrh	r3, [r7, #6]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d101      	bne.n	8002418 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8002414:	2301      	movs	r3, #1
 8002416:	e154      	b.n	80026c2 <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800241e:	2b01      	cmp	r3, #1
 8002420:	d101      	bne.n	8002426 <HAL_SPI_Transmit+0x48>
 8002422:	2302      	movs	r3, #2
 8002424:	e14d      	b.n	80026c2 <HAL_SPI_Transmit+0x2e4>
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	2201      	movs	r2, #1
 800242a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	2203      	movs	r2, #3
 8002432:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	2200      	movs	r2, #0
 800243a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	68ba      	ldr	r2, [r7, #8]
 8002440:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	88fa      	ldrh	r2, [r7, #6]
 8002446:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	88fa      	ldrh	r2, [r7, #6]
 800244c:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	2200      	movs	r2, #0
 8002452:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	2200      	movs	r2, #0
 8002458:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	2200      	movs	r2, #0
 8002460:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	2200      	movs	r2, #0
 8002468:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	2200      	movs	r2, #0
 800246e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	689b      	ldr	r3, [r3, #8]
 8002474:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002478:	d10f      	bne.n	800249a <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	681a      	ldr	r2, [r3, #0]
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002488:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	681a      	ldr	r2, [r3, #0]
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002498:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80024a4:	2b40      	cmp	r3, #64	@ 0x40
 80024a6:	d007      	beq.n	80024b8 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	681a      	ldr	r2, [r3, #0]
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80024b6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	68db      	ldr	r3, [r3, #12]
 80024bc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80024c0:	d952      	bls.n	8002568 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d002      	beq.n	80024d0 <HAL_SPI_Transmit+0xf2>
 80024ca:	8b7b      	ldrh	r3, [r7, #26]
 80024cc:	2b01      	cmp	r3, #1
 80024ce:	d145      	bne.n	800255c <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024d4:	881a      	ldrh	r2, [r3, #0]
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024e0:	1c9a      	adds	r2, r3, #2
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80024ea:	b29b      	uxth	r3, r3
 80024ec:	3b01      	subs	r3, #1
 80024ee:	b29a      	uxth	r2, r3
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80024f4:	e032      	b.n	800255c <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	689b      	ldr	r3, [r3, #8]
 80024fc:	f003 0302 	and.w	r3, r3, #2
 8002500:	2b02      	cmp	r3, #2
 8002502:	d112      	bne.n	800252a <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002508:	881a      	ldrh	r2, [r3, #0]
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002514:	1c9a      	adds	r2, r3, #2
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800251e:	b29b      	uxth	r3, r3
 8002520:	3b01      	subs	r3, #1
 8002522:	b29a      	uxth	r2, r3
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002528:	e018      	b.n	800255c <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800252a:	f7fe fcb9 	bl	8000ea0 <HAL_GetTick>
 800252e:	4602      	mov	r2, r0
 8002530:	69fb      	ldr	r3, [r7, #28]
 8002532:	1ad3      	subs	r3, r2, r3
 8002534:	683a      	ldr	r2, [r7, #0]
 8002536:	429a      	cmp	r2, r3
 8002538:	d803      	bhi.n	8002542 <HAL_SPI_Transmit+0x164>
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002540:	d102      	bne.n	8002548 <HAL_SPI_Transmit+0x16a>
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	2b00      	cmp	r3, #0
 8002546:	d109      	bne.n	800255c <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	2201      	movs	r2, #1
 800254c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	2200      	movs	r2, #0
 8002554:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8002558:	2303      	movs	r3, #3
 800255a:	e0b2      	b.n	80026c2 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002560:	b29b      	uxth	r3, r3
 8002562:	2b00      	cmp	r3, #0
 8002564:	d1c7      	bne.n	80024f6 <HAL_SPI_Transmit+0x118>
 8002566:	e083      	b.n	8002670 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	2b00      	cmp	r3, #0
 800256e:	d002      	beq.n	8002576 <HAL_SPI_Transmit+0x198>
 8002570:	8b7b      	ldrh	r3, [r7, #26]
 8002572:	2b01      	cmp	r3, #1
 8002574:	d177      	bne.n	8002666 <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800257a:	b29b      	uxth	r3, r3
 800257c:	2b01      	cmp	r3, #1
 800257e:	d912      	bls.n	80025a6 <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002584:	881a      	ldrh	r2, [r3, #0]
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002590:	1c9a      	adds	r2, r3, #2
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800259a:	b29b      	uxth	r3, r3
 800259c:	3b02      	subs	r3, #2
 800259e:	b29a      	uxth	r2, r3
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80025a4:	e05f      	b.n	8002666 <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	330c      	adds	r3, #12
 80025b0:	7812      	ldrb	r2, [r2, #0]
 80025b2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025b8:	1c5a      	adds	r2, r3, #1
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80025c2:	b29b      	uxth	r3, r3
 80025c4:	3b01      	subs	r3, #1
 80025c6:	b29a      	uxth	r2, r3
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80025cc:	e04b      	b.n	8002666 <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	689b      	ldr	r3, [r3, #8]
 80025d4:	f003 0302 	and.w	r3, r3, #2
 80025d8:	2b02      	cmp	r3, #2
 80025da:	d12b      	bne.n	8002634 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80025e0:	b29b      	uxth	r3, r3
 80025e2:	2b01      	cmp	r3, #1
 80025e4:	d912      	bls.n	800260c <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025ea:	881a      	ldrh	r2, [r3, #0]
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025f6:	1c9a      	adds	r2, r3, #2
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002600:	b29b      	uxth	r3, r3
 8002602:	3b02      	subs	r3, #2
 8002604:	b29a      	uxth	r2, r3
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800260a:	e02c      	b.n	8002666 <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	330c      	adds	r3, #12
 8002616:	7812      	ldrb	r2, [r2, #0]
 8002618:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800261e:	1c5a      	adds	r2, r3, #1
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002628:	b29b      	uxth	r3, r3
 800262a:	3b01      	subs	r3, #1
 800262c:	b29a      	uxth	r2, r3
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002632:	e018      	b.n	8002666 <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002634:	f7fe fc34 	bl	8000ea0 <HAL_GetTick>
 8002638:	4602      	mov	r2, r0
 800263a:	69fb      	ldr	r3, [r7, #28]
 800263c:	1ad3      	subs	r3, r2, r3
 800263e:	683a      	ldr	r2, [r7, #0]
 8002640:	429a      	cmp	r2, r3
 8002642:	d803      	bhi.n	800264c <HAL_SPI_Transmit+0x26e>
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	f1b3 3fff 	cmp.w	r3, #4294967295
 800264a:	d102      	bne.n	8002652 <HAL_SPI_Transmit+0x274>
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	2b00      	cmp	r3, #0
 8002650:	d109      	bne.n	8002666 <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	2201      	movs	r2, #1
 8002656:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	2200      	movs	r2, #0
 800265e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8002662:	2303      	movs	r3, #3
 8002664:	e02d      	b.n	80026c2 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800266a:	b29b      	uxth	r3, r3
 800266c:	2b00      	cmp	r3, #0
 800266e:	d1ae      	bne.n	80025ce <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002670:	69fa      	ldr	r2, [r7, #28]
 8002672:	6839      	ldr	r1, [r7, #0]
 8002674:	68f8      	ldr	r0, [r7, #12]
 8002676:	f000 fe15 	bl	80032a4 <SPI_EndRxTxTransaction>
 800267a:	4603      	mov	r3, r0
 800267c:	2b00      	cmp	r3, #0
 800267e:	d002      	beq.n	8002686 <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	2220      	movs	r2, #32
 8002684:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	689b      	ldr	r3, [r3, #8]
 800268a:	2b00      	cmp	r3, #0
 800268c:	d10a      	bne.n	80026a4 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800268e:	2300      	movs	r3, #0
 8002690:	617b      	str	r3, [r7, #20]
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	68db      	ldr	r3, [r3, #12]
 8002698:	617b      	str	r3, [r7, #20]
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	689b      	ldr	r3, [r3, #8]
 80026a0:	617b      	str	r3, [r7, #20]
 80026a2:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	2201      	movs	r2, #1
 80026a8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	2200      	movs	r2, #0
 80026b0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d001      	beq.n	80026c0 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 80026bc:	2301      	movs	r3, #1
 80026be:	e000      	b.n	80026c2 <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 80026c0:	2300      	movs	r3, #0
  }
}
 80026c2:	4618      	mov	r0, r3
 80026c4:	3720      	adds	r7, #32
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bd80      	pop	{r7, pc}

080026ca <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80026ca:	b580      	push	{r7, lr}
 80026cc:	b088      	sub	sp, #32
 80026ce:	af02      	add	r7, sp, #8
 80026d0:	60f8      	str	r0, [r7, #12]
 80026d2:	60b9      	str	r1, [r7, #8]
 80026d4:	603b      	str	r3, [r7, #0]
 80026d6:	4613      	mov	r3, r2
 80026d8:	80fb      	strh	r3, [r7, #6]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80026e0:	b2db      	uxtb	r3, r3
 80026e2:	2b01      	cmp	r3, #1
 80026e4:	d001      	beq.n	80026ea <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 80026e6:	2302      	movs	r3, #2
 80026e8:	e123      	b.n	8002932 <HAL_SPI_Receive+0x268>
  }

  if ((pData == NULL) || (Size == 0U))
 80026ea:	68bb      	ldr	r3, [r7, #8]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d002      	beq.n	80026f6 <HAL_SPI_Receive+0x2c>
 80026f0:	88fb      	ldrh	r3, [r7, #6]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d101      	bne.n	80026fa <HAL_SPI_Receive+0x30>
  {
    return HAL_ERROR;
 80026f6:	2301      	movs	r3, #1
 80026f8:	e11b      	b.n	8002932 <HAL_SPI_Receive+0x268>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002702:	d112      	bne.n	800272a <HAL_SPI_Receive+0x60>
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	689b      	ldr	r3, [r3, #8]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d10e      	bne.n	800272a <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	2204      	movs	r2, #4
 8002710:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002714:	88fa      	ldrh	r2, [r7, #6]
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	9300      	str	r3, [sp, #0]
 800271a:	4613      	mov	r3, r2
 800271c:	68ba      	ldr	r2, [r7, #8]
 800271e:	68b9      	ldr	r1, [r7, #8]
 8002720:	68f8      	ldr	r0, [r7, #12]
 8002722:	f000 f90a 	bl	800293a <HAL_SPI_TransmitReceive>
 8002726:	4603      	mov	r3, r0
 8002728:	e103      	b.n	8002932 <HAL_SPI_Receive+0x268>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800272a:	f7fe fbb9 	bl	8000ea0 <HAL_GetTick>
 800272e:	6178      	str	r0, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002736:	2b01      	cmp	r3, #1
 8002738:	d101      	bne.n	800273e <HAL_SPI_Receive+0x74>
 800273a:	2302      	movs	r3, #2
 800273c:	e0f9      	b.n	8002932 <HAL_SPI_Receive+0x268>
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	2201      	movs	r2, #1
 8002742:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	2204      	movs	r2, #4
 800274a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	2200      	movs	r2, #0
 8002752:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	68ba      	ldr	r2, [r7, #8]
 8002758:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	88fa      	ldrh	r2, [r7, #6]
 800275e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	88fa      	ldrh	r2, [r7, #6]
 8002766:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	2200      	movs	r2, #0
 800276e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	2200      	movs	r2, #0
 8002774:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	2200      	movs	r2, #0
 800277a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	2200      	movs	r2, #0
 8002780:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	2200      	movs	r2, #0
 8002786:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	68db      	ldr	r3, [r3, #12]
 800278c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002790:	d908      	bls.n	80027a4 <HAL_SPI_Receive+0xda>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	685a      	ldr	r2, [r3, #4]
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80027a0:	605a      	str	r2, [r3, #4]
 80027a2:	e007      	b.n	80027b4 <HAL_SPI_Receive+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	685a      	ldr	r2, [r3, #4]
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80027b2:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	689b      	ldr	r3, [r3, #8]
 80027b8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80027bc:	d10f      	bne.n	80027de <HAL_SPI_Receive+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	681a      	ldr	r2, [r3, #0]
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80027cc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	681a      	ldr	r2, [r3, #0]
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80027dc:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80027e8:	2b40      	cmp	r3, #64	@ 0x40
 80027ea:	d007      	beq.n	80027fc <HAL_SPI_Receive+0x132>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	681a      	ldr	r2, [r3, #0]
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80027fa:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	68db      	ldr	r3, [r3, #12]
 8002800:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002804:	d875      	bhi.n	80028f2 <HAL_SPI_Receive+0x228>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002806:	e037      	b.n	8002878 <HAL_SPI_Receive+0x1ae>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	689b      	ldr	r3, [r3, #8]
 800280e:	f003 0301 	and.w	r3, r3, #1
 8002812:	2b01      	cmp	r3, #1
 8002814:	d117      	bne.n	8002846 <HAL_SPI_Receive+0x17c>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f103 020c 	add.w	r2, r3, #12
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002822:	7812      	ldrb	r2, [r2, #0]
 8002824:	b2d2      	uxtb	r2, r2
 8002826:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800282c:	1c5a      	adds	r2, r3, #1
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002838:	b29b      	uxth	r3, r3
 800283a:	3b01      	subs	r3, #1
 800283c:	b29a      	uxth	r2, r3
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8002844:	e018      	b.n	8002878 <HAL_SPI_Receive+0x1ae>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002846:	f7fe fb2b 	bl	8000ea0 <HAL_GetTick>
 800284a:	4602      	mov	r2, r0
 800284c:	697b      	ldr	r3, [r7, #20]
 800284e:	1ad3      	subs	r3, r2, r3
 8002850:	683a      	ldr	r2, [r7, #0]
 8002852:	429a      	cmp	r2, r3
 8002854:	d803      	bhi.n	800285e <HAL_SPI_Receive+0x194>
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	f1b3 3fff 	cmp.w	r3, #4294967295
 800285c:	d102      	bne.n	8002864 <HAL_SPI_Receive+0x19a>
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	2b00      	cmp	r3, #0
 8002862:	d109      	bne.n	8002878 <HAL_SPI_Receive+0x1ae>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	2201      	movs	r2, #1
 8002868:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	2200      	movs	r2, #0
 8002870:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8002874:	2303      	movs	r3, #3
 8002876:	e05c      	b.n	8002932 <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800287e:	b29b      	uxth	r3, r3
 8002880:	2b00      	cmp	r3, #0
 8002882:	d1c1      	bne.n	8002808 <HAL_SPI_Receive+0x13e>
 8002884:	e03b      	b.n	80028fe <HAL_SPI_Receive+0x234>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	689b      	ldr	r3, [r3, #8]
 800288c:	f003 0301 	and.w	r3, r3, #1
 8002890:	2b01      	cmp	r3, #1
 8002892:	d115      	bne.n	80028c0 <HAL_SPI_Receive+0x1f6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	68da      	ldr	r2, [r3, #12]
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800289e:	b292      	uxth	r2, r2
 80028a0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028a6:	1c9a      	adds	r2, r3, #2
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80028b2:	b29b      	uxth	r3, r3
 80028b4:	3b01      	subs	r3, #1
 80028b6:	b29a      	uxth	r2, r3
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 80028be:	e018      	b.n	80028f2 <HAL_SPI_Receive+0x228>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80028c0:	f7fe faee 	bl	8000ea0 <HAL_GetTick>
 80028c4:	4602      	mov	r2, r0
 80028c6:	697b      	ldr	r3, [r7, #20]
 80028c8:	1ad3      	subs	r3, r2, r3
 80028ca:	683a      	ldr	r2, [r7, #0]
 80028cc:	429a      	cmp	r2, r3
 80028ce:	d803      	bhi.n	80028d8 <HAL_SPI_Receive+0x20e>
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028d6:	d102      	bne.n	80028de <HAL_SPI_Receive+0x214>
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d109      	bne.n	80028f2 <HAL_SPI_Receive+0x228>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	2201      	movs	r2, #1
 80028e2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	2200      	movs	r2, #0
 80028ea:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 80028ee:	2303      	movs	r3, #3
 80028f0:	e01f      	b.n	8002932 <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80028f8:	b29b      	uxth	r3, r3
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d1c3      	bne.n	8002886 <HAL_SPI_Receive+0x1bc>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80028fe:	697a      	ldr	r2, [r7, #20]
 8002900:	6839      	ldr	r1, [r7, #0]
 8002902:	68f8      	ldr	r0, [r7, #12]
 8002904:	f000 fc76 	bl	80031f4 <SPI_EndRxTransaction>
 8002908:	4603      	mov	r3, r0
 800290a:	2b00      	cmp	r3, #0
 800290c:	d002      	beq.n	8002914 <HAL_SPI_Receive+0x24a>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	2220      	movs	r2, #32
 8002912:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	2201      	movs	r2, #1
 8002918:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	2200      	movs	r2, #0
 8002920:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002928:	2b00      	cmp	r3, #0
 800292a:	d001      	beq.n	8002930 <HAL_SPI_Receive+0x266>
  {
    return HAL_ERROR;
 800292c:	2301      	movs	r3, #1
 800292e:	e000      	b.n	8002932 <HAL_SPI_Receive+0x268>
  }
  else
  {
    return HAL_OK;
 8002930:	2300      	movs	r3, #0
  }
}
 8002932:	4618      	mov	r0, r3
 8002934:	3718      	adds	r7, #24
 8002936:	46bd      	mov	sp, r7
 8002938:	bd80      	pop	{r7, pc}

0800293a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800293a:	b580      	push	{r7, lr}
 800293c:	b08a      	sub	sp, #40	@ 0x28
 800293e:	af00      	add	r7, sp, #0
 8002940:	60f8      	str	r0, [r7, #12]
 8002942:	60b9      	str	r1, [r7, #8]
 8002944:	607a      	str	r2, [r7, #4]
 8002946:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002948:	2301      	movs	r3, #1
 800294a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800294c:	f7fe faa8 	bl	8000ea0 <HAL_GetTick>
 8002950:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002958:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	685b      	ldr	r3, [r3, #4]
 800295e:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8002960:	887b      	ldrh	r3, [r7, #2]
 8002962:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 8002964:	887b      	ldrh	r3, [r7, #2]
 8002966:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002968:	7ffb      	ldrb	r3, [r7, #31]
 800296a:	2b01      	cmp	r3, #1
 800296c:	d00c      	beq.n	8002988 <HAL_SPI_TransmitReceive+0x4e>
 800296e:	69bb      	ldr	r3, [r7, #24]
 8002970:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002974:	d106      	bne.n	8002984 <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	689b      	ldr	r3, [r3, #8]
 800297a:	2b00      	cmp	r3, #0
 800297c:	d102      	bne.n	8002984 <HAL_SPI_TransmitReceive+0x4a>
 800297e:	7ffb      	ldrb	r3, [r7, #31]
 8002980:	2b04      	cmp	r3, #4
 8002982:	d001      	beq.n	8002988 <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8002984:	2302      	movs	r3, #2
 8002986:	e1f3      	b.n	8002d70 <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002988:	68bb      	ldr	r3, [r7, #8]
 800298a:	2b00      	cmp	r3, #0
 800298c:	d005      	beq.n	800299a <HAL_SPI_TransmitReceive+0x60>
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	2b00      	cmp	r3, #0
 8002992:	d002      	beq.n	800299a <HAL_SPI_TransmitReceive+0x60>
 8002994:	887b      	ldrh	r3, [r7, #2]
 8002996:	2b00      	cmp	r3, #0
 8002998:	d101      	bne.n	800299e <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 800299a:	2301      	movs	r3, #1
 800299c:	e1e8      	b.n	8002d70 <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80029a4:	2b01      	cmp	r3, #1
 80029a6:	d101      	bne.n	80029ac <HAL_SPI_TransmitReceive+0x72>
 80029a8:	2302      	movs	r3, #2
 80029aa:	e1e1      	b.n	8002d70 <HAL_SPI_TransmitReceive+0x436>
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	2201      	movs	r2, #1
 80029b0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80029ba:	b2db      	uxtb	r3, r3
 80029bc:	2b04      	cmp	r3, #4
 80029be:	d003      	beq.n	80029c8 <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	2205      	movs	r2, #5
 80029c4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	2200      	movs	r2, #0
 80029cc:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	687a      	ldr	r2, [r7, #4]
 80029d2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	887a      	ldrh	r2, [r7, #2]
 80029d8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	887a      	ldrh	r2, [r7, #2]
 80029e0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	68ba      	ldr	r2, [r7, #8]
 80029e8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	887a      	ldrh	r2, [r7, #2]
 80029ee:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	887a      	ldrh	r2, [r7, #2]
 80029f4:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	2200      	movs	r2, #0
 80029fa:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	2200      	movs	r2, #0
 8002a00:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	68db      	ldr	r3, [r3, #12]
 8002a06:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002a0a:	d802      	bhi.n	8002a12 <HAL_SPI_TransmitReceive+0xd8>
 8002a0c:	8abb      	ldrh	r3, [r7, #20]
 8002a0e:	2b01      	cmp	r3, #1
 8002a10:	d908      	bls.n	8002a24 <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	685a      	ldr	r2, [r3, #4]
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002a20:	605a      	str	r2, [r3, #4]
 8002a22:	e007      	b.n	8002a34 <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	685a      	ldr	r2, [r3, #4]
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002a32:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a3e:	2b40      	cmp	r3, #64	@ 0x40
 8002a40:	d007      	beq.n	8002a52 <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	681a      	ldr	r2, [r3, #0]
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002a50:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	68db      	ldr	r3, [r3, #12]
 8002a56:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002a5a:	f240 8083 	bls.w	8002b64 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	685b      	ldr	r3, [r3, #4]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d002      	beq.n	8002a6c <HAL_SPI_TransmitReceive+0x132>
 8002a66:	8afb      	ldrh	r3, [r7, #22]
 8002a68:	2b01      	cmp	r3, #1
 8002a6a:	d16f      	bne.n	8002b4c <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a70:	881a      	ldrh	r2, [r3, #0]
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a7c:	1c9a      	adds	r2, r3, #2
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002a86:	b29b      	uxth	r3, r3
 8002a88:	3b01      	subs	r3, #1
 8002a8a:	b29a      	uxth	r2, r3
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002a90:	e05c      	b.n	8002b4c <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	689b      	ldr	r3, [r3, #8]
 8002a98:	f003 0302 	and.w	r3, r3, #2
 8002a9c:	2b02      	cmp	r3, #2
 8002a9e:	d11b      	bne.n	8002ad8 <HAL_SPI_TransmitReceive+0x19e>
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002aa4:	b29b      	uxth	r3, r3
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d016      	beq.n	8002ad8 <HAL_SPI_TransmitReceive+0x19e>
 8002aaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002aac:	2b01      	cmp	r3, #1
 8002aae:	d113      	bne.n	8002ad8 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ab4:	881a      	ldrh	r2, [r3, #0]
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ac0:	1c9a      	adds	r2, r3, #2
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002aca:	b29b      	uxth	r3, r3
 8002acc:	3b01      	subs	r3, #1
 8002ace:	b29a      	uxth	r2, r3
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	689b      	ldr	r3, [r3, #8]
 8002ade:	f003 0301 	and.w	r3, r3, #1
 8002ae2:	2b01      	cmp	r3, #1
 8002ae4:	d11c      	bne.n	8002b20 <HAL_SPI_TransmitReceive+0x1e6>
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002aec:	b29b      	uxth	r3, r3
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d016      	beq.n	8002b20 <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	68da      	ldr	r2, [r3, #12]
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002afc:	b292      	uxth	r2, r2
 8002afe:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b04:	1c9a      	adds	r2, r3, #2
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002b10:	b29b      	uxth	r3, r3
 8002b12:	3b01      	subs	r3, #1
 8002b14:	b29a      	uxth	r2, r3
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002b20:	f7fe f9be 	bl	8000ea0 <HAL_GetTick>
 8002b24:	4602      	mov	r2, r0
 8002b26:	6a3b      	ldr	r3, [r7, #32]
 8002b28:	1ad3      	subs	r3, r2, r3
 8002b2a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002b2c:	429a      	cmp	r2, r3
 8002b2e:	d80d      	bhi.n	8002b4c <HAL_SPI_TransmitReceive+0x212>
 8002b30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b36:	d009      	beq.n	8002b4c <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	2201      	movs	r2, #1
 8002b3c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	2200      	movs	r2, #0
 8002b44:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8002b48:	2303      	movs	r3, #3
 8002b4a:	e111      	b.n	8002d70 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002b50:	b29b      	uxth	r3, r3
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d19d      	bne.n	8002a92 <HAL_SPI_TransmitReceive+0x158>
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002b5c:	b29b      	uxth	r3, r3
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d197      	bne.n	8002a92 <HAL_SPI_TransmitReceive+0x158>
 8002b62:	e0e5      	b.n	8002d30 <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d003      	beq.n	8002b74 <HAL_SPI_TransmitReceive+0x23a>
 8002b6c:	8afb      	ldrh	r3, [r7, #22]
 8002b6e:	2b01      	cmp	r3, #1
 8002b70:	f040 80d1 	bne.w	8002d16 <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002b78:	b29b      	uxth	r3, r3
 8002b7a:	2b01      	cmp	r3, #1
 8002b7c:	d912      	bls.n	8002ba4 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b82:	881a      	ldrh	r2, [r3, #0]
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b8e:	1c9a      	adds	r2, r3, #2
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002b98:	b29b      	uxth	r3, r3
 8002b9a:	3b02      	subs	r3, #2
 8002b9c:	b29a      	uxth	r2, r3
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002ba2:	e0b8      	b.n	8002d16 <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	330c      	adds	r3, #12
 8002bae:	7812      	ldrb	r2, [r2, #0]
 8002bb0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bb6:	1c5a      	adds	r2, r3, #1
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002bc0:	b29b      	uxth	r3, r3
 8002bc2:	3b01      	subs	r3, #1
 8002bc4:	b29a      	uxth	r2, r3
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002bca:	e0a4      	b.n	8002d16 <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	689b      	ldr	r3, [r3, #8]
 8002bd2:	f003 0302 	and.w	r3, r3, #2
 8002bd6:	2b02      	cmp	r3, #2
 8002bd8:	d134      	bne.n	8002c44 <HAL_SPI_TransmitReceive+0x30a>
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002bde:	b29b      	uxth	r3, r3
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d02f      	beq.n	8002c44 <HAL_SPI_TransmitReceive+0x30a>
 8002be4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002be6:	2b01      	cmp	r3, #1
 8002be8:	d12c      	bne.n	8002c44 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002bee:	b29b      	uxth	r3, r3
 8002bf0:	2b01      	cmp	r3, #1
 8002bf2:	d912      	bls.n	8002c1a <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bf8:	881a      	ldrh	r2, [r3, #0]
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c04:	1c9a      	adds	r2, r3, #2
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002c0e:	b29b      	uxth	r3, r3
 8002c10:	3b02      	subs	r3, #2
 8002c12:	b29a      	uxth	r2, r3
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002c18:	e012      	b.n	8002c40 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	330c      	adds	r3, #12
 8002c24:	7812      	ldrb	r2, [r2, #0]
 8002c26:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c2c:	1c5a      	adds	r2, r3, #1
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002c36:	b29b      	uxth	r3, r3
 8002c38:	3b01      	subs	r3, #1
 8002c3a:	b29a      	uxth	r2, r3
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002c40:	2300      	movs	r3, #0
 8002c42:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	689b      	ldr	r3, [r3, #8]
 8002c4a:	f003 0301 	and.w	r3, r3, #1
 8002c4e:	2b01      	cmp	r3, #1
 8002c50:	d148      	bne.n	8002ce4 <HAL_SPI_TransmitReceive+0x3aa>
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002c58:	b29b      	uxth	r3, r3
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d042      	beq.n	8002ce4 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002c64:	b29b      	uxth	r3, r3
 8002c66:	2b01      	cmp	r3, #1
 8002c68:	d923      	bls.n	8002cb2 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	68da      	ldr	r2, [r3, #12]
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c74:	b292      	uxth	r2, r2
 8002c76:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c7c:	1c9a      	adds	r2, r3, #2
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002c88:	b29b      	uxth	r3, r3
 8002c8a:	3b02      	subs	r3, #2
 8002c8c:	b29a      	uxth	r2, r3
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002c9a:	b29b      	uxth	r3, r3
 8002c9c:	2b01      	cmp	r3, #1
 8002c9e:	d81f      	bhi.n	8002ce0 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	685a      	ldr	r2, [r3, #4]
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002cae:	605a      	str	r2, [r3, #4]
 8002cb0:	e016      	b.n	8002ce0 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f103 020c 	add.w	r2, r3, #12
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cbe:	7812      	ldrb	r2, [r2, #0]
 8002cc0:	b2d2      	uxtb	r2, r2
 8002cc2:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cc8:	1c5a      	adds	r2, r3, #1
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002cd4:	b29b      	uxth	r3, r3
 8002cd6:	3b01      	subs	r3, #1
 8002cd8:	b29a      	uxth	r2, r3
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002ce0:	2301      	movs	r3, #1
 8002ce2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002ce4:	f7fe f8dc 	bl	8000ea0 <HAL_GetTick>
 8002ce8:	4602      	mov	r2, r0
 8002cea:	6a3b      	ldr	r3, [r7, #32]
 8002cec:	1ad3      	subs	r3, r2, r3
 8002cee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002cf0:	429a      	cmp	r2, r3
 8002cf2:	d803      	bhi.n	8002cfc <HAL_SPI_TransmitReceive+0x3c2>
 8002cf4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cfa:	d102      	bne.n	8002d02 <HAL_SPI_TransmitReceive+0x3c8>
 8002cfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d109      	bne.n	8002d16 <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	2201      	movs	r2, #1
 8002d06:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8002d12:	2303      	movs	r3, #3
 8002d14:	e02c      	b.n	8002d70 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002d1a:	b29b      	uxth	r3, r3
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	f47f af55 	bne.w	8002bcc <HAL_SPI_TransmitReceive+0x292>
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002d28:	b29b      	uxth	r3, r3
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	f47f af4e 	bne.w	8002bcc <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002d30:	6a3a      	ldr	r2, [r7, #32]
 8002d32:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002d34:	68f8      	ldr	r0, [r7, #12]
 8002d36:	f000 fab5 	bl	80032a4 <SPI_EndRxTxTransaction>
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d008      	beq.n	8002d52 <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	2220      	movs	r2, #32
 8002d44:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	2200      	movs	r2, #0
 8002d4a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8002d4e:	2301      	movs	r3, #1
 8002d50:	e00e      	b.n	8002d70 <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	2201      	movs	r2, #1
 8002d56:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d001      	beq.n	8002d6e <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	e000      	b.n	8002d70 <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 8002d6e:	2300      	movs	r3, #0
  }
}
 8002d70:	4618      	mov	r0, r3
 8002d72:	3728      	adds	r7, #40	@ 0x28
 8002d74:	46bd      	mov	sp, r7
 8002d76:	bd80      	pop	{r7, pc}

08002d78 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b088      	sub	sp, #32
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	685b      	ldr	r3, [r3, #4]
 8002d86:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	689b      	ldr	r3, [r3, #8]
 8002d8e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002d90:	69bb      	ldr	r3, [r7, #24]
 8002d92:	099b      	lsrs	r3, r3, #6
 8002d94:	f003 0301 	and.w	r3, r3, #1
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d10f      	bne.n	8002dbc <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002d9c:	69bb      	ldr	r3, [r7, #24]
 8002d9e:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d00a      	beq.n	8002dbc <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002da6:	69fb      	ldr	r3, [r7, #28]
 8002da8:	099b      	lsrs	r3, r3, #6
 8002daa:	f003 0301 	and.w	r3, r3, #1
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d004      	beq.n	8002dbc <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002db6:	6878      	ldr	r0, [r7, #4]
 8002db8:	4798      	blx	r3
    return;
 8002dba:	e0d7      	b.n	8002f6c <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8002dbc:	69bb      	ldr	r3, [r7, #24]
 8002dbe:	085b      	lsrs	r3, r3, #1
 8002dc0:	f003 0301 	and.w	r3, r3, #1
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d00a      	beq.n	8002dde <HAL_SPI_IRQHandler+0x66>
 8002dc8:	69fb      	ldr	r3, [r7, #28]
 8002dca:	09db      	lsrs	r3, r3, #7
 8002dcc:	f003 0301 	and.w	r3, r3, #1
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d004      	beq.n	8002dde <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002dd8:	6878      	ldr	r0, [r7, #4]
 8002dda:	4798      	blx	r3
    return;
 8002ddc:	e0c6      	b.n	8002f6c <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8002dde:	69bb      	ldr	r3, [r7, #24]
 8002de0:	095b      	lsrs	r3, r3, #5
 8002de2:	f003 0301 	and.w	r3, r3, #1
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d10c      	bne.n	8002e04 <HAL_SPI_IRQHandler+0x8c>
 8002dea:	69bb      	ldr	r3, [r7, #24]
 8002dec:	099b      	lsrs	r3, r3, #6
 8002dee:	f003 0301 	and.w	r3, r3, #1
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d106      	bne.n	8002e04 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8002df6:	69bb      	ldr	r3, [r7, #24]
 8002df8:	0a1b      	lsrs	r3, r3, #8
 8002dfa:	f003 0301 	and.w	r3, r3, #1
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	f000 80b4 	beq.w	8002f6c <HAL_SPI_IRQHandler+0x1f4>
 8002e04:	69fb      	ldr	r3, [r7, #28]
 8002e06:	095b      	lsrs	r3, r3, #5
 8002e08:	f003 0301 	and.w	r3, r3, #1
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	f000 80ad 	beq.w	8002f6c <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8002e12:	69bb      	ldr	r3, [r7, #24]
 8002e14:	099b      	lsrs	r3, r3, #6
 8002e16:	f003 0301 	and.w	r3, r3, #1
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d023      	beq.n	8002e66 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002e24:	b2db      	uxtb	r3, r3
 8002e26:	2b03      	cmp	r3, #3
 8002e28:	d011      	beq.n	8002e4e <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e2e:	f043 0204 	orr.w	r2, r3, #4
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002e36:	2300      	movs	r3, #0
 8002e38:	617b      	str	r3, [r7, #20]
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	68db      	ldr	r3, [r3, #12]
 8002e40:	617b      	str	r3, [r7, #20]
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	689b      	ldr	r3, [r3, #8]
 8002e48:	617b      	str	r3, [r7, #20]
 8002e4a:	697b      	ldr	r3, [r7, #20]
 8002e4c:	e00b      	b.n	8002e66 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002e4e:	2300      	movs	r3, #0
 8002e50:	613b      	str	r3, [r7, #16]
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	68db      	ldr	r3, [r3, #12]
 8002e58:	613b      	str	r3, [r7, #16]
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	689b      	ldr	r3, [r3, #8]
 8002e60:	613b      	str	r3, [r7, #16]
 8002e62:	693b      	ldr	r3, [r7, #16]
        return;
 8002e64:	e082      	b.n	8002f6c <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8002e66:	69bb      	ldr	r3, [r7, #24]
 8002e68:	095b      	lsrs	r3, r3, #5
 8002e6a:	f003 0301 	and.w	r3, r3, #1
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d014      	beq.n	8002e9c <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e76:	f043 0201 	orr.w	r2, r3, #1
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8002e7e:	2300      	movs	r3, #0
 8002e80:	60fb      	str	r3, [r7, #12]
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	689b      	ldr	r3, [r3, #8]
 8002e88:	60fb      	str	r3, [r7, #12]
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	681a      	ldr	r2, [r3, #0]
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002e98:	601a      	str	r2, [r3, #0]
 8002e9a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8002e9c:	69bb      	ldr	r3, [r7, #24]
 8002e9e:	0a1b      	lsrs	r3, r3, #8
 8002ea0:	f003 0301 	and.w	r3, r3, #1
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d00c      	beq.n	8002ec2 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002eac:	f043 0208 	orr.w	r2, r3, #8
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	60bb      	str	r3, [r7, #8]
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	689b      	ldr	r3, [r3, #8]
 8002ebe:	60bb      	str	r3, [r7, #8]
 8002ec0:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d04f      	beq.n	8002f6a <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	685a      	ldr	r2, [r3, #4]
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002ed8:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2201      	movs	r2, #1
 8002ede:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8002ee2:	69fb      	ldr	r3, [r7, #28]
 8002ee4:	f003 0302 	and.w	r3, r3, #2
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d104      	bne.n	8002ef6 <HAL_SPI_IRQHandler+0x17e>
 8002eec:	69fb      	ldr	r3, [r7, #28]
 8002eee:	f003 0301 	and.w	r3, r3, #1
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d034      	beq.n	8002f60 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	685a      	ldr	r2, [r3, #4]
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f022 0203 	bic.w	r2, r2, #3
 8002f04:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d011      	beq.n	8002f32 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f12:	4a18      	ldr	r2, [pc, #96]	@ (8002f74 <HAL_SPI_IRQHandler+0x1fc>)
 8002f14:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	f7fe f9f0 	bl	8001300 <HAL_DMA_Abort_IT>
 8002f20:	4603      	mov	r3, r0
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d005      	beq.n	8002f32 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f2a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d016      	beq.n	8002f68 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f3e:	4a0d      	ldr	r2, [pc, #52]	@ (8002f74 <HAL_SPI_IRQHandler+0x1fc>)
 8002f40:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f46:	4618      	mov	r0, r3
 8002f48:	f7fe f9da 	bl	8001300 <HAL_DMA_Abort_IT>
 8002f4c:	4603      	mov	r3, r0
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d00a      	beq.n	8002f68 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f56:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 8002f5e:	e003      	b.n	8002f68 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8002f60:	6878      	ldr	r0, [r7, #4]
 8002f62:	f000 f809 	bl	8002f78 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8002f66:	e000      	b.n	8002f6a <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8002f68:	bf00      	nop
    return;
 8002f6a:	bf00      	nop
  }
}
 8002f6c:	3720      	adds	r7, #32
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bd80      	pop	{r7, pc}
 8002f72:	bf00      	nop
 8002f74:	08002f8d 	.word	0x08002f8d

08002f78 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8002f78:	b480      	push	{r7}
 8002f7a:	b083      	sub	sp, #12
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8002f80:	bf00      	nop
 8002f82:	370c      	adds	r7, #12
 8002f84:	46bd      	mov	sp, r7
 8002f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8a:	4770      	bx	lr

08002f8c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b084      	sub	sp, #16
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f98:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8002fa8:	68f8      	ldr	r0, [r7, #12]
 8002faa:	f7ff ffe5 	bl	8002f78 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002fae:	bf00      	nop
 8002fb0:	3710      	adds	r7, #16
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	bd80      	pop	{r7, pc}
	...

08002fb8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b088      	sub	sp, #32
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	60f8      	str	r0, [r7, #12]
 8002fc0:	60b9      	str	r1, [r7, #8]
 8002fc2:	603b      	str	r3, [r7, #0]
 8002fc4:	4613      	mov	r3, r2
 8002fc6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002fc8:	f7fd ff6a 	bl	8000ea0 <HAL_GetTick>
 8002fcc:	4602      	mov	r2, r0
 8002fce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002fd0:	1a9b      	subs	r3, r3, r2
 8002fd2:	683a      	ldr	r2, [r7, #0]
 8002fd4:	4413      	add	r3, r2
 8002fd6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002fd8:	f7fd ff62 	bl	8000ea0 <HAL_GetTick>
 8002fdc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002fde:	4b39      	ldr	r3, [pc, #228]	@ (80030c4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	015b      	lsls	r3, r3, #5
 8002fe4:	0d1b      	lsrs	r3, r3, #20
 8002fe6:	69fa      	ldr	r2, [r7, #28]
 8002fe8:	fb02 f303 	mul.w	r3, r2, r3
 8002fec:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002fee:	e054      	b.n	800309a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ff6:	d050      	beq.n	800309a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002ff8:	f7fd ff52 	bl	8000ea0 <HAL_GetTick>
 8002ffc:	4602      	mov	r2, r0
 8002ffe:	69bb      	ldr	r3, [r7, #24]
 8003000:	1ad3      	subs	r3, r2, r3
 8003002:	69fa      	ldr	r2, [r7, #28]
 8003004:	429a      	cmp	r2, r3
 8003006:	d902      	bls.n	800300e <SPI_WaitFlagStateUntilTimeout+0x56>
 8003008:	69fb      	ldr	r3, [r7, #28]
 800300a:	2b00      	cmp	r3, #0
 800300c:	d13d      	bne.n	800308a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	685a      	ldr	r2, [r3, #4]
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800301c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	685b      	ldr	r3, [r3, #4]
 8003022:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003026:	d111      	bne.n	800304c <SPI_WaitFlagStateUntilTimeout+0x94>
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	689b      	ldr	r3, [r3, #8]
 800302c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003030:	d004      	beq.n	800303c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	689b      	ldr	r3, [r3, #8]
 8003036:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800303a:	d107      	bne.n	800304c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	681a      	ldr	r2, [r3, #0]
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800304a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003050:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003054:	d10f      	bne.n	8003076 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	681a      	ldr	r2, [r3, #0]
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003064:	601a      	str	r2, [r3, #0]
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	681a      	ldr	r2, [r3, #0]
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003074:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	2201      	movs	r2, #1
 800307a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	2200      	movs	r2, #0
 8003082:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8003086:	2303      	movs	r3, #3
 8003088:	e017      	b.n	80030ba <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800308a:	697b      	ldr	r3, [r7, #20]
 800308c:	2b00      	cmp	r3, #0
 800308e:	d101      	bne.n	8003094 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003090:	2300      	movs	r3, #0
 8003092:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003094:	697b      	ldr	r3, [r7, #20]
 8003096:	3b01      	subs	r3, #1
 8003098:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	689a      	ldr	r2, [r3, #8]
 80030a0:	68bb      	ldr	r3, [r7, #8]
 80030a2:	4013      	ands	r3, r2
 80030a4:	68ba      	ldr	r2, [r7, #8]
 80030a6:	429a      	cmp	r2, r3
 80030a8:	bf0c      	ite	eq
 80030aa:	2301      	moveq	r3, #1
 80030ac:	2300      	movne	r3, #0
 80030ae:	b2db      	uxtb	r3, r3
 80030b0:	461a      	mov	r2, r3
 80030b2:	79fb      	ldrb	r3, [r7, #7]
 80030b4:	429a      	cmp	r2, r3
 80030b6:	d19b      	bne.n	8002ff0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80030b8:	2300      	movs	r3, #0
}
 80030ba:	4618      	mov	r0, r3
 80030bc:	3720      	adds	r7, #32
 80030be:	46bd      	mov	sp, r7
 80030c0:	bd80      	pop	{r7, pc}
 80030c2:	bf00      	nop
 80030c4:	20000000 	.word	0x20000000

080030c8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b08a      	sub	sp, #40	@ 0x28
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	60f8      	str	r0, [r7, #12]
 80030d0:	60b9      	str	r1, [r7, #8]
 80030d2:	607a      	str	r2, [r7, #4]
 80030d4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80030d6:	2300      	movs	r3, #0
 80030d8:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80030da:	f7fd fee1 	bl	8000ea0 <HAL_GetTick>
 80030de:	4602      	mov	r2, r0
 80030e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030e2:	1a9b      	subs	r3, r3, r2
 80030e4:	683a      	ldr	r2, [r7, #0]
 80030e6:	4413      	add	r3, r2
 80030e8:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 80030ea:	f7fd fed9 	bl	8000ea0 <HAL_GetTick>
 80030ee:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	330c      	adds	r3, #12
 80030f6:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80030f8:	4b3d      	ldr	r3, [pc, #244]	@ (80031f0 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80030fa:	681a      	ldr	r2, [r3, #0]
 80030fc:	4613      	mov	r3, r2
 80030fe:	009b      	lsls	r3, r3, #2
 8003100:	4413      	add	r3, r2
 8003102:	00da      	lsls	r2, r3, #3
 8003104:	1ad3      	subs	r3, r2, r3
 8003106:	0d1b      	lsrs	r3, r3, #20
 8003108:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800310a:	fb02 f303 	mul.w	r3, r2, r3
 800310e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003110:	e060      	b.n	80031d4 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003112:	68bb      	ldr	r3, [r7, #8]
 8003114:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8003118:	d107      	bne.n	800312a <SPI_WaitFifoStateUntilTimeout+0x62>
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2b00      	cmp	r3, #0
 800311e:	d104      	bne.n	800312a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003120:	69fb      	ldr	r3, [r7, #28]
 8003122:	781b      	ldrb	r3, [r3, #0]
 8003124:	b2db      	uxtb	r3, r3
 8003126:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003128:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003130:	d050      	beq.n	80031d4 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003132:	f7fd feb5 	bl	8000ea0 <HAL_GetTick>
 8003136:	4602      	mov	r2, r0
 8003138:	6a3b      	ldr	r3, [r7, #32]
 800313a:	1ad3      	subs	r3, r2, r3
 800313c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800313e:	429a      	cmp	r2, r3
 8003140:	d902      	bls.n	8003148 <SPI_WaitFifoStateUntilTimeout+0x80>
 8003142:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003144:	2b00      	cmp	r3, #0
 8003146:	d13d      	bne.n	80031c4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	685a      	ldr	r2, [r3, #4]
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003156:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	685b      	ldr	r3, [r3, #4]
 800315c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003160:	d111      	bne.n	8003186 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	689b      	ldr	r3, [r3, #8]
 8003166:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800316a:	d004      	beq.n	8003176 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	689b      	ldr	r3, [r3, #8]
 8003170:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003174:	d107      	bne.n	8003186 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	681a      	ldr	r2, [r3, #0]
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003184:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800318a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800318e:	d10f      	bne.n	80031b0 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	681a      	ldr	r2, [r3, #0]
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800319e:	601a      	str	r2, [r3, #0]
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	681a      	ldr	r2, [r3, #0]
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80031ae:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	2201      	movs	r2, #1
 80031b4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	2200      	movs	r2, #0
 80031bc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80031c0:	2303      	movs	r3, #3
 80031c2:	e010      	b.n	80031e6 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80031c4:	69bb      	ldr	r3, [r7, #24]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d101      	bne.n	80031ce <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80031ca:	2300      	movs	r3, #0
 80031cc:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 80031ce:	69bb      	ldr	r3, [r7, #24]
 80031d0:	3b01      	subs	r3, #1
 80031d2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	689a      	ldr	r2, [r3, #8]
 80031da:	68bb      	ldr	r3, [r7, #8]
 80031dc:	4013      	ands	r3, r2
 80031de:	687a      	ldr	r2, [r7, #4]
 80031e0:	429a      	cmp	r2, r3
 80031e2:	d196      	bne.n	8003112 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80031e4:	2300      	movs	r3, #0
}
 80031e6:	4618      	mov	r0, r3
 80031e8:	3728      	adds	r7, #40	@ 0x28
 80031ea:	46bd      	mov	sp, r7
 80031ec:	bd80      	pop	{r7, pc}
 80031ee:	bf00      	nop
 80031f0:	20000000 	.word	0x20000000

080031f4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b086      	sub	sp, #24
 80031f8:	af02      	add	r7, sp, #8
 80031fa:	60f8      	str	r0, [r7, #12]
 80031fc:	60b9      	str	r1, [r7, #8]
 80031fe:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	685b      	ldr	r3, [r3, #4]
 8003204:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003208:	d111      	bne.n	800322e <SPI_EndRxTransaction+0x3a>
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	689b      	ldr	r3, [r3, #8]
 800320e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003212:	d004      	beq.n	800321e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	689b      	ldr	r3, [r3, #8]
 8003218:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800321c:	d107      	bne.n	800322e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	681a      	ldr	r2, [r3, #0]
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800322c:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	9300      	str	r3, [sp, #0]
 8003232:	68bb      	ldr	r3, [r7, #8]
 8003234:	2200      	movs	r2, #0
 8003236:	2180      	movs	r1, #128	@ 0x80
 8003238:	68f8      	ldr	r0, [r7, #12]
 800323a:	f7ff febd 	bl	8002fb8 <SPI_WaitFlagStateUntilTimeout>
 800323e:	4603      	mov	r3, r0
 8003240:	2b00      	cmp	r3, #0
 8003242:	d007      	beq.n	8003254 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003248:	f043 0220 	orr.w	r2, r3, #32
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003250:	2303      	movs	r3, #3
 8003252:	e023      	b.n	800329c <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	685b      	ldr	r3, [r3, #4]
 8003258:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800325c:	d11d      	bne.n	800329a <SPI_EndRxTransaction+0xa6>
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	689b      	ldr	r3, [r3, #8]
 8003262:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003266:	d004      	beq.n	8003272 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	689b      	ldr	r3, [r3, #8]
 800326c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003270:	d113      	bne.n	800329a <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	9300      	str	r3, [sp, #0]
 8003276:	68bb      	ldr	r3, [r7, #8]
 8003278:	2200      	movs	r2, #0
 800327a:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800327e:	68f8      	ldr	r0, [r7, #12]
 8003280:	f7ff ff22 	bl	80030c8 <SPI_WaitFifoStateUntilTimeout>
 8003284:	4603      	mov	r3, r0
 8003286:	2b00      	cmp	r3, #0
 8003288:	d007      	beq.n	800329a <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800328e:	f043 0220 	orr.w	r2, r3, #32
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8003296:	2303      	movs	r3, #3
 8003298:	e000      	b.n	800329c <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800329a:	2300      	movs	r3, #0
}
 800329c:	4618      	mov	r0, r3
 800329e:	3710      	adds	r7, #16
 80032a0:	46bd      	mov	sp, r7
 80032a2:	bd80      	pop	{r7, pc}

080032a4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b086      	sub	sp, #24
 80032a8:	af02      	add	r7, sp, #8
 80032aa:	60f8      	str	r0, [r7, #12]
 80032ac:	60b9      	str	r1, [r7, #8]
 80032ae:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	9300      	str	r3, [sp, #0]
 80032b4:	68bb      	ldr	r3, [r7, #8]
 80032b6:	2200      	movs	r2, #0
 80032b8:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80032bc:	68f8      	ldr	r0, [r7, #12]
 80032be:	f7ff ff03 	bl	80030c8 <SPI_WaitFifoStateUntilTimeout>
 80032c2:	4603      	mov	r3, r0
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d007      	beq.n	80032d8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80032cc:	f043 0220 	orr.w	r2, r3, #32
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80032d4:	2303      	movs	r3, #3
 80032d6:	e027      	b.n	8003328 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	9300      	str	r3, [sp, #0]
 80032dc:	68bb      	ldr	r3, [r7, #8]
 80032de:	2200      	movs	r2, #0
 80032e0:	2180      	movs	r1, #128	@ 0x80
 80032e2:	68f8      	ldr	r0, [r7, #12]
 80032e4:	f7ff fe68 	bl	8002fb8 <SPI_WaitFlagStateUntilTimeout>
 80032e8:	4603      	mov	r3, r0
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d007      	beq.n	80032fe <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80032f2:	f043 0220 	orr.w	r2, r3, #32
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80032fa:	2303      	movs	r3, #3
 80032fc:	e014      	b.n	8003328 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	9300      	str	r3, [sp, #0]
 8003302:	68bb      	ldr	r3, [r7, #8]
 8003304:	2200      	movs	r2, #0
 8003306:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800330a:	68f8      	ldr	r0, [r7, #12]
 800330c:	f7ff fedc 	bl	80030c8 <SPI_WaitFifoStateUntilTimeout>
 8003310:	4603      	mov	r3, r0
 8003312:	2b00      	cmp	r3, #0
 8003314:	d007      	beq.n	8003326 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800331a:	f043 0220 	orr.w	r2, r3, #32
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003322:	2303      	movs	r3, #3
 8003324:	e000      	b.n	8003328 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003326:	2300      	movs	r3, #0
}
 8003328:	4618      	mov	r0, r3
 800332a:	3710      	adds	r7, #16
 800332c:	46bd      	mov	sp, r7
 800332e:	bd80      	pop	{r7, pc}

08003330 <memset>:
 8003330:	4402      	add	r2, r0
 8003332:	4603      	mov	r3, r0
 8003334:	4293      	cmp	r3, r2
 8003336:	d100      	bne.n	800333a <memset+0xa>
 8003338:	4770      	bx	lr
 800333a:	f803 1b01 	strb.w	r1, [r3], #1
 800333e:	e7f9      	b.n	8003334 <memset+0x4>

08003340 <__libc_init_array>:
 8003340:	b570      	push	{r4, r5, r6, lr}
 8003342:	4d0d      	ldr	r5, [pc, #52]	@ (8003378 <__libc_init_array+0x38>)
 8003344:	4c0d      	ldr	r4, [pc, #52]	@ (800337c <__libc_init_array+0x3c>)
 8003346:	1b64      	subs	r4, r4, r5
 8003348:	10a4      	asrs	r4, r4, #2
 800334a:	2600      	movs	r6, #0
 800334c:	42a6      	cmp	r6, r4
 800334e:	d109      	bne.n	8003364 <__libc_init_array+0x24>
 8003350:	4d0b      	ldr	r5, [pc, #44]	@ (8003380 <__libc_init_array+0x40>)
 8003352:	4c0c      	ldr	r4, [pc, #48]	@ (8003384 <__libc_init_array+0x44>)
 8003354:	f000 f818 	bl	8003388 <_init>
 8003358:	1b64      	subs	r4, r4, r5
 800335a:	10a4      	asrs	r4, r4, #2
 800335c:	2600      	movs	r6, #0
 800335e:	42a6      	cmp	r6, r4
 8003360:	d105      	bne.n	800336e <__libc_init_array+0x2e>
 8003362:	bd70      	pop	{r4, r5, r6, pc}
 8003364:	f855 3b04 	ldr.w	r3, [r5], #4
 8003368:	4798      	blx	r3
 800336a:	3601      	adds	r6, #1
 800336c:	e7ee      	b.n	800334c <__libc_init_array+0xc>
 800336e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003372:	4798      	blx	r3
 8003374:	3601      	adds	r6, #1
 8003376:	e7f2      	b.n	800335e <__libc_init_array+0x1e>
 8003378:	080033c4 	.word	0x080033c4
 800337c:	080033c4 	.word	0x080033c4
 8003380:	080033c4 	.word	0x080033c4
 8003384:	080033c8 	.word	0x080033c8

08003388 <_init>:
 8003388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800338a:	bf00      	nop
 800338c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800338e:	bc08      	pop	{r3}
 8003390:	469e      	mov	lr, r3
 8003392:	4770      	bx	lr

08003394 <_fini>:
 8003394:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003396:	bf00      	nop
 8003398:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800339a:	bc08      	pop	{r3}
 800339c:	469e      	mov	lr, r3
 800339e:	4770      	bx	lr
