
LoRaTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003f10  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000054  080040f0  080040f0  000050f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004144  08004144  0000605c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08004144  08004144  00005144  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800414c  0800414c  0000605c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800414c  0800414c  0000514c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004150  08004150  00005150  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08004154  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003fc  2000005c  080041b0  0000605c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000458  080041b0  00006458  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000605c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009824  00000000  00000000  0000608c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f02  00000000  00000000  0000f8b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009d0  00000000  00000000  000117b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000074d  00000000  00000000  00012188  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001cfec  00000000  00000000  000128d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b555  00000000  00000000  0002f8c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b331f  00000000  00000000  0003ae16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ee135  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002b78  00000000  00000000  000ee178  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000054  00000000  00000000  000f0cf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	2000005c 	.word	0x2000005c
 80001fc:	00000000 	.word	0x00000000
 8000200:	080040d8 	.word	0x080040d8

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000060 	.word	0x20000060
 800021c:	080040d8 	.word	0x080040d8

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_uldivmod>:
 80002d0:	b953      	cbnz	r3, 80002e8 <__aeabi_uldivmod+0x18>
 80002d2:	b94a      	cbnz	r2, 80002e8 <__aeabi_uldivmod+0x18>
 80002d4:	2900      	cmp	r1, #0
 80002d6:	bf08      	it	eq
 80002d8:	2800      	cmpeq	r0, #0
 80002da:	bf1c      	itt	ne
 80002dc:	f04f 31ff 	movne.w	r1, #4294967295
 80002e0:	f04f 30ff 	movne.w	r0, #4294967295
 80002e4:	f000 b988 	b.w	80005f8 <__aeabi_idiv0>
 80002e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f0:	f000 f806 	bl	8000300 <__udivmoddi4>
 80002f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002fc:	b004      	add	sp, #16
 80002fe:	4770      	bx	lr

08000300 <__udivmoddi4>:
 8000300:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000304:	9d08      	ldr	r5, [sp, #32]
 8000306:	468e      	mov	lr, r1
 8000308:	4604      	mov	r4, r0
 800030a:	4688      	mov	r8, r1
 800030c:	2b00      	cmp	r3, #0
 800030e:	d14a      	bne.n	80003a6 <__udivmoddi4+0xa6>
 8000310:	428a      	cmp	r2, r1
 8000312:	4617      	mov	r7, r2
 8000314:	d962      	bls.n	80003dc <__udivmoddi4+0xdc>
 8000316:	fab2 f682 	clz	r6, r2
 800031a:	b14e      	cbz	r6, 8000330 <__udivmoddi4+0x30>
 800031c:	f1c6 0320 	rsb	r3, r6, #32
 8000320:	fa01 f806 	lsl.w	r8, r1, r6
 8000324:	fa20 f303 	lsr.w	r3, r0, r3
 8000328:	40b7      	lsls	r7, r6
 800032a:	ea43 0808 	orr.w	r8, r3, r8
 800032e:	40b4      	lsls	r4, r6
 8000330:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000334:	fa1f fc87 	uxth.w	ip, r7
 8000338:	fbb8 f1fe 	udiv	r1, r8, lr
 800033c:	0c23      	lsrs	r3, r4, #16
 800033e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000342:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000346:	fb01 f20c 	mul.w	r2, r1, ip
 800034a:	429a      	cmp	r2, r3
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0x62>
 800034e:	18fb      	adds	r3, r7, r3
 8000350:	f101 30ff 	add.w	r0, r1, #4294967295
 8000354:	f080 80ea 	bcs.w	800052c <__udivmoddi4+0x22c>
 8000358:	429a      	cmp	r2, r3
 800035a:	f240 80e7 	bls.w	800052c <__udivmoddi4+0x22c>
 800035e:	3902      	subs	r1, #2
 8000360:	443b      	add	r3, r7
 8000362:	1a9a      	subs	r2, r3, r2
 8000364:	b2a3      	uxth	r3, r4
 8000366:	fbb2 f0fe 	udiv	r0, r2, lr
 800036a:	fb0e 2210 	mls	r2, lr, r0, r2
 800036e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000372:	fb00 fc0c 	mul.w	ip, r0, ip
 8000376:	459c      	cmp	ip, r3
 8000378:	d909      	bls.n	800038e <__udivmoddi4+0x8e>
 800037a:	18fb      	adds	r3, r7, r3
 800037c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000380:	f080 80d6 	bcs.w	8000530 <__udivmoddi4+0x230>
 8000384:	459c      	cmp	ip, r3
 8000386:	f240 80d3 	bls.w	8000530 <__udivmoddi4+0x230>
 800038a:	443b      	add	r3, r7
 800038c:	3802      	subs	r0, #2
 800038e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000392:	eba3 030c 	sub.w	r3, r3, ip
 8000396:	2100      	movs	r1, #0
 8000398:	b11d      	cbz	r5, 80003a2 <__udivmoddi4+0xa2>
 800039a:	40f3      	lsrs	r3, r6
 800039c:	2200      	movs	r2, #0
 800039e:	e9c5 3200 	strd	r3, r2, [r5]
 80003a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a6:	428b      	cmp	r3, r1
 80003a8:	d905      	bls.n	80003b6 <__udivmoddi4+0xb6>
 80003aa:	b10d      	cbz	r5, 80003b0 <__udivmoddi4+0xb0>
 80003ac:	e9c5 0100 	strd	r0, r1, [r5]
 80003b0:	2100      	movs	r1, #0
 80003b2:	4608      	mov	r0, r1
 80003b4:	e7f5      	b.n	80003a2 <__udivmoddi4+0xa2>
 80003b6:	fab3 f183 	clz	r1, r3
 80003ba:	2900      	cmp	r1, #0
 80003bc:	d146      	bne.n	800044c <__udivmoddi4+0x14c>
 80003be:	4573      	cmp	r3, lr
 80003c0:	d302      	bcc.n	80003c8 <__udivmoddi4+0xc8>
 80003c2:	4282      	cmp	r2, r0
 80003c4:	f200 8105 	bhi.w	80005d2 <__udivmoddi4+0x2d2>
 80003c8:	1a84      	subs	r4, r0, r2
 80003ca:	eb6e 0203 	sbc.w	r2, lr, r3
 80003ce:	2001      	movs	r0, #1
 80003d0:	4690      	mov	r8, r2
 80003d2:	2d00      	cmp	r5, #0
 80003d4:	d0e5      	beq.n	80003a2 <__udivmoddi4+0xa2>
 80003d6:	e9c5 4800 	strd	r4, r8, [r5]
 80003da:	e7e2      	b.n	80003a2 <__udivmoddi4+0xa2>
 80003dc:	2a00      	cmp	r2, #0
 80003de:	f000 8090 	beq.w	8000502 <__udivmoddi4+0x202>
 80003e2:	fab2 f682 	clz	r6, r2
 80003e6:	2e00      	cmp	r6, #0
 80003e8:	f040 80a4 	bne.w	8000534 <__udivmoddi4+0x234>
 80003ec:	1a8a      	subs	r2, r1, r2
 80003ee:	0c03      	lsrs	r3, r0, #16
 80003f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003f4:	b280      	uxth	r0, r0
 80003f6:	b2bc      	uxth	r4, r7
 80003f8:	2101      	movs	r1, #1
 80003fa:	fbb2 fcfe 	udiv	ip, r2, lr
 80003fe:	fb0e 221c 	mls	r2, lr, ip, r2
 8000402:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000406:	fb04 f20c 	mul.w	r2, r4, ip
 800040a:	429a      	cmp	r2, r3
 800040c:	d907      	bls.n	800041e <__udivmoddi4+0x11e>
 800040e:	18fb      	adds	r3, r7, r3
 8000410:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000414:	d202      	bcs.n	800041c <__udivmoddi4+0x11c>
 8000416:	429a      	cmp	r2, r3
 8000418:	f200 80e0 	bhi.w	80005dc <__udivmoddi4+0x2dc>
 800041c:	46c4      	mov	ip, r8
 800041e:	1a9b      	subs	r3, r3, r2
 8000420:	fbb3 f2fe 	udiv	r2, r3, lr
 8000424:	fb0e 3312 	mls	r3, lr, r2, r3
 8000428:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800042c:	fb02 f404 	mul.w	r4, r2, r4
 8000430:	429c      	cmp	r4, r3
 8000432:	d907      	bls.n	8000444 <__udivmoddi4+0x144>
 8000434:	18fb      	adds	r3, r7, r3
 8000436:	f102 30ff 	add.w	r0, r2, #4294967295
 800043a:	d202      	bcs.n	8000442 <__udivmoddi4+0x142>
 800043c:	429c      	cmp	r4, r3
 800043e:	f200 80ca 	bhi.w	80005d6 <__udivmoddi4+0x2d6>
 8000442:	4602      	mov	r2, r0
 8000444:	1b1b      	subs	r3, r3, r4
 8000446:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800044a:	e7a5      	b.n	8000398 <__udivmoddi4+0x98>
 800044c:	f1c1 0620 	rsb	r6, r1, #32
 8000450:	408b      	lsls	r3, r1
 8000452:	fa22 f706 	lsr.w	r7, r2, r6
 8000456:	431f      	orrs	r7, r3
 8000458:	fa0e f401 	lsl.w	r4, lr, r1
 800045c:	fa20 f306 	lsr.w	r3, r0, r6
 8000460:	fa2e fe06 	lsr.w	lr, lr, r6
 8000464:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000468:	4323      	orrs	r3, r4
 800046a:	fa00 f801 	lsl.w	r8, r0, r1
 800046e:	fa1f fc87 	uxth.w	ip, r7
 8000472:	fbbe f0f9 	udiv	r0, lr, r9
 8000476:	0c1c      	lsrs	r4, r3, #16
 8000478:	fb09 ee10 	mls	lr, r9, r0, lr
 800047c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000480:	fb00 fe0c 	mul.w	lr, r0, ip
 8000484:	45a6      	cmp	lr, r4
 8000486:	fa02 f201 	lsl.w	r2, r2, r1
 800048a:	d909      	bls.n	80004a0 <__udivmoddi4+0x1a0>
 800048c:	193c      	adds	r4, r7, r4
 800048e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000492:	f080 809c 	bcs.w	80005ce <__udivmoddi4+0x2ce>
 8000496:	45a6      	cmp	lr, r4
 8000498:	f240 8099 	bls.w	80005ce <__udivmoddi4+0x2ce>
 800049c:	3802      	subs	r0, #2
 800049e:	443c      	add	r4, r7
 80004a0:	eba4 040e 	sub.w	r4, r4, lr
 80004a4:	fa1f fe83 	uxth.w	lr, r3
 80004a8:	fbb4 f3f9 	udiv	r3, r4, r9
 80004ac:	fb09 4413 	mls	r4, r9, r3, r4
 80004b0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004b4:	fb03 fc0c 	mul.w	ip, r3, ip
 80004b8:	45a4      	cmp	ip, r4
 80004ba:	d908      	bls.n	80004ce <__udivmoddi4+0x1ce>
 80004bc:	193c      	adds	r4, r7, r4
 80004be:	f103 3eff 	add.w	lr, r3, #4294967295
 80004c2:	f080 8082 	bcs.w	80005ca <__udivmoddi4+0x2ca>
 80004c6:	45a4      	cmp	ip, r4
 80004c8:	d97f      	bls.n	80005ca <__udivmoddi4+0x2ca>
 80004ca:	3b02      	subs	r3, #2
 80004cc:	443c      	add	r4, r7
 80004ce:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004d2:	eba4 040c 	sub.w	r4, r4, ip
 80004d6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004da:	4564      	cmp	r4, ip
 80004dc:	4673      	mov	r3, lr
 80004de:	46e1      	mov	r9, ip
 80004e0:	d362      	bcc.n	80005a8 <__udivmoddi4+0x2a8>
 80004e2:	d05f      	beq.n	80005a4 <__udivmoddi4+0x2a4>
 80004e4:	b15d      	cbz	r5, 80004fe <__udivmoddi4+0x1fe>
 80004e6:	ebb8 0203 	subs.w	r2, r8, r3
 80004ea:	eb64 0409 	sbc.w	r4, r4, r9
 80004ee:	fa04 f606 	lsl.w	r6, r4, r6
 80004f2:	fa22 f301 	lsr.w	r3, r2, r1
 80004f6:	431e      	orrs	r6, r3
 80004f8:	40cc      	lsrs	r4, r1
 80004fa:	e9c5 6400 	strd	r6, r4, [r5]
 80004fe:	2100      	movs	r1, #0
 8000500:	e74f      	b.n	80003a2 <__udivmoddi4+0xa2>
 8000502:	fbb1 fcf2 	udiv	ip, r1, r2
 8000506:	0c01      	lsrs	r1, r0, #16
 8000508:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800050c:	b280      	uxth	r0, r0
 800050e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000512:	463b      	mov	r3, r7
 8000514:	4638      	mov	r0, r7
 8000516:	463c      	mov	r4, r7
 8000518:	46b8      	mov	r8, r7
 800051a:	46be      	mov	lr, r7
 800051c:	2620      	movs	r6, #32
 800051e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000522:	eba2 0208 	sub.w	r2, r2, r8
 8000526:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800052a:	e766      	b.n	80003fa <__udivmoddi4+0xfa>
 800052c:	4601      	mov	r1, r0
 800052e:	e718      	b.n	8000362 <__udivmoddi4+0x62>
 8000530:	4610      	mov	r0, r2
 8000532:	e72c      	b.n	800038e <__udivmoddi4+0x8e>
 8000534:	f1c6 0220 	rsb	r2, r6, #32
 8000538:	fa2e f302 	lsr.w	r3, lr, r2
 800053c:	40b7      	lsls	r7, r6
 800053e:	40b1      	lsls	r1, r6
 8000540:	fa20 f202 	lsr.w	r2, r0, r2
 8000544:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000548:	430a      	orrs	r2, r1
 800054a:	fbb3 f8fe 	udiv	r8, r3, lr
 800054e:	b2bc      	uxth	r4, r7
 8000550:	fb0e 3318 	mls	r3, lr, r8, r3
 8000554:	0c11      	lsrs	r1, r2, #16
 8000556:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800055a:	fb08 f904 	mul.w	r9, r8, r4
 800055e:	40b0      	lsls	r0, r6
 8000560:	4589      	cmp	r9, r1
 8000562:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000566:	b280      	uxth	r0, r0
 8000568:	d93e      	bls.n	80005e8 <__udivmoddi4+0x2e8>
 800056a:	1879      	adds	r1, r7, r1
 800056c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000570:	d201      	bcs.n	8000576 <__udivmoddi4+0x276>
 8000572:	4589      	cmp	r9, r1
 8000574:	d81f      	bhi.n	80005b6 <__udivmoddi4+0x2b6>
 8000576:	eba1 0109 	sub.w	r1, r1, r9
 800057a:	fbb1 f9fe 	udiv	r9, r1, lr
 800057e:	fb09 f804 	mul.w	r8, r9, r4
 8000582:	fb0e 1119 	mls	r1, lr, r9, r1
 8000586:	b292      	uxth	r2, r2
 8000588:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800058c:	4542      	cmp	r2, r8
 800058e:	d229      	bcs.n	80005e4 <__udivmoddi4+0x2e4>
 8000590:	18ba      	adds	r2, r7, r2
 8000592:	f109 31ff 	add.w	r1, r9, #4294967295
 8000596:	d2c4      	bcs.n	8000522 <__udivmoddi4+0x222>
 8000598:	4542      	cmp	r2, r8
 800059a:	d2c2      	bcs.n	8000522 <__udivmoddi4+0x222>
 800059c:	f1a9 0102 	sub.w	r1, r9, #2
 80005a0:	443a      	add	r2, r7
 80005a2:	e7be      	b.n	8000522 <__udivmoddi4+0x222>
 80005a4:	45f0      	cmp	r8, lr
 80005a6:	d29d      	bcs.n	80004e4 <__udivmoddi4+0x1e4>
 80005a8:	ebbe 0302 	subs.w	r3, lr, r2
 80005ac:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005b0:	3801      	subs	r0, #1
 80005b2:	46e1      	mov	r9, ip
 80005b4:	e796      	b.n	80004e4 <__udivmoddi4+0x1e4>
 80005b6:	eba7 0909 	sub.w	r9, r7, r9
 80005ba:	4449      	add	r1, r9
 80005bc:	f1a8 0c02 	sub.w	ip, r8, #2
 80005c0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005c4:	fb09 f804 	mul.w	r8, r9, r4
 80005c8:	e7db      	b.n	8000582 <__udivmoddi4+0x282>
 80005ca:	4673      	mov	r3, lr
 80005cc:	e77f      	b.n	80004ce <__udivmoddi4+0x1ce>
 80005ce:	4650      	mov	r0, sl
 80005d0:	e766      	b.n	80004a0 <__udivmoddi4+0x1a0>
 80005d2:	4608      	mov	r0, r1
 80005d4:	e6fd      	b.n	80003d2 <__udivmoddi4+0xd2>
 80005d6:	443b      	add	r3, r7
 80005d8:	3a02      	subs	r2, #2
 80005da:	e733      	b.n	8000444 <__udivmoddi4+0x144>
 80005dc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005e0:	443b      	add	r3, r7
 80005e2:	e71c      	b.n	800041e <__udivmoddi4+0x11e>
 80005e4:	4649      	mov	r1, r9
 80005e6:	e79c      	b.n	8000522 <__udivmoddi4+0x222>
 80005e8:	eba1 0109 	sub.w	r1, r1, r9
 80005ec:	46c4      	mov	ip, r8
 80005ee:	fbb1 f9fe 	udiv	r9, r1, lr
 80005f2:	fb09 f804 	mul.w	r8, r9, r4
 80005f6:	e7c4      	b.n	8000582 <__udivmoddi4+0x282>

080005f8 <__aeabi_idiv0>:
 80005f8:	4770      	bx	lr
 80005fa:	bf00      	nop

080005fc <HAL_GPIO_EXTI_Callback>:
uint8_t rxBuffer[256];
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b084      	sub	sp, #16
 8000600:	af00      	add	r7, sp, #0
 8000602:	4603      	mov	r3, r0
 8000604:	80fb      	strh	r3, [r7, #6]
    if(GPIO_Pin == SX1272_DIO0_PIN) {
 8000606:	88fb      	ldrh	r3, [r7, #6]
 8000608:	2b01      	cmp	r3, #1
 800060a:	d10f      	bne.n	800062c <HAL_GPIO_EXTI_Callback+0x30>
        uint8_t irqFlags = SX1272_Read(REG_IRQ_FLAGS);
 800060c:	2012      	movs	r0, #18
 800060e:	f000 fb07 	bl	8000c20 <SX1272_Read>
 8000612:	4603      	mov	r3, r0
 8000614:	73fb      	strb	r3, [r7, #15]

        if(irqFlags & IRQ_TX_DONE_MASK) {
 8000616:	7bfb      	ldrb	r3, [r7, #15]
 8000618:	f003 0308 	and.w	r3, r3, #8
 800061c:	2b00      	cmp	r3, #0
 800061e:	d005      	beq.n	800062c <HAL_GPIO_EXTI_Callback+0x30>
            // Handle TxDone
            SX1272_Write(REG_IRQ_FLAGS, IRQ_TX_DONE_MASK);
 8000620:	2108      	movs	r1, #8
 8000622:	2012      	movs	r0, #18
 8000624:	f000 fad2 	bl	8000bcc <SX1272_Write>
            SX1272_StartReceiving();
 8000628:	f000 fd7d 	bl	8001126 <SX1272_StartReceiving>

        if(irqFlags & IRQ_RX_DONE_MASK) {
            // You could set a flag here to process in main loop
        }
    }
}
 800062c:	bf00      	nop
 800062e:	3710      	adds	r7, #16
 8000630:	46bd      	mov	sp, r7
 8000632:	bd80      	pop	{r7, pc}

08000634 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b082      	sub	sp, #8
 8000638:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800063a:	f000 fe00 	bl	800123e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800063e:	f000 f84b 	bl	80006d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000642:	f000 f8f5 	bl	8000830 <MX_GPIO_Init>
  MX_CRC_Init();
 8000646:	f000 f893 	bl	8000770 <MX_CRC_Init>
  MX_SPI1_Init();
 800064a:	f000 f8b3 	bl	80007b4 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  SX1272_Init(&hspi1);
 800064e:	481d      	ldr	r0, [pc, #116]	@ (80006c4 <main+0x90>)
 8000650:	f000 fa24 	bl	8000a9c <SX1272_Init>

 // Start receiving
 SX1272_StartReceiving();
 8000654:	f000 fd67 	bl	8001126 <SX1272_StartReceiving>
 uint8_t counter = 0;
 8000658:	2300      	movs	r3, #0
 800065a:	71fb      	strb	r3, [r7, #7]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  static uint32_t lastSend = 0;
	  if(HAL_GetTick() - lastSend >= 5000) {
 800065c:	f000 fe54 	bl	8001308 <HAL_GetTick>
 8000660:	4602      	mov	r2, r0
 8000662:	4b19      	ldr	r3, [pc, #100]	@ (80006c8 <main+0x94>)
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	1ad3      	subs	r3, r2, r3
 8000668:	f241 3287 	movw	r2, #4999	@ 0x1387
 800066c:	4293      	cmp	r3, r2
 800066e:	d915      	bls.n	800069c <main+0x68>
		  sprintf((char*)txBuffer, "Hello LoRa %d", counter++);
 8000670:	79fb      	ldrb	r3, [r7, #7]
 8000672:	1c5a      	adds	r2, r3, #1
 8000674:	71fa      	strb	r2, [r7, #7]
 8000676:	461a      	mov	r2, r3
 8000678:	4914      	ldr	r1, [pc, #80]	@ (80006cc <main+0x98>)
 800067a:	4815      	ldr	r0, [pc, #84]	@ (80006d0 <main+0x9c>)
 800067c:	f003 f88c 	bl	8003798 <siprintf>
		  SX1272_SendPacket(txBuffer, strlen((char*)txBuffer));
 8000680:	4813      	ldr	r0, [pc, #76]	@ (80006d0 <main+0x9c>)
 8000682:	f7ff fdcd 	bl	8000220 <strlen>
 8000686:	4603      	mov	r3, r0
 8000688:	b2db      	uxtb	r3, r3
 800068a:	4619      	mov	r1, r3
 800068c:	4810      	ldr	r0, [pc, #64]	@ (80006d0 <main+0x9c>)
 800068e:	f000 fced 	bl	800106c <SX1272_SendPacket>
		  lastSend = HAL_GetTick();
 8000692:	f000 fe39 	bl	8001308 <HAL_GetTick>
 8000696:	4603      	mov	r3, r0
 8000698:	4a0b      	ldr	r2, [pc, #44]	@ (80006c8 <main+0x94>)
 800069a:	6013      	str	r3, [r2, #0]
	      // Send packet
	  }

	  // Check for received packets
	  if(SX1272_CheckReceived()) {
 800069c:	f000 fd4e 	bl	800113c <SX1272_CheckReceived>
 80006a0:	4603      	mov	r3, r0
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d0da      	beq.n	800065c <main+0x28>
		  uint8_t len = SX1272_ReceivePacket(rxBuffer, sizeof(rxBuffer));
 80006a6:	2100      	movs	r1, #0
 80006a8:	480a      	ldr	r0, [pc, #40]	@ (80006d4 <main+0xa0>)
 80006aa:	f000 fcfe 	bl	80010aa <SX1272_ReceivePacket>
 80006ae:	4603      	mov	r3, r0
 80006b0:	71bb      	strb	r3, [r7, #6]
		  if(len > 0) {
 80006b2:	79bb      	ldrb	r3, [r7, #6]
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d0d1      	beq.n	800065c <main+0x28>
			  rxBuffer[len] = 0; // Null terminate
 80006b8:	79bb      	ldrb	r3, [r7, #6]
 80006ba:	4a06      	ldr	r2, [pc, #24]	@ (80006d4 <main+0xa0>)
 80006bc:	2100      	movs	r1, #0
 80006be:	54d1      	strb	r1, [r2, r3]
  {
 80006c0:	e7cc      	b.n	800065c <main+0x28>
 80006c2:	bf00      	nop
 80006c4:	2000009c 	.word	0x2000009c
 80006c8:	20000300 	.word	0x20000300
 80006cc:	080040f0 	.word	0x080040f0
 80006d0:	20000100 	.word	0x20000100
 80006d4:	20000200 	.word	0x20000200

080006d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b094      	sub	sp, #80	@ 0x50
 80006dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006de:	f107 0318 	add.w	r3, r7, #24
 80006e2:	2238      	movs	r2, #56	@ 0x38
 80006e4:	2100      	movs	r1, #0
 80006e6:	4618      	mov	r0, r3
 80006e8:	f003 f878 	bl	80037dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006ec:	1d3b      	adds	r3, r7, #4
 80006ee:	2200      	movs	r2, #0
 80006f0:	601a      	str	r2, [r3, #0]
 80006f2:	605a      	str	r2, [r3, #4]
 80006f4:	609a      	str	r2, [r3, #8]
 80006f6:	60da      	str	r2, [r3, #12]
 80006f8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006fa:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80006fe:	f001 fa4d 	bl	8001b9c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000702:	2302      	movs	r3, #2
 8000704:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000706:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800070a:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800070c:	2340      	movs	r3, #64	@ 0x40
 800070e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000710:	2302      	movs	r3, #2
 8000712:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000714:	2302      	movs	r3, #2
 8000716:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000718:	2301      	movs	r3, #1
 800071a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 21;
 800071c:	2315      	movs	r3, #21
 800071e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000720:	2302      	movs	r3, #2
 8000722:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000724:	2302      	movs	r3, #2
 8000726:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000728:	2302      	movs	r3, #2
 800072a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800072c:	f107 0318 	add.w	r3, r7, #24
 8000730:	4618      	mov	r0, r3
 8000732:	f001 fae7 	bl	8001d04 <HAL_RCC_OscConfig>
 8000736:	4603      	mov	r3, r0
 8000738:	2b00      	cmp	r3, #0
 800073a:	d001      	beq.n	8000740 <SystemClock_Config+0x68>
  {
    Error_Handler();
 800073c:	f000 f8da 	bl	80008f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000740:	230f      	movs	r3, #15
 8000742:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000744:	2303      	movs	r3, #3
 8000746:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8000748:	2380      	movs	r3, #128	@ 0x80
 800074a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800074c:	2300      	movs	r3, #0
 800074e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000750:	2300      	movs	r3, #0
 8000752:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000754:	1d3b      	adds	r3, r7, #4
 8000756:	2102      	movs	r1, #2
 8000758:	4618      	mov	r0, r3
 800075a:	f001 fde5 	bl	8002328 <HAL_RCC_ClockConfig>
 800075e:	4603      	mov	r3, r0
 8000760:	2b00      	cmp	r3, #0
 8000762:	d001      	beq.n	8000768 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000764:	f000 f8c6 	bl	80008f4 <Error_Handler>
  }
}
 8000768:	bf00      	nop
 800076a:	3750      	adds	r7, #80	@ 0x50
 800076c:	46bd      	mov	sp, r7
 800076e:	bd80      	pop	{r7, pc}

08000770 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000774:	4b0d      	ldr	r3, [pc, #52]	@ (80007ac <MX_CRC_Init+0x3c>)
 8000776:	4a0e      	ldr	r2, [pc, #56]	@ (80007b0 <MX_CRC_Init+0x40>)
 8000778:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800077a:	4b0c      	ldr	r3, [pc, #48]	@ (80007ac <MX_CRC_Init+0x3c>)
 800077c:	2200      	movs	r2, #0
 800077e:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000780:	4b0a      	ldr	r3, [pc, #40]	@ (80007ac <MX_CRC_Init+0x3c>)
 8000782:	2200      	movs	r2, #0
 8000784:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000786:	4b09      	ldr	r3, [pc, #36]	@ (80007ac <MX_CRC_Init+0x3c>)
 8000788:	2200      	movs	r2, #0
 800078a:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 800078c:	4b07      	ldr	r3, [pc, #28]	@ (80007ac <MX_CRC_Init+0x3c>)
 800078e:	2200      	movs	r2, #0
 8000790:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000792:	4b06      	ldr	r3, [pc, #24]	@ (80007ac <MX_CRC_Init+0x3c>)
 8000794:	2201      	movs	r2, #1
 8000796:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000798:	4804      	ldr	r0, [pc, #16]	@ (80007ac <MX_CRC_Init+0x3c>)
 800079a:	f000 fef3 	bl	8001584 <HAL_CRC_Init>
 800079e:	4603      	mov	r3, r0
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d001      	beq.n	80007a8 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 80007a4:	f000 f8a6 	bl	80008f4 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80007a8:	bf00      	nop
 80007aa:	bd80      	pop	{r7, pc}
 80007ac:	20000078 	.word	0x20000078
 80007b0:	40023000 	.word	0x40023000

080007b4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80007b8:	4b1b      	ldr	r3, [pc, #108]	@ (8000828 <MX_SPI1_Init+0x74>)
 80007ba:	4a1c      	ldr	r2, [pc, #112]	@ (800082c <MX_SPI1_Init+0x78>)
 80007bc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80007be:	4b1a      	ldr	r3, [pc, #104]	@ (8000828 <MX_SPI1_Init+0x74>)
 80007c0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80007c4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80007c6:	4b18      	ldr	r3, [pc, #96]	@ (8000828 <MX_SPI1_Init+0x74>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80007cc:	4b16      	ldr	r3, [pc, #88]	@ (8000828 <MX_SPI1_Init+0x74>)
 80007ce:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80007d2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007d4:	4b14      	ldr	r3, [pc, #80]	@ (8000828 <MX_SPI1_Init+0x74>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007da:	4b13      	ldr	r3, [pc, #76]	@ (8000828 <MX_SPI1_Init+0x74>)
 80007dc:	2200      	movs	r2, #0
 80007de:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80007e0:	4b11      	ldr	r3, [pc, #68]	@ (8000828 <MX_SPI1_Init+0x74>)
 80007e2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80007e6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80007e8:	4b0f      	ldr	r3, [pc, #60]	@ (8000828 <MX_SPI1_Init+0x74>)
 80007ea:	2220      	movs	r2, #32
 80007ec:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007ee:	4b0e      	ldr	r3, [pc, #56]	@ (8000828 <MX_SPI1_Init+0x74>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80007f4:	4b0c      	ldr	r3, [pc, #48]	@ (8000828 <MX_SPI1_Init+0x74>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007fa:	4b0b      	ldr	r3, [pc, #44]	@ (8000828 <MX_SPI1_Init+0x74>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000800:	4b09      	ldr	r3, [pc, #36]	@ (8000828 <MX_SPI1_Init+0x74>)
 8000802:	2207      	movs	r2, #7
 8000804:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000806:	4b08      	ldr	r3, [pc, #32]	@ (8000828 <MX_SPI1_Init+0x74>)
 8000808:	2200      	movs	r2, #0
 800080a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800080c:	4b06      	ldr	r3, [pc, #24]	@ (8000828 <MX_SPI1_Init+0x74>)
 800080e:	2200      	movs	r2, #0
 8000810:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000812:	4805      	ldr	r0, [pc, #20]	@ (8000828 <MX_SPI1_Init+0x74>)
 8000814:	f001 ff6c 	bl	80026f0 <HAL_SPI_Init>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	d001      	beq.n	8000822 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800081e:	f000 f869 	bl	80008f4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000822:	bf00      	nop
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	2000009c 	.word	0x2000009c
 800082c:	40013000 	.word	0x40013000

08000830 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b088      	sub	sp, #32
 8000834:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000836:	f107 030c 	add.w	r3, r7, #12
 800083a:	2200      	movs	r2, #0
 800083c:	601a      	str	r2, [r3, #0]
 800083e:	605a      	str	r2, [r3, #4]
 8000840:	609a      	str	r2, [r3, #8]
 8000842:	60da      	str	r2, [r3, #12]
 8000844:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000846:	4b29      	ldr	r3, [pc, #164]	@ (80008ec <MX_GPIO_Init+0xbc>)
 8000848:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800084a:	4a28      	ldr	r2, [pc, #160]	@ (80008ec <MX_GPIO_Init+0xbc>)
 800084c:	f043 0320 	orr.w	r3, r3, #32
 8000850:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000852:	4b26      	ldr	r3, [pc, #152]	@ (80008ec <MX_GPIO_Init+0xbc>)
 8000854:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000856:	f003 0320 	and.w	r3, r3, #32
 800085a:	60bb      	str	r3, [r7, #8]
 800085c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800085e:	4b23      	ldr	r3, [pc, #140]	@ (80008ec <MX_GPIO_Init+0xbc>)
 8000860:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000862:	4a22      	ldr	r2, [pc, #136]	@ (80008ec <MX_GPIO_Init+0xbc>)
 8000864:	f043 0301 	orr.w	r3, r3, #1
 8000868:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800086a:	4b20      	ldr	r3, [pc, #128]	@ (80008ec <MX_GPIO_Init+0xbc>)
 800086c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800086e:	f003 0301 	and.w	r3, r3, #1
 8000872:	607b      	str	r3, [r7, #4]
 8000874:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000876:	4b1d      	ldr	r3, [pc, #116]	@ (80008ec <MX_GPIO_Init+0xbc>)
 8000878:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800087a:	4a1c      	ldr	r2, [pc, #112]	@ (80008ec <MX_GPIO_Init+0xbc>)
 800087c:	f043 0302 	orr.w	r3, r3, #2
 8000880:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000882:	4b1a      	ldr	r3, [pc, #104]	@ (80008ec <MX_GPIO_Init+0xbc>)
 8000884:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000886:	f003 0302 	and.w	r3, r3, #2
 800088a:	603b      	str	r3, [r7, #0]
 800088c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_SET);
 800088e:	2201      	movs	r2, #1
 8000890:	2118      	movs	r1, #24
 8000892:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000896:	f001 f951 	bl	8001b3c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA3 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 800089a:	2318      	movs	r3, #24
 800089c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800089e:	2301      	movs	r3, #1
 80008a0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a2:	2300      	movs	r3, #0
 80008a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008a6:	2302      	movs	r3, #2
 80008a8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008aa:	f107 030c 	add.w	r3, r7, #12
 80008ae:	4619      	mov	r1, r3
 80008b0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008b4:	f000 ffc0 	bl	8001838 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80008b8:	2301      	movs	r3, #1
 80008ba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008bc:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80008c0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80008c2:	2302      	movs	r3, #2
 80008c4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008c6:	f107 030c 	add.w	r3, r7, #12
 80008ca:	4619      	mov	r1, r3
 80008cc:	4808      	ldr	r0, [pc, #32]	@ (80008f0 <MX_GPIO_Init+0xc0>)
 80008ce:	f000 ffb3 	bl	8001838 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80008d2:	2200      	movs	r2, #0
 80008d4:	2100      	movs	r1, #0
 80008d6:	2006      	movs	r0, #6
 80008d8:	f000 fe1f 	bl	800151a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80008dc:	2006      	movs	r0, #6
 80008de:	f000 fe36 	bl	800154e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80008e2:	bf00      	nop
 80008e4:	3720      	adds	r7, #32
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bd80      	pop	{r7, pc}
 80008ea:	bf00      	nop
 80008ec:	40021000 	.word	0x40021000
 80008f0:	48000400 	.word	0x48000400

080008f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008f4:	b480      	push	{r7}
 80008f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008f8:	b672      	cpsid	i
}
 80008fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008fc:	bf00      	nop
 80008fe:	e7fd      	b.n	80008fc <Error_Handler+0x8>

08000900 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b082      	sub	sp, #8
 8000904:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000906:	4b0f      	ldr	r3, [pc, #60]	@ (8000944 <HAL_MspInit+0x44>)
 8000908:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800090a:	4a0e      	ldr	r2, [pc, #56]	@ (8000944 <HAL_MspInit+0x44>)
 800090c:	f043 0301 	orr.w	r3, r3, #1
 8000910:	6613      	str	r3, [r2, #96]	@ 0x60
 8000912:	4b0c      	ldr	r3, [pc, #48]	@ (8000944 <HAL_MspInit+0x44>)
 8000914:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000916:	f003 0301 	and.w	r3, r3, #1
 800091a:	607b      	str	r3, [r7, #4]
 800091c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800091e:	4b09      	ldr	r3, [pc, #36]	@ (8000944 <HAL_MspInit+0x44>)
 8000920:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000922:	4a08      	ldr	r2, [pc, #32]	@ (8000944 <HAL_MspInit+0x44>)
 8000924:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000928:	6593      	str	r3, [r2, #88]	@ 0x58
 800092a:	4b06      	ldr	r3, [pc, #24]	@ (8000944 <HAL_MspInit+0x44>)
 800092c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800092e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000932:	603b      	str	r3, [r7, #0]
 8000934:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000936:	f001 f9d5 	bl	8001ce4 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800093a:	bf00      	nop
 800093c:	3708      	adds	r7, #8
 800093e:	46bd      	mov	sp, r7
 8000940:	bd80      	pop	{r7, pc}
 8000942:	bf00      	nop
 8000944:	40021000 	.word	0x40021000

08000948 <HAL_CRC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcrc: CRC handle pointer
  * @retval None
  */
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000948:	b480      	push	{r7}
 800094a:	b085      	sub	sp, #20
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	4a0a      	ldr	r2, [pc, #40]	@ (8000980 <HAL_CRC_MspInit+0x38>)
 8000956:	4293      	cmp	r3, r2
 8000958:	d10b      	bne.n	8000972 <HAL_CRC_MspInit+0x2a>
  {
    /* USER CODE BEGIN CRC_MspInit 0 */

    /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800095a:	4b0a      	ldr	r3, [pc, #40]	@ (8000984 <HAL_CRC_MspInit+0x3c>)
 800095c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800095e:	4a09      	ldr	r2, [pc, #36]	@ (8000984 <HAL_CRC_MspInit+0x3c>)
 8000960:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000964:	6493      	str	r3, [r2, #72]	@ 0x48
 8000966:	4b07      	ldr	r3, [pc, #28]	@ (8000984 <HAL_CRC_MspInit+0x3c>)
 8000968:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800096a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800096e:	60fb      	str	r3, [r7, #12]
 8000970:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END CRC_MspInit 1 */

  }

}
 8000972:	bf00      	nop
 8000974:	3714      	adds	r7, #20
 8000976:	46bd      	mov	sp, r7
 8000978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097c:	4770      	bx	lr
 800097e:	bf00      	nop
 8000980:	40023000 	.word	0x40023000
 8000984:	40021000 	.word	0x40021000

08000988 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b08a      	sub	sp, #40	@ 0x28
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000990:	f107 0314 	add.w	r3, r7, #20
 8000994:	2200      	movs	r2, #0
 8000996:	601a      	str	r2, [r3, #0]
 8000998:	605a      	str	r2, [r3, #4]
 800099a:	609a      	str	r2, [r3, #8]
 800099c:	60da      	str	r2, [r3, #12]
 800099e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	4a1b      	ldr	r2, [pc, #108]	@ (8000a14 <HAL_SPI_MspInit+0x8c>)
 80009a6:	4293      	cmp	r3, r2
 80009a8:	d130      	bne.n	8000a0c <HAL_SPI_MspInit+0x84>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80009aa:	4b1b      	ldr	r3, [pc, #108]	@ (8000a18 <HAL_SPI_MspInit+0x90>)
 80009ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80009ae:	4a1a      	ldr	r2, [pc, #104]	@ (8000a18 <HAL_SPI_MspInit+0x90>)
 80009b0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80009b4:	6613      	str	r3, [r2, #96]	@ 0x60
 80009b6:	4b18      	ldr	r3, [pc, #96]	@ (8000a18 <HAL_SPI_MspInit+0x90>)
 80009b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80009ba:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80009be:	613b      	str	r3, [r7, #16]
 80009c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009c2:	4b15      	ldr	r3, [pc, #84]	@ (8000a18 <HAL_SPI_MspInit+0x90>)
 80009c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009c6:	4a14      	ldr	r2, [pc, #80]	@ (8000a18 <HAL_SPI_MspInit+0x90>)
 80009c8:	f043 0301 	orr.w	r3, r3, #1
 80009cc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009ce:	4b12      	ldr	r3, [pc, #72]	@ (8000a18 <HAL_SPI_MspInit+0x90>)
 80009d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009d2:	f003 0301 	and.w	r3, r3, #1
 80009d6:	60fb      	str	r3, [r7, #12]
 80009d8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80009da:	23e0      	movs	r3, #224	@ 0xe0
 80009dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009de:	2302      	movs	r3, #2
 80009e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e2:	2300      	movs	r3, #0
 80009e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009e6:	2300      	movs	r3, #0
 80009e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80009ea:	2305      	movs	r3, #5
 80009ec:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009ee:	f107 0314 	add.w	r3, r7, #20
 80009f2:	4619      	mov	r1, r3
 80009f4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80009f8:	f000 ff1e 	bl	8001838 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 80009fc:	2200      	movs	r2, #0
 80009fe:	2100      	movs	r1, #0
 8000a00:	2023      	movs	r0, #35	@ 0x23
 8000a02:	f000 fd8a 	bl	800151a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8000a06:	2023      	movs	r0, #35	@ 0x23
 8000a08:	f000 fda1 	bl	800154e <HAL_NVIC_EnableIRQ>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000a0c:	bf00      	nop
 8000a0e:	3728      	adds	r7, #40	@ 0x28
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bd80      	pop	{r7, pc}
 8000a14:	40013000 	.word	0x40013000
 8000a18:	40021000 	.word	0x40021000

08000a1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a20:	bf00      	nop
 8000a22:	e7fd      	b.n	8000a20 <NMI_Handler+0x4>

08000a24 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a24:	b480      	push	{r7}
 8000a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a28:	bf00      	nop
 8000a2a:	e7fd      	b.n	8000a28 <HardFault_Handler+0x4>

08000a2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a30:	bf00      	nop
 8000a32:	e7fd      	b.n	8000a30 <MemManage_Handler+0x4>

08000a34 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a34:	b480      	push	{r7}
 8000a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a38:	bf00      	nop
 8000a3a:	e7fd      	b.n	8000a38 <BusFault_Handler+0x4>

08000a3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a40:	bf00      	nop
 8000a42:	e7fd      	b.n	8000a40 <UsageFault_Handler+0x4>

08000a44 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a44:	b480      	push	{r7}
 8000a46:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a48:	bf00      	nop
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a50:	4770      	bx	lr

08000a52 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a52:	b480      	push	{r7}
 8000a54:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a56:	bf00      	nop
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5e:	4770      	bx	lr

08000a60 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a60:	b480      	push	{r7}
 8000a62:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a64:	bf00      	nop
 8000a66:	46bd      	mov	sp, r7
 8000a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6c:	4770      	bx	lr

08000a6e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a6e:	b580      	push	{r7, lr}
 8000a70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a72:	f000 fc37 	bl	80012e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a76:	bf00      	nop
 8000a78:	bd80      	pop	{r7, pc}

08000a7a <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000a7a:	b580      	push	{r7, lr}
 8000a7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000a7e:	2001      	movs	r0, #1
 8000a80:	f001 f874 	bl	8001b6c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000a84:	bf00      	nop
 8000a86:	bd80      	pop	{r7, pc}

08000a88 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8000a8c:	4802      	ldr	r0, [pc, #8]	@ (8000a98 <SPI1_IRQHandler+0x10>)
 8000a8e:	f002 fba7 	bl	80031e0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8000a92:	bf00      	nop
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	2000009c 	.word	0x2000009c

08000a9c <SX1272_Init>:

// Private functions
static void SX1272_SetOpMode(uint8_t mode);

void SX1272_Init(SPI_HandleTypeDef *spi)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b088      	sub	sp, #32
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
    hspi = spi;
 8000aa4:	4a3a      	ldr	r2, [pc, #232]	@ (8000b90 <SX1272_Init+0xf4>)
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	6013      	str	r3, [r2, #0]

    // Initialize GPIOs
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aaa:	f107 0308 	add.w	r3, r7, #8
 8000aae:	2200      	movs	r2, #0
 8000ab0:	601a      	str	r2, [r3, #0]
 8000ab2:	605a      	str	r2, [r3, #4]
 8000ab4:	609a      	str	r2, [r3, #8]
 8000ab6:	60da      	str	r2, [r3, #12]
 8000ab8:	611a      	str	r2, [r3, #16]

    // NSS pin
    GPIO_InitStruct.Pin = SX1272_NSS_PIN;
 8000aba:	2310      	movs	r3, #16
 8000abc:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000abe:	2301      	movs	r3, #1
 8000ac0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ac6:	2302      	movs	r3, #2
 8000ac8:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(SX1272_NSS_PORT, &GPIO_InitStruct);
 8000aca:	f107 0308 	add.w	r3, r7, #8
 8000ace:	4619      	mov	r1, r3
 8000ad0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ad4:	f000 feb0 	bl	8001838 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(SX1272_NSS_PORT, SX1272_NSS_PIN, GPIO_PIN_SET);
 8000ad8:	2201      	movs	r2, #1
 8000ada:	2110      	movs	r1, #16
 8000adc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ae0:	f001 f82c 	bl	8001b3c <HAL_GPIO_WritePin>

    // Reset pin
    GPIO_InitStruct.Pin = SX1272_RESET_PIN;
 8000ae4:	2308      	movs	r3, #8
 8000ae6:	60bb      	str	r3, [r7, #8]
    HAL_GPIO_Init(SX1272_RESET_PORT, &GPIO_InitStruct);
 8000ae8:	f107 0308 	add.w	r3, r7, #8
 8000aec:	4619      	mov	r1, r3
 8000aee:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000af2:	f000 fea1 	bl	8001838 <HAL_GPIO_Init>

    // DIO0 pin (interrupt)
    GPIO_InitStruct.Pin = SX1272_DIO0_PIN;
 8000af6:	2301      	movs	r3, #1
 8000af8:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000afa:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000afe:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b00:	2300      	movs	r3, #0
 8000b02:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(SX1272_DIO0_PORT, &GPIO_InitStruct);
 8000b04:	f107 0308 	add.w	r3, r7, #8
 8000b08:	4619      	mov	r1, r3
 8000b0a:	4822      	ldr	r0, [pc, #136]	@ (8000b94 <SX1272_Init+0xf8>)
 8000b0c:	f000 fe94 	bl	8001838 <HAL_GPIO_Init>

    // Reset the module
    SX1272_Reset();
 8000b10:	f000 f846 	bl	8000ba0 <SX1272_Reset>

    // Check version
    uint8_t version = SX1272_Read(REG_VERSION);
 8000b14:	2042      	movs	r0, #66	@ 0x42
 8000b16:	f000 f883 	bl	8000c20 <SX1272_Read>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	77fb      	strb	r3, [r7, #31]
    if(version != 0x12) {
 8000b1e:	7ffb      	ldrb	r3, [r7, #31]
 8000b20:	2b12      	cmp	r3, #18
 8000b22:	d001      	beq.n	8000b28 <SX1272_Init+0x8c>
        while(1); // Error - device not found
 8000b24:	bf00      	nop
 8000b26:	e7fd      	b.n	8000b24 <SX1272_Init+0x88>
    }

    // Put in LoRa mode
    SX1272_SetOpMode(MODE_LONG_RANGE_MODE | MODE_SLEEP);
 8000b28:	2080      	movs	r0, #128	@ 0x80
 8000b2a:	f000 f8ff 	bl	8000d2c <SX1272_SetOpMode>
    HAL_Delay(10);
 8000b2e:	200a      	movs	r0, #10
 8000b30:	f000 fbf6 	bl	8001320 <HAL_Delay>

    // Set frequency to 915 MHz
    SX1272_SetFrequency(915000000);
 8000b34:	4818      	ldr	r0, [pc, #96]	@ (8000b98 <SX1272_Init+0xfc>)
 8000b36:	f000 f907 	bl	8000d48 <SX1272_SetFrequency>

    // Set base addresses
    SX1272_Write(REG_FIFO_TX_BASE_ADDR, 0);
 8000b3a:	2100      	movs	r1, #0
 8000b3c:	200e      	movs	r0, #14
 8000b3e:	f000 f845 	bl	8000bcc <SX1272_Write>
    SX1272_Write(REG_FIFO_RX_BASE_ADDR, 0);
 8000b42:	2100      	movs	r1, #0
 8000b44:	200f      	movs	r0, #15
 8000b46:	f000 f841 	bl	8000bcc <SX1272_Write>

    // Set LNA boost
    SX1272_SetLnaBoost(1);
 8000b4a:	2001      	movs	r0, #1
 8000b4c:	f000 fa6b 	bl	8001026 <SX1272_SetLnaBoost>

    // Set TX power to 17 dBm
    SX1272_SetTxPower(17);
 8000b50:	2011      	movs	r0, #17
 8000b52:	f000 f937 	bl	8000dc4 <SX1272_SetTxPower>

    // Set spreading factor to 12
    SX1272_SetSpreadingFactor(12);
 8000b56:	200c      	movs	r0, #12
 8000b58:	f000 f956 	bl	8000e08 <SX1272_SetSpreadingFactor>

    // Set bandwidth to 125 kHz
    SX1272_SetBandwidth(125000);
 8000b5c:	480f      	ldr	r0, [pc, #60]	@ (8000b9c <SX1272_Init+0x100>)
 8000b5e:	f000 f991 	bl	8000e84 <SX1272_SetBandwidth>

    // Set coding rate to 4/8
    SX1272_SetCodingRate4(8);
 8000b62:	2008      	movs	r0, #8
 8000b64:	f000 f9f8 	bl	8000f58 <SX1272_SetCodingRate4>

    // Set preamble length to 8
    SX1272_SetPreambleLength(8);
 8000b68:	2008      	movs	r0, #8
 8000b6a:	f000 fa30 	bl	8000fce <SX1272_SetPreambleLength>

    // Enable CRC
    SX1272_EnableCRC();
 8000b6e:	f000 fa45 	bl	8000ffc <SX1272_EnableCRC>

    // Set sync word to 0x12
    SX1272_SetSyncWord(0x12);
 8000b72:	2012      	movs	r0, #18
 8000b74:	f000 fa1d 	bl	8000fb2 <SX1272_SetSyncWord>

    // Set DIO0 for TxDone and RxDone
    SX1272_Write(REG_DIO_MAPPING1, 0x00); // DIO0 => 00: TxDone, 01: RxDone
 8000b78:	2100      	movs	r1, #0
 8000b7a:	2040      	movs	r0, #64	@ 0x40
 8000b7c:	f000 f826 	bl	8000bcc <SX1272_Write>

    // Put in standby mode
    SX1272_SetOpMode(MODE_LONG_RANGE_MODE | MODE_STDBY);
 8000b80:	2081      	movs	r0, #129	@ 0x81
 8000b82:	f000 f8d3 	bl	8000d2c <SX1272_SetOpMode>
}
 8000b86:	bf00      	nop
 8000b88:	3720      	adds	r7, #32
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	20000304 	.word	0x20000304
 8000b94:	48000400 	.word	0x48000400
 8000b98:	3689cac0 	.word	0x3689cac0
 8000b9c:	0001e848 	.word	0x0001e848

08000ba0 <SX1272_Reset>:

void SX1272_Reset(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(SX1272_RESET_PORT, SX1272_RESET_PIN, GPIO_PIN_RESET);
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	2108      	movs	r1, #8
 8000ba8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000bac:	f000 ffc6 	bl	8001b3c <HAL_GPIO_WritePin>
    HAL_Delay(1); // Wait at least 100us
 8000bb0:	2001      	movs	r0, #1
 8000bb2:	f000 fbb5 	bl	8001320 <HAL_Delay>
    HAL_GPIO_WritePin(SX1272_RESET_PORT, SX1272_RESET_PIN, GPIO_PIN_SET);
 8000bb6:	2201      	movs	r2, #1
 8000bb8:	2108      	movs	r1, #8
 8000bba:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000bbe:	f000 ffbd 	bl	8001b3c <HAL_GPIO_WritePin>
    HAL_Delay(5); // Wait for reset to complete
 8000bc2:	2005      	movs	r0, #5
 8000bc4:	f000 fbac 	bl	8001320 <HAL_Delay>
}
 8000bc8:	bf00      	nop
 8000bca:	bd80      	pop	{r7, pc}

08000bcc <SX1272_Write>:

void SX1272_Write(uint8_t addr, uint8_t data)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b084      	sub	sp, #16
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	460a      	mov	r2, r1
 8000bd6:	71fb      	strb	r3, [r7, #7]
 8000bd8:	4613      	mov	r3, r2
 8000bda:	71bb      	strb	r3, [r7, #6]
    uint8_t buf[2];
    HAL_GPIO_WritePin(SX1272_NSS_PORT, SX1272_NSS_PIN, GPIO_PIN_RESET);
 8000bdc:	2200      	movs	r2, #0
 8000bde:	2110      	movs	r1, #16
 8000be0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000be4:	f000 ffaa 	bl	8001b3c <HAL_GPIO_WritePin>
    buf[0] = addr | 0x80;
 8000be8:	79fb      	ldrb	r3, [r7, #7]
 8000bea:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000bee:	b2db      	uxtb	r3, r3
 8000bf0:	733b      	strb	r3, [r7, #12]
    buf[1] = data;
 8000bf2:	79bb      	ldrb	r3, [r7, #6]
 8000bf4:	737b      	strb	r3, [r7, #13]
    HAL_SPI_Transmit(hspi, buf, 2, HAL_MAX_DELAY);
 8000bf6:	4b09      	ldr	r3, [pc, #36]	@ (8000c1c <SX1272_Write+0x50>)
 8000bf8:	6818      	ldr	r0, [r3, #0]
 8000bfa:	f107 010c 	add.w	r1, r7, #12
 8000bfe:	f04f 33ff 	mov.w	r3, #4294967295
 8000c02:	2202      	movs	r2, #2
 8000c04:	f001 fe1f 	bl	8002846 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(SX1272_NSS_PORT, SX1272_NSS_PIN, GPIO_PIN_SET);
 8000c08:	2201      	movs	r2, #1
 8000c0a:	2110      	movs	r1, #16
 8000c0c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c10:	f000 ff94 	bl	8001b3c <HAL_GPIO_WritePin>
}
 8000c14:	bf00      	nop
 8000c16:	3710      	adds	r7, #16
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bd80      	pop	{r7, pc}
 8000c1c:	20000304 	.word	0x20000304

08000c20 <SX1272_Read>:

uint8_t SX1272_Read(uint8_t addr)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b084      	sub	sp, #16
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	4603      	mov	r3, r0
 8000c28:	71fb      	strb	r3, [r7, #7]
    uint8_t data;
    HAL_GPIO_WritePin(SX1272_NSS_PORT, SX1272_NSS_PIN, GPIO_PIN_RESET);
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	2110      	movs	r1, #16
 8000c2e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c32:	f000 ff83 	bl	8001b3c <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(hspi, &addr, 1, HAL_MAX_DELAY);
 8000c36:	4b0e      	ldr	r3, [pc, #56]	@ (8000c70 <SX1272_Read+0x50>)
 8000c38:	6818      	ldr	r0, [r3, #0]
 8000c3a:	1df9      	adds	r1, r7, #7
 8000c3c:	f04f 33ff 	mov.w	r3, #4294967295
 8000c40:	2201      	movs	r2, #1
 8000c42:	f001 fe00 	bl	8002846 <HAL_SPI_Transmit>
    HAL_SPI_Receive(hspi, &data, 1, HAL_MAX_DELAY);
 8000c46:	4b0a      	ldr	r3, [pc, #40]	@ (8000c70 <SX1272_Read+0x50>)
 8000c48:	6818      	ldr	r0, [r3, #0]
 8000c4a:	f107 010f 	add.w	r1, r7, #15
 8000c4e:	f04f 33ff 	mov.w	r3, #4294967295
 8000c52:	2201      	movs	r2, #1
 8000c54:	f001 ff6d 	bl	8002b32 <HAL_SPI_Receive>
    HAL_GPIO_WritePin(SX1272_NSS_PORT, SX1272_NSS_PIN, GPIO_PIN_SET);
 8000c58:	2201      	movs	r2, #1
 8000c5a:	2110      	movs	r1, #16
 8000c5c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c60:	f000 ff6c 	bl	8001b3c <HAL_GPIO_WritePin>
    return data;
 8000c64:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c66:	4618      	mov	r0, r3
 8000c68:	3710      	adds	r7, #16
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	20000304 	.word	0x20000304

08000c74 <SX1272_WriteBuffer>:

void SX1272_WriteBuffer(uint8_t addr, uint8_t *buffer, uint8_t size)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b082      	sub	sp, #8
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	6039      	str	r1, [r7, #0]
 8000c7e:	71fb      	strb	r3, [r7, #7]
 8000c80:	4613      	mov	r3, r2
 8000c82:	71bb      	strb	r3, [r7, #6]
    HAL_GPIO_WritePin(SX1272_NSS_PORT, SX1272_NSS_PIN, GPIO_PIN_RESET);
 8000c84:	2200      	movs	r2, #0
 8000c86:	2110      	movs	r1, #16
 8000c88:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c8c:	f000 ff56 	bl	8001b3c <HAL_GPIO_WritePin>
    addr |= 0x80;
 8000c90:	79fb      	ldrb	r3, [r7, #7]
 8000c92:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000c96:	b2db      	uxtb	r3, r3
 8000c98:	71fb      	strb	r3, [r7, #7]
    HAL_SPI_Transmit(hspi, &addr, 1, HAL_MAX_DELAY);
 8000c9a:	4b0d      	ldr	r3, [pc, #52]	@ (8000cd0 <SX1272_WriteBuffer+0x5c>)
 8000c9c:	6818      	ldr	r0, [r3, #0]
 8000c9e:	1df9      	adds	r1, r7, #7
 8000ca0:	f04f 33ff 	mov.w	r3, #4294967295
 8000ca4:	2201      	movs	r2, #1
 8000ca6:	f001 fdce 	bl	8002846 <HAL_SPI_Transmit>
    HAL_SPI_Transmit(hspi, buffer, size, HAL_MAX_DELAY);
 8000caa:	4b09      	ldr	r3, [pc, #36]	@ (8000cd0 <SX1272_WriteBuffer+0x5c>)
 8000cac:	6818      	ldr	r0, [r3, #0]
 8000cae:	79bb      	ldrb	r3, [r7, #6]
 8000cb0:	b29a      	uxth	r2, r3
 8000cb2:	f04f 33ff 	mov.w	r3, #4294967295
 8000cb6:	6839      	ldr	r1, [r7, #0]
 8000cb8:	f001 fdc5 	bl	8002846 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(SX1272_NSS_PORT, SX1272_NSS_PIN, GPIO_PIN_SET);
 8000cbc:	2201      	movs	r2, #1
 8000cbe:	2110      	movs	r1, #16
 8000cc0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000cc4:	f000 ff3a 	bl	8001b3c <HAL_GPIO_WritePin>
}
 8000cc8:	bf00      	nop
 8000cca:	3708      	adds	r7, #8
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bd80      	pop	{r7, pc}
 8000cd0:	20000304 	.word	0x20000304

08000cd4 <SX1272_ReadBuffer>:

void SX1272_ReadBuffer(uint8_t addr, uint8_t *buffer, uint8_t size)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b082      	sub	sp, #8
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	4603      	mov	r3, r0
 8000cdc:	6039      	str	r1, [r7, #0]
 8000cde:	71fb      	strb	r3, [r7, #7]
 8000ce0:	4613      	mov	r3, r2
 8000ce2:	71bb      	strb	r3, [r7, #6]
    HAL_GPIO_WritePin(SX1272_NSS_PORT, SX1272_NSS_PIN, GPIO_PIN_RESET);
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	2110      	movs	r1, #16
 8000ce8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000cec:	f000 ff26 	bl	8001b3c <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(hspi, &addr, 1, HAL_MAX_DELAY);
 8000cf0:	4b0d      	ldr	r3, [pc, #52]	@ (8000d28 <SX1272_ReadBuffer+0x54>)
 8000cf2:	6818      	ldr	r0, [r3, #0]
 8000cf4:	1df9      	adds	r1, r7, #7
 8000cf6:	f04f 33ff 	mov.w	r3, #4294967295
 8000cfa:	2201      	movs	r2, #1
 8000cfc:	f001 fda3 	bl	8002846 <HAL_SPI_Transmit>
    HAL_SPI_Receive(hspi, buffer, size, HAL_MAX_DELAY);
 8000d00:	4b09      	ldr	r3, [pc, #36]	@ (8000d28 <SX1272_ReadBuffer+0x54>)
 8000d02:	6818      	ldr	r0, [r3, #0]
 8000d04:	79bb      	ldrb	r3, [r7, #6]
 8000d06:	b29a      	uxth	r2, r3
 8000d08:	f04f 33ff 	mov.w	r3, #4294967295
 8000d0c:	6839      	ldr	r1, [r7, #0]
 8000d0e:	f001 ff10 	bl	8002b32 <HAL_SPI_Receive>
    HAL_GPIO_WritePin(SX1272_NSS_PORT, SX1272_NSS_PIN, GPIO_PIN_SET);
 8000d12:	2201      	movs	r2, #1
 8000d14:	2110      	movs	r1, #16
 8000d16:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d1a:	f000 ff0f 	bl	8001b3c <HAL_GPIO_WritePin>
}
 8000d1e:	bf00      	nop
 8000d20:	3708      	adds	r7, #8
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	20000304 	.word	0x20000304

08000d2c <SX1272_SetOpMode>:

static void SX1272_SetOpMode(uint8_t mode)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b082      	sub	sp, #8
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	4603      	mov	r3, r0
 8000d34:	71fb      	strb	r3, [r7, #7]
    SX1272_Write(REG_OP_MODE, mode);
 8000d36:	79fb      	ldrb	r3, [r7, #7]
 8000d38:	4619      	mov	r1, r3
 8000d3a:	2001      	movs	r0, #1
 8000d3c:	f7ff ff46 	bl	8000bcc <SX1272_Write>
}
 8000d40:	bf00      	nop
 8000d42:	3708      	adds	r7, #8
 8000d44:	46bd      	mov	sp, r7
 8000d46:	bd80      	pop	{r7, pc}

08000d48 <SX1272_SetFrequency>:

void SX1272_SetFrequency(uint32_t freq)
{
 8000d48:	b5b0      	push	{r4, r5, r7, lr}
 8000d4a:	b084      	sub	sp, #16
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
    uint64_t frf = ((uint64_t)freq << 19) / 32000000;
 8000d50:	6879      	ldr	r1, [r7, #4]
 8000d52:	2000      	movs	r0, #0
 8000d54:	460a      	mov	r2, r1
 8000d56:	4603      	mov	r3, r0
 8000d58:	0b55      	lsrs	r5, r2, #13
 8000d5a:	04d4      	lsls	r4, r2, #19
 8000d5c:	4a18      	ldr	r2, [pc, #96]	@ (8000dc0 <SX1272_SetFrequency+0x78>)
 8000d5e:	f04f 0300 	mov.w	r3, #0
 8000d62:	4620      	mov	r0, r4
 8000d64:	4629      	mov	r1, r5
 8000d66:	f7ff fab3 	bl	80002d0 <__aeabi_uldivmod>
 8000d6a:	4602      	mov	r2, r0
 8000d6c:	460b      	mov	r3, r1
 8000d6e:	e9c7 2302 	strd	r2, r3, [r7, #8]
    SX1272_Write(REG_FRF_MSB, (frf >> 16) & 0xFF);
 8000d72:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000d76:	f04f 0200 	mov.w	r2, #0
 8000d7a:	f04f 0300 	mov.w	r3, #0
 8000d7e:	0c02      	lsrs	r2, r0, #16
 8000d80:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000d84:	0c0b      	lsrs	r3, r1, #16
 8000d86:	b2d3      	uxtb	r3, r2
 8000d88:	4619      	mov	r1, r3
 8000d8a:	2006      	movs	r0, #6
 8000d8c:	f7ff ff1e 	bl	8000bcc <SX1272_Write>
    SX1272_Write(REG_FRF_MID, (frf >> 8) & 0xFF);
 8000d90:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000d94:	f04f 0200 	mov.w	r2, #0
 8000d98:	f04f 0300 	mov.w	r3, #0
 8000d9c:	0a02      	lsrs	r2, r0, #8
 8000d9e:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8000da2:	0a0b      	lsrs	r3, r1, #8
 8000da4:	b2d3      	uxtb	r3, r2
 8000da6:	4619      	mov	r1, r3
 8000da8:	2007      	movs	r0, #7
 8000daa:	f7ff ff0f 	bl	8000bcc <SX1272_Write>
    SX1272_Write(REG_FRF_LSB, frf & 0xFF);
 8000dae:	7a3b      	ldrb	r3, [r7, #8]
 8000db0:	4619      	mov	r1, r3
 8000db2:	2008      	movs	r0, #8
 8000db4:	f7ff ff0a 	bl	8000bcc <SX1272_Write>
}
 8000db8:	bf00      	nop
 8000dba:	3710      	adds	r7, #16
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bdb0      	pop	{r4, r5, r7, pc}
 8000dc0:	01e84800 	.word	0x01e84800

08000dc4 <SX1272_SetTxPower>:

void SX1272_SetTxPower(int8_t level)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b082      	sub	sp, #8
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	4603      	mov	r3, r0
 8000dcc:	71fb      	strb	r3, [r7, #7]
    if(level > 17) {
 8000dce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dd2:	2b11      	cmp	r3, #17
 8000dd4:	dd02      	ble.n	8000ddc <SX1272_SetTxPower+0x18>
        level = 17;
 8000dd6:	2311      	movs	r3, #17
 8000dd8:	71fb      	strb	r3, [r7, #7]
 8000dda:	e005      	b.n	8000de8 <SX1272_SetTxPower+0x24>
    } else if(level < 2) {
 8000ddc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000de0:	2b01      	cmp	r3, #1
 8000de2:	dc01      	bgt.n	8000de8 <SX1272_SetTxPower+0x24>
        level = 2;
 8000de4:	2302      	movs	r3, #2
 8000de6:	71fb      	strb	r3, [r7, #7]
    }

    SX1272_Write(REG_PA_CONFIG, PA_BOOST | (level - 2));
 8000de8:	79fb      	ldrb	r3, [r7, #7]
 8000dea:	3b02      	subs	r3, #2
 8000dec:	b2db      	uxtb	r3, r3
 8000dee:	b25b      	sxtb	r3, r3
 8000df0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000df4:	b25b      	sxtb	r3, r3
 8000df6:	b2db      	uxtb	r3, r3
 8000df8:	4619      	mov	r1, r3
 8000dfa:	2009      	movs	r0, #9
 8000dfc:	f7ff fee6 	bl	8000bcc <SX1272_Write>
}
 8000e00:	bf00      	nop
 8000e02:	3708      	adds	r7, #8
 8000e04:	46bd      	mov	sp, r7
 8000e06:	bd80      	pop	{r7, pc}

08000e08 <SX1272_SetSpreadingFactor>:

void SX1272_SetSpreadingFactor(uint8_t sf)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b084      	sub	sp, #16
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	4603      	mov	r3, r0
 8000e10:	71fb      	strb	r3, [r7, #7]
    if(sf < 6) {
 8000e12:	79fb      	ldrb	r3, [r7, #7]
 8000e14:	2b05      	cmp	r3, #5
 8000e16:	d802      	bhi.n	8000e1e <SX1272_SetSpreadingFactor+0x16>
        sf = 6;
 8000e18:	2306      	movs	r3, #6
 8000e1a:	71fb      	strb	r3, [r7, #7]
 8000e1c:	e004      	b.n	8000e28 <SX1272_SetSpreadingFactor+0x20>
    } else if(sf > 12) {
 8000e1e:	79fb      	ldrb	r3, [r7, #7]
 8000e20:	2b0c      	cmp	r3, #12
 8000e22:	d901      	bls.n	8000e28 <SX1272_SetSpreadingFactor+0x20>
        sf = 12;
 8000e24:	230c      	movs	r3, #12
 8000e26:	71fb      	strb	r3, [r7, #7]
    }

    if(sf == 6) {
 8000e28:	79fb      	ldrb	r3, [r7, #7]
 8000e2a:	2b06      	cmp	r3, #6
 8000e2c:	d108      	bne.n	8000e40 <SX1272_SetSpreadingFactor+0x38>
        SX1272_Write(REG_DETECTION_OPTIMIZE, 0xC5);
 8000e2e:	21c5      	movs	r1, #197	@ 0xc5
 8000e30:	2031      	movs	r0, #49	@ 0x31
 8000e32:	f7ff fecb 	bl	8000bcc <SX1272_Write>
        SX1272_Write(REG_DETECTION_THRESHOLD, 0x0C);
 8000e36:	210c      	movs	r1, #12
 8000e38:	2037      	movs	r0, #55	@ 0x37
 8000e3a:	f7ff fec7 	bl	8000bcc <SX1272_Write>
 8000e3e:	e007      	b.n	8000e50 <SX1272_SetSpreadingFactor+0x48>
    } else {
        SX1272_Write(REG_DETECTION_OPTIMIZE, 0xC3);
 8000e40:	21c3      	movs	r1, #195	@ 0xc3
 8000e42:	2031      	movs	r0, #49	@ 0x31
 8000e44:	f7ff fec2 	bl	8000bcc <SX1272_Write>
        SX1272_Write(REG_DETECTION_THRESHOLD, 0x0A);
 8000e48:	210a      	movs	r1, #10
 8000e4a:	2037      	movs	r0, #55	@ 0x37
 8000e4c:	f7ff febe 	bl	8000bcc <SX1272_Write>
    }

    uint8_t config2 = SX1272_Read(REG_MODEM_CONFIG2);
 8000e50:	201e      	movs	r0, #30
 8000e52:	f7ff fee5 	bl	8000c20 <SX1272_Read>
 8000e56:	4603      	mov	r3, r0
 8000e58:	73fb      	strb	r3, [r7, #15]
    config2 = (config2 & 0x0F) | ((sf << 4) & 0xF0);
 8000e5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e5e:	f003 030f 	and.w	r3, r3, #15
 8000e62:	b25a      	sxtb	r2, r3
 8000e64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e68:	011b      	lsls	r3, r3, #4
 8000e6a:	b25b      	sxtb	r3, r3
 8000e6c:	4313      	orrs	r3, r2
 8000e6e:	b25b      	sxtb	r3, r3
 8000e70:	73fb      	strb	r3, [r7, #15]
    SX1272_Write(REG_MODEM_CONFIG2, config2);
 8000e72:	7bfb      	ldrb	r3, [r7, #15]
 8000e74:	4619      	mov	r1, r3
 8000e76:	201e      	movs	r0, #30
 8000e78:	f7ff fea8 	bl	8000bcc <SX1272_Write>
}
 8000e7c:	bf00      	nop
 8000e7e:	3710      	adds	r7, #16
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}

08000e84 <SX1272_SetBandwidth>:

void SX1272_SetBandwidth(uint32_t bw)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b084      	sub	sp, #16
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
    uint8_t bw_val;

    if(bw <= 7800) {
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	f641 6278 	movw	r2, #7800	@ 0x1e78
 8000e92:	4293      	cmp	r3, r2
 8000e94:	d802      	bhi.n	8000e9c <SX1272_SetBandwidth+0x18>
        bw_val = 0;
 8000e96:	2300      	movs	r3, #0
 8000e98:	73fb      	strb	r3, [r7, #15]
 8000e9a:	e03f      	b.n	8000f1c <SX1272_SetBandwidth+0x98>
    } else if(bw <= 10400) {
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	f642 02a0 	movw	r2, #10400	@ 0x28a0
 8000ea2:	4293      	cmp	r3, r2
 8000ea4:	d802      	bhi.n	8000eac <SX1272_SetBandwidth+0x28>
        bw_val = 1;
 8000ea6:	2301      	movs	r3, #1
 8000ea8:	73fb      	strb	r3, [r7, #15]
 8000eaa:	e037      	b.n	8000f1c <SX1272_SetBandwidth+0x98>
    } else if(bw <= 15600) {
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	f643 42f0 	movw	r2, #15600	@ 0x3cf0
 8000eb2:	4293      	cmp	r3, r2
 8000eb4:	d802      	bhi.n	8000ebc <SX1272_SetBandwidth+0x38>
        bw_val = 2;
 8000eb6:	2302      	movs	r3, #2
 8000eb8:	73fb      	strb	r3, [r7, #15]
 8000eba:	e02f      	b.n	8000f1c <SX1272_SetBandwidth+0x98>
    } else if(bw <= 20800) {
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	f245 1240 	movw	r2, #20800	@ 0x5140
 8000ec2:	4293      	cmp	r3, r2
 8000ec4:	d802      	bhi.n	8000ecc <SX1272_SetBandwidth+0x48>
        bw_val = 3;
 8000ec6:	2303      	movs	r3, #3
 8000ec8:	73fb      	strb	r3, [r7, #15]
 8000eca:	e027      	b.n	8000f1c <SX1272_SetBandwidth+0x98>
    } else if(bw <= 31250) {
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	f647 2212 	movw	r2, #31250	@ 0x7a12
 8000ed2:	4293      	cmp	r3, r2
 8000ed4:	d802      	bhi.n	8000edc <SX1272_SetBandwidth+0x58>
        bw_val = 4;
 8000ed6:	2304      	movs	r3, #4
 8000ed8:	73fb      	strb	r3, [r7, #15]
 8000eda:	e01f      	b.n	8000f1c <SX1272_SetBandwidth+0x98>
    } else if(bw <= 41700) {
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	f24a 22e4 	movw	r2, #41700	@ 0xa2e4
 8000ee2:	4293      	cmp	r3, r2
 8000ee4:	d802      	bhi.n	8000eec <SX1272_SetBandwidth+0x68>
        bw_val = 5;
 8000ee6:	2305      	movs	r3, #5
 8000ee8:	73fb      	strb	r3, [r7, #15]
 8000eea:	e017      	b.n	8000f1c <SX1272_SetBandwidth+0x98>
    } else if(bw <= 62500) {
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	f24f 4224 	movw	r2, #62500	@ 0xf424
 8000ef2:	4293      	cmp	r3, r2
 8000ef4:	d802      	bhi.n	8000efc <SX1272_SetBandwidth+0x78>
        bw_val = 6;
 8000ef6:	2306      	movs	r3, #6
 8000ef8:	73fb      	strb	r3, [r7, #15]
 8000efa:	e00f      	b.n	8000f1c <SX1272_SetBandwidth+0x98>
    } else if(bw <= 125000) {
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	4a14      	ldr	r2, [pc, #80]	@ (8000f50 <SX1272_SetBandwidth+0xcc>)
 8000f00:	4293      	cmp	r3, r2
 8000f02:	d802      	bhi.n	8000f0a <SX1272_SetBandwidth+0x86>
        bw_val = 7;
 8000f04:	2307      	movs	r3, #7
 8000f06:	73fb      	strb	r3, [r7, #15]
 8000f08:	e008      	b.n	8000f1c <SX1272_SetBandwidth+0x98>
    } else if(bw <= 250000) {
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	4a11      	ldr	r2, [pc, #68]	@ (8000f54 <SX1272_SetBandwidth+0xd0>)
 8000f0e:	4293      	cmp	r3, r2
 8000f10:	d802      	bhi.n	8000f18 <SX1272_SetBandwidth+0x94>
        bw_val = 8;
 8000f12:	2308      	movs	r3, #8
 8000f14:	73fb      	strb	r3, [r7, #15]
 8000f16:	e001      	b.n	8000f1c <SX1272_SetBandwidth+0x98>
    } else {
        bw_val = 9;
 8000f18:	2309      	movs	r3, #9
 8000f1a:	73fb      	strb	r3, [r7, #15]
    }

    uint8_t config1 = SX1272_Read(REG_MODEM_CONFIG1);
 8000f1c:	201d      	movs	r0, #29
 8000f1e:	f7ff fe7f 	bl	8000c20 <SX1272_Read>
 8000f22:	4603      	mov	r3, r0
 8000f24:	73bb      	strb	r3, [r7, #14]
    config1 = (config1 & 0x0F) | (bw_val << 4);
 8000f26:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000f2a:	f003 030f 	and.w	r3, r3, #15
 8000f2e:	b25a      	sxtb	r2, r3
 8000f30:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f34:	011b      	lsls	r3, r3, #4
 8000f36:	b25b      	sxtb	r3, r3
 8000f38:	4313      	orrs	r3, r2
 8000f3a:	b25b      	sxtb	r3, r3
 8000f3c:	73bb      	strb	r3, [r7, #14]
    SX1272_Write(REG_MODEM_CONFIG1, config1);
 8000f3e:	7bbb      	ldrb	r3, [r7, #14]
 8000f40:	4619      	mov	r1, r3
 8000f42:	201d      	movs	r0, #29
 8000f44:	f7ff fe42 	bl	8000bcc <SX1272_Write>
}
 8000f48:	bf00      	nop
 8000f4a:	3710      	adds	r7, #16
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bd80      	pop	{r7, pc}
 8000f50:	0001e848 	.word	0x0001e848
 8000f54:	0003d090 	.word	0x0003d090

08000f58 <SX1272_SetCodingRate4>:

void SX1272_SetCodingRate4(uint8_t denominator)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b084      	sub	sp, #16
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	4603      	mov	r3, r0
 8000f60:	71fb      	strb	r3, [r7, #7]
    if(denominator < 5) {
 8000f62:	79fb      	ldrb	r3, [r7, #7]
 8000f64:	2b04      	cmp	r3, #4
 8000f66:	d802      	bhi.n	8000f6e <SX1272_SetCodingRate4+0x16>
        denominator = 5;
 8000f68:	2305      	movs	r3, #5
 8000f6a:	71fb      	strb	r3, [r7, #7]
 8000f6c:	e004      	b.n	8000f78 <SX1272_SetCodingRate4+0x20>
    } else if(denominator > 8) {
 8000f6e:	79fb      	ldrb	r3, [r7, #7]
 8000f70:	2b08      	cmp	r3, #8
 8000f72:	d901      	bls.n	8000f78 <SX1272_SetCodingRate4+0x20>
        denominator = 8;
 8000f74:	2308      	movs	r3, #8
 8000f76:	71fb      	strb	r3, [r7, #7]
    }

    uint8_t cr = denominator - 4;
 8000f78:	79fb      	ldrb	r3, [r7, #7]
 8000f7a:	3b04      	subs	r3, #4
 8000f7c:	73fb      	strb	r3, [r7, #15]
    uint8_t config1 = SX1272_Read(REG_MODEM_CONFIG1);
 8000f7e:	201d      	movs	r0, #29
 8000f80:	f7ff fe4e 	bl	8000c20 <SX1272_Read>
 8000f84:	4603      	mov	r3, r0
 8000f86:	73bb      	strb	r3, [r7, #14]
    config1 = (config1 & 0xF1) | (cr << 1);
 8000f88:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000f8c:	f023 030e 	bic.w	r3, r3, #14
 8000f90:	b25a      	sxtb	r2, r3
 8000f92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f96:	005b      	lsls	r3, r3, #1
 8000f98:	b25b      	sxtb	r3, r3
 8000f9a:	4313      	orrs	r3, r2
 8000f9c:	b25b      	sxtb	r3, r3
 8000f9e:	73bb      	strb	r3, [r7, #14]
    SX1272_Write(REG_MODEM_CONFIG1, config1);
 8000fa0:	7bbb      	ldrb	r3, [r7, #14]
 8000fa2:	4619      	mov	r1, r3
 8000fa4:	201d      	movs	r0, #29
 8000fa6:	f7ff fe11 	bl	8000bcc <SX1272_Write>
}
 8000faa:	bf00      	nop
 8000fac:	3710      	adds	r7, #16
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}

08000fb2 <SX1272_SetSyncWord>:

void SX1272_SetSyncWord(uint8_t sw)
{
 8000fb2:	b580      	push	{r7, lr}
 8000fb4:	b082      	sub	sp, #8
 8000fb6:	af00      	add	r7, sp, #0
 8000fb8:	4603      	mov	r3, r0
 8000fba:	71fb      	strb	r3, [r7, #7]
    SX1272_Write(REG_SYNC_WORD, sw);
 8000fbc:	79fb      	ldrb	r3, [r7, #7]
 8000fbe:	4619      	mov	r1, r3
 8000fc0:	2039      	movs	r0, #57	@ 0x39
 8000fc2:	f7ff fe03 	bl	8000bcc <SX1272_Write>
}
 8000fc6:	bf00      	nop
 8000fc8:	3708      	adds	r7, #8
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}

08000fce <SX1272_SetPreambleLength>:

void SX1272_SetPreambleLength(uint16_t length)
{
 8000fce:	b580      	push	{r7, lr}
 8000fd0:	b082      	sub	sp, #8
 8000fd2:	af00      	add	r7, sp, #0
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	80fb      	strh	r3, [r7, #6]
    SX1272_Write(REG_PREAMBLE_MSB, (length >> 8) & 0xFF);
 8000fd8:	88fb      	ldrh	r3, [r7, #6]
 8000fda:	0a1b      	lsrs	r3, r3, #8
 8000fdc:	b29b      	uxth	r3, r3
 8000fde:	b2db      	uxtb	r3, r3
 8000fe0:	4619      	mov	r1, r3
 8000fe2:	2020      	movs	r0, #32
 8000fe4:	f7ff fdf2 	bl	8000bcc <SX1272_Write>
    SX1272_Write(REG_PREAMBLE_LSB, length & 0xFF);
 8000fe8:	88fb      	ldrh	r3, [r7, #6]
 8000fea:	b2db      	uxtb	r3, r3
 8000fec:	4619      	mov	r1, r3
 8000fee:	2021      	movs	r0, #33	@ 0x21
 8000ff0:	f7ff fdec 	bl	8000bcc <SX1272_Write>
}
 8000ff4:	bf00      	nop
 8000ff6:	3708      	adds	r7, #8
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd80      	pop	{r7, pc}

08000ffc <SX1272_EnableCRC>:

void SX1272_EnableCRC(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b082      	sub	sp, #8
 8001000:	af00      	add	r7, sp, #0
    uint8_t config2 = SX1272_Read(REG_MODEM_CONFIG2);
 8001002:	201e      	movs	r0, #30
 8001004:	f7ff fe0c 	bl	8000c20 <SX1272_Read>
 8001008:	4603      	mov	r3, r0
 800100a:	71fb      	strb	r3, [r7, #7]
    config2 |= 0x04;
 800100c:	79fb      	ldrb	r3, [r7, #7]
 800100e:	f043 0304 	orr.w	r3, r3, #4
 8001012:	71fb      	strb	r3, [r7, #7]
    SX1272_Write(REG_MODEM_CONFIG2, config2);
 8001014:	79fb      	ldrb	r3, [r7, #7]
 8001016:	4619      	mov	r1, r3
 8001018:	201e      	movs	r0, #30
 800101a:	f7ff fdd7 	bl	8000bcc <SX1272_Write>
}
 800101e:	bf00      	nop
 8001020:	3708      	adds	r7, #8
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}

08001026 <SX1272_SetLnaBoost>:

void SX1272_SetLnaBoost(uint8_t boost)
{
 8001026:	b580      	push	{r7, lr}
 8001028:	b082      	sub	sp, #8
 800102a:	af00      	add	r7, sp, #0
 800102c:	4603      	mov	r3, r0
 800102e:	71fb      	strb	r3, [r7, #7]
    if(boost) {
 8001030:	79fb      	ldrb	r3, [r7, #7]
 8001032:	2b00      	cmp	r3, #0
 8001034:	d00b      	beq.n	800104e <SX1272_SetLnaBoost+0x28>
        SX1272_Write(REG_LNA, SX1272_Read(REG_LNA) | 0x03);
 8001036:	200c      	movs	r0, #12
 8001038:	f7ff fdf2 	bl	8000c20 <SX1272_Read>
 800103c:	4603      	mov	r3, r0
 800103e:	f043 0303 	orr.w	r3, r3, #3
 8001042:	b2db      	uxtb	r3, r3
 8001044:	4619      	mov	r1, r3
 8001046:	200c      	movs	r0, #12
 8001048:	f7ff fdc0 	bl	8000bcc <SX1272_Write>
    } else {
        SX1272_Write(REG_LNA, SX1272_Read(REG_LNA) & ~0x03);
    }
}
 800104c:	e00a      	b.n	8001064 <SX1272_SetLnaBoost+0x3e>
        SX1272_Write(REG_LNA, SX1272_Read(REG_LNA) & ~0x03);
 800104e:	200c      	movs	r0, #12
 8001050:	f7ff fde6 	bl	8000c20 <SX1272_Read>
 8001054:	4603      	mov	r3, r0
 8001056:	f023 0303 	bic.w	r3, r3, #3
 800105a:	b2db      	uxtb	r3, r3
 800105c:	4619      	mov	r1, r3
 800105e:	200c      	movs	r0, #12
 8001060:	f7ff fdb4 	bl	8000bcc <SX1272_Write>
}
 8001064:	bf00      	nop
 8001066:	3708      	adds	r7, #8
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}

0800106c <SX1272_SendPacket>:
{
    return ((int8_t)SX1272_Read(REG_PKT_SNR_VALUE)) * 0.25;
}

void SX1272_SendPacket(uint8_t *buffer, uint8_t size)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b082      	sub	sp, #8
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
 8001074:	460b      	mov	r3, r1
 8001076:	70fb      	strb	r3, [r7, #3]
    // Set standby mode
    SX1272_SetOpMode(MODE_LONG_RANGE_MODE | MODE_STDBY);
 8001078:	2081      	movs	r0, #129	@ 0x81
 800107a:	f7ff fe57 	bl	8000d2c <SX1272_SetOpMode>

    // Set FIFO address pointer
    SX1272_Write(REG_FIFO_ADDR_PTR, 0);
 800107e:	2100      	movs	r1, #0
 8001080:	200d      	movs	r0, #13
 8001082:	f7ff fda3 	bl	8000bcc <SX1272_Write>

    // Write payload to FIFO
    SX1272_WriteBuffer(REG_FIFO, buffer, size);
 8001086:	78fb      	ldrb	r3, [r7, #3]
 8001088:	461a      	mov	r2, r3
 800108a:	6879      	ldr	r1, [r7, #4]
 800108c:	2000      	movs	r0, #0
 800108e:	f7ff fdf1 	bl	8000c74 <SX1272_WriteBuffer>

    // Set payload length
    SX1272_Write(REG_PAYLOAD_LENGTH, size);
 8001092:	78fb      	ldrb	r3, [r7, #3]
 8001094:	4619      	mov	r1, r3
 8001096:	2022      	movs	r0, #34	@ 0x22
 8001098:	f7ff fd98 	bl	8000bcc <SX1272_Write>

    // Set TX mode
    SX1272_SetOpMode(MODE_LONG_RANGE_MODE | MODE_TX);
 800109c:	2083      	movs	r0, #131	@ 0x83
 800109e:	f7ff fe45 	bl	8000d2c <SX1272_SetOpMode>

    // Wait for TX done (interrupt will be triggered)
}
 80010a2:	bf00      	nop
 80010a4:	3708      	adds	r7, #8
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}

080010aa <SX1272_ReceivePacket>:

uint8_t SX1272_ReceivePacket(uint8_t *buffer, uint8_t size)
{
 80010aa:	b580      	push	{r7, lr}
 80010ac:	b084      	sub	sp, #16
 80010ae:	af00      	add	r7, sp, #0
 80010b0:	6078      	str	r0, [r7, #4]
 80010b2:	460b      	mov	r3, r1
 80010b4:	70fb      	strb	r3, [r7, #3]
    // Check if packet received
    uint8_t irqFlags = SX1272_Read(REG_IRQ_FLAGS);
 80010b6:	2012      	movs	r0, #18
 80010b8:	f7ff fdb2 	bl	8000c20 <SX1272_Read>
 80010bc:	4603      	mov	r3, r0
 80010be:	73bb      	strb	r3, [r7, #14]

    if((irqFlags & IRQ_RX_DONE_MASK) == 0) {
 80010c0:	7bbb      	ldrb	r3, [r7, #14]
 80010c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d101      	bne.n	80010ce <SX1272_ReceivePacket+0x24>
        return 0; // No packet received
 80010ca:	2300      	movs	r3, #0
 80010cc:	e027      	b.n	800111e <SX1272_ReceivePacket+0x74>
    }

    // Clear IRQ flags
    SX1272_Write(REG_IRQ_FLAGS, irqFlags);
 80010ce:	7bbb      	ldrb	r3, [r7, #14]
 80010d0:	4619      	mov	r1, r3
 80010d2:	2012      	movs	r0, #18
 80010d4:	f7ff fd7a 	bl	8000bcc <SX1272_Write>

    // Check for payload CRC error
    if(irqFlags & IRQ_PAYLOAD_CRC_ERROR_MASK) {
 80010d8:	7bbb      	ldrb	r3, [r7, #14]
 80010da:	f003 0320 	and.w	r3, r3, #32
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d001      	beq.n	80010e6 <SX1272_ReceivePacket+0x3c>
        return 0;
 80010e2:	2300      	movs	r3, #0
 80010e4:	e01b      	b.n	800111e <SX1272_ReceivePacket+0x74>
    }

    // Get received length
    uint8_t length = SX1272_Read(REG_RX_NB_BYTES);
 80010e6:	2013      	movs	r0, #19
 80010e8:	f7ff fd9a 	bl	8000c20 <SX1272_Read>
 80010ec:	4603      	mov	r3, r0
 80010ee:	73fb      	strb	r3, [r7, #15]
    if(length > size) {
 80010f0:	7bfa      	ldrb	r2, [r7, #15]
 80010f2:	78fb      	ldrb	r3, [r7, #3]
 80010f4:	429a      	cmp	r2, r3
 80010f6:	d901      	bls.n	80010fc <SX1272_ReceivePacket+0x52>
        length = size;
 80010f8:	78fb      	ldrb	r3, [r7, #3]
 80010fa:	73fb      	strb	r3, [r7, #15]
    }

    // Get FIFO address
    uint8_t currentAddr = SX1272_Read(REG_FIFO_RX_CURRENT_ADDR);
 80010fc:	2010      	movs	r0, #16
 80010fe:	f7ff fd8f 	bl	8000c20 <SX1272_Read>
 8001102:	4603      	mov	r3, r0
 8001104:	737b      	strb	r3, [r7, #13]
    SX1272_Write(REG_FIFO_ADDR_PTR, currentAddr);
 8001106:	7b7b      	ldrb	r3, [r7, #13]
 8001108:	4619      	mov	r1, r3
 800110a:	200d      	movs	r0, #13
 800110c:	f7ff fd5e 	bl	8000bcc <SX1272_Write>

    // Read packet from FIFO
    SX1272_ReadBuffer(REG_FIFO, buffer, length);
 8001110:	7bfb      	ldrb	r3, [r7, #15]
 8001112:	461a      	mov	r2, r3
 8001114:	6879      	ldr	r1, [r7, #4]
 8001116:	2000      	movs	r0, #0
 8001118:	f7ff fddc 	bl	8000cd4 <SX1272_ReadBuffer>

    return length;
 800111c:	7bfb      	ldrb	r3, [r7, #15]
}
 800111e:	4618      	mov	r0, r3
 8001120:	3710      	adds	r7, #16
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}

08001126 <SX1272_StartReceiving>:

void SX1272_StartReceiving(void)
{
 8001126:	b580      	push	{r7, lr}
 8001128:	af00      	add	r7, sp, #0
    // Set FIFO address pointer
    SX1272_Write(REG_FIFO_ADDR_PTR, 0);
 800112a:	2100      	movs	r1, #0
 800112c:	200d      	movs	r0, #13
 800112e:	f7ff fd4d 	bl	8000bcc <SX1272_Write>

    // Set RX mode
    SX1272_SetOpMode(MODE_LONG_RANGE_MODE | MODE_RX_CONTINUOUS);
 8001132:	2085      	movs	r0, #133	@ 0x85
 8001134:	f7ff fdfa 	bl	8000d2c <SX1272_SetOpMode>
}
 8001138:	bf00      	nop
 800113a:	bd80      	pop	{r7, pc}

0800113c <SX1272_CheckReceived>:

uint8_t SX1272_CheckReceived(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	af00      	add	r7, sp, #0
    return (SX1272_Read(REG_IRQ_FLAGS) & IRQ_RX_DONE_MASK) ? 1 : 0;
 8001140:	2012      	movs	r0, #18
 8001142:	f7ff fd6d 	bl	8000c20 <SX1272_Read>
 8001146:	4603      	mov	r3, r0
 8001148:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800114c:	2b00      	cmp	r3, #0
 800114e:	bf14      	ite	ne
 8001150:	2301      	movne	r3, #1
 8001152:	2300      	moveq	r3, #0
 8001154:	b2db      	uxtb	r3, r3
}
 8001156:	4618      	mov	r0, r3
 8001158:	bd80      	pop	{r7, pc}
	...

0800115c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b086      	sub	sp, #24
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001164:	4a14      	ldr	r2, [pc, #80]	@ (80011b8 <_sbrk+0x5c>)
 8001166:	4b15      	ldr	r3, [pc, #84]	@ (80011bc <_sbrk+0x60>)
 8001168:	1ad3      	subs	r3, r2, r3
 800116a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800116c:	697b      	ldr	r3, [r7, #20]
 800116e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001170:	4b13      	ldr	r3, [pc, #76]	@ (80011c0 <_sbrk+0x64>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	2b00      	cmp	r3, #0
 8001176:	d102      	bne.n	800117e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001178:	4b11      	ldr	r3, [pc, #68]	@ (80011c0 <_sbrk+0x64>)
 800117a:	4a12      	ldr	r2, [pc, #72]	@ (80011c4 <_sbrk+0x68>)
 800117c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800117e:	4b10      	ldr	r3, [pc, #64]	@ (80011c0 <_sbrk+0x64>)
 8001180:	681a      	ldr	r2, [r3, #0]
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	4413      	add	r3, r2
 8001186:	693a      	ldr	r2, [r7, #16]
 8001188:	429a      	cmp	r2, r3
 800118a:	d207      	bcs.n	800119c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800118c:	f002 fb2e 	bl	80037ec <__errno>
 8001190:	4603      	mov	r3, r0
 8001192:	220c      	movs	r2, #12
 8001194:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001196:	f04f 33ff 	mov.w	r3, #4294967295
 800119a:	e009      	b.n	80011b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800119c:	4b08      	ldr	r3, [pc, #32]	@ (80011c0 <_sbrk+0x64>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011a2:	4b07      	ldr	r3, [pc, #28]	@ (80011c0 <_sbrk+0x64>)
 80011a4:	681a      	ldr	r2, [r3, #0]
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	4413      	add	r3, r2
 80011aa:	4a05      	ldr	r2, [pc, #20]	@ (80011c0 <_sbrk+0x64>)
 80011ac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80011ae:	68fb      	ldr	r3, [r7, #12]
}
 80011b0:	4618      	mov	r0, r3
 80011b2:	3718      	adds	r7, #24
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}
 80011b8:	20008000 	.word	0x20008000
 80011bc:	00000400 	.word	0x00000400
 80011c0:	20000308 	.word	0x20000308
 80011c4:	20000458 	.word	0x20000458

080011c8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80011c8:	b480      	push	{r7}
 80011ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80011cc:	4b06      	ldr	r3, [pc, #24]	@ (80011e8 <SystemInit+0x20>)
 80011ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80011d2:	4a05      	ldr	r2, [pc, #20]	@ (80011e8 <SystemInit+0x20>)
 80011d4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80011d8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011dc:	bf00      	nop
 80011de:	46bd      	mov	sp, r7
 80011e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e4:	4770      	bx	lr
 80011e6:	bf00      	nop
 80011e8:	e000ed00 	.word	0xe000ed00

080011ec <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80011ec:	480d      	ldr	r0, [pc, #52]	@ (8001224 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80011ee:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80011f0:	f7ff ffea 	bl	80011c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80011f4:	480c      	ldr	r0, [pc, #48]	@ (8001228 <LoopForever+0x6>)
  ldr r1, =_edata
 80011f6:	490d      	ldr	r1, [pc, #52]	@ (800122c <LoopForever+0xa>)
  ldr r2, =_sidata
 80011f8:	4a0d      	ldr	r2, [pc, #52]	@ (8001230 <LoopForever+0xe>)
  movs r3, #0
 80011fa:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80011fc:	e002      	b.n	8001204 <LoopCopyDataInit>

080011fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001200:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001202:	3304      	adds	r3, #4

08001204 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001204:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001206:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001208:	d3f9      	bcc.n	80011fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800120a:	4a0a      	ldr	r2, [pc, #40]	@ (8001234 <LoopForever+0x12>)
  ldr r4, =_ebss
 800120c:	4c0a      	ldr	r4, [pc, #40]	@ (8001238 <LoopForever+0x16>)
  movs r3, #0
 800120e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001210:	e001      	b.n	8001216 <LoopFillZerobss>

08001212 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001212:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001214:	3204      	adds	r2, #4

08001216 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001216:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001218:	d3fb      	bcc.n	8001212 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 800121a:	f002 faed 	bl	80037f8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800121e:	f7ff fa09 	bl	8000634 <main>

08001222 <LoopForever>:

LoopForever:
    b LoopForever
 8001222:	e7fe      	b.n	8001222 <LoopForever>
  ldr   r0, =_estack
 8001224:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001228:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800122c:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001230:	08004154 	.word	0x08004154
  ldr r2, =_sbss
 8001234:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001238:	20000458 	.word	0x20000458

0800123c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800123c:	e7fe      	b.n	800123c <ADC1_2_IRQHandler>

0800123e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800123e:	b580      	push	{r7, lr}
 8001240:	b082      	sub	sp, #8
 8001242:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001244:	2300      	movs	r3, #0
 8001246:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001248:	2003      	movs	r0, #3
 800124a:	f000 f95b 	bl	8001504 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800124e:	200f      	movs	r0, #15
 8001250:	f000 f80e 	bl	8001270 <HAL_InitTick>
 8001254:	4603      	mov	r3, r0
 8001256:	2b00      	cmp	r3, #0
 8001258:	d002      	beq.n	8001260 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800125a:	2301      	movs	r3, #1
 800125c:	71fb      	strb	r3, [r7, #7]
 800125e:	e001      	b.n	8001264 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001260:	f7ff fb4e 	bl	8000900 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001264:	79fb      	ldrb	r3, [r7, #7]

}
 8001266:	4618      	mov	r0, r3
 8001268:	3708      	adds	r7, #8
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}
	...

08001270 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b084      	sub	sp, #16
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001278:	2300      	movs	r3, #0
 800127a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800127c:	4b16      	ldr	r3, [pc, #88]	@ (80012d8 <HAL_InitTick+0x68>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	2b00      	cmp	r3, #0
 8001282:	d022      	beq.n	80012ca <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001284:	4b15      	ldr	r3, [pc, #84]	@ (80012dc <HAL_InitTick+0x6c>)
 8001286:	681a      	ldr	r2, [r3, #0]
 8001288:	4b13      	ldr	r3, [pc, #76]	@ (80012d8 <HAL_InitTick+0x68>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001290:	fbb1 f3f3 	udiv	r3, r1, r3
 8001294:	fbb2 f3f3 	udiv	r3, r2, r3
 8001298:	4618      	mov	r0, r3
 800129a:	f000 f966 	bl	800156a <HAL_SYSTICK_Config>
 800129e:	4603      	mov	r3, r0
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d10f      	bne.n	80012c4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	2b0f      	cmp	r3, #15
 80012a8:	d809      	bhi.n	80012be <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012aa:	2200      	movs	r2, #0
 80012ac:	6879      	ldr	r1, [r7, #4]
 80012ae:	f04f 30ff 	mov.w	r0, #4294967295
 80012b2:	f000 f932 	bl	800151a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80012b6:	4a0a      	ldr	r2, [pc, #40]	@ (80012e0 <HAL_InitTick+0x70>)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	6013      	str	r3, [r2, #0]
 80012bc:	e007      	b.n	80012ce <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80012be:	2301      	movs	r3, #1
 80012c0:	73fb      	strb	r3, [r7, #15]
 80012c2:	e004      	b.n	80012ce <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80012c4:	2301      	movs	r3, #1
 80012c6:	73fb      	strb	r3, [r7, #15]
 80012c8:	e001      	b.n	80012ce <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80012ca:	2301      	movs	r3, #1
 80012cc:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80012ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80012d0:	4618      	mov	r0, r3
 80012d2:	3710      	adds	r7, #16
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}
 80012d8:	20000008 	.word	0x20000008
 80012dc:	20000000 	.word	0x20000000
 80012e0:	20000004 	.word	0x20000004

080012e4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012e4:	b480      	push	{r7}
 80012e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012e8:	4b05      	ldr	r3, [pc, #20]	@ (8001300 <HAL_IncTick+0x1c>)
 80012ea:	681a      	ldr	r2, [r3, #0]
 80012ec:	4b05      	ldr	r3, [pc, #20]	@ (8001304 <HAL_IncTick+0x20>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	4413      	add	r3, r2
 80012f2:	4a03      	ldr	r2, [pc, #12]	@ (8001300 <HAL_IncTick+0x1c>)
 80012f4:	6013      	str	r3, [r2, #0]
}
 80012f6:	bf00      	nop
 80012f8:	46bd      	mov	sp, r7
 80012fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fe:	4770      	bx	lr
 8001300:	2000030c 	.word	0x2000030c
 8001304:	20000008 	.word	0x20000008

08001308 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001308:	b480      	push	{r7}
 800130a:	af00      	add	r7, sp, #0
  return uwTick;
 800130c:	4b03      	ldr	r3, [pc, #12]	@ (800131c <HAL_GetTick+0x14>)
 800130e:	681b      	ldr	r3, [r3, #0]
}
 8001310:	4618      	mov	r0, r3
 8001312:	46bd      	mov	sp, r7
 8001314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001318:	4770      	bx	lr
 800131a:	bf00      	nop
 800131c:	2000030c 	.word	0x2000030c

08001320 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b084      	sub	sp, #16
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001328:	f7ff ffee 	bl	8001308 <HAL_GetTick>
 800132c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001338:	d004      	beq.n	8001344 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800133a:	4b09      	ldr	r3, [pc, #36]	@ (8001360 <HAL_Delay+0x40>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	68fa      	ldr	r2, [r7, #12]
 8001340:	4413      	add	r3, r2
 8001342:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001344:	bf00      	nop
 8001346:	f7ff ffdf 	bl	8001308 <HAL_GetTick>
 800134a:	4602      	mov	r2, r0
 800134c:	68bb      	ldr	r3, [r7, #8]
 800134e:	1ad3      	subs	r3, r2, r3
 8001350:	68fa      	ldr	r2, [r7, #12]
 8001352:	429a      	cmp	r2, r3
 8001354:	d8f7      	bhi.n	8001346 <HAL_Delay+0x26>
  {
  }
}
 8001356:	bf00      	nop
 8001358:	bf00      	nop
 800135a:	3710      	adds	r7, #16
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}
 8001360:	20000008 	.word	0x20000008

08001364 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001364:	b480      	push	{r7}
 8001366:	b085      	sub	sp, #20
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	f003 0307 	and.w	r3, r3, #7
 8001372:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001374:	4b0c      	ldr	r3, [pc, #48]	@ (80013a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001376:	68db      	ldr	r3, [r3, #12]
 8001378:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800137a:	68ba      	ldr	r2, [r7, #8]
 800137c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001380:	4013      	ands	r3, r2
 8001382:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001388:	68bb      	ldr	r3, [r7, #8]
 800138a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800138c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001390:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001394:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001396:	4a04      	ldr	r2, [pc, #16]	@ (80013a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001398:	68bb      	ldr	r3, [r7, #8]
 800139a:	60d3      	str	r3, [r2, #12]
}
 800139c:	bf00      	nop
 800139e:	3714      	adds	r7, #20
 80013a0:	46bd      	mov	sp, r7
 80013a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a6:	4770      	bx	lr
 80013a8:	e000ed00 	.word	0xe000ed00

080013ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013ac:	b480      	push	{r7}
 80013ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013b0:	4b04      	ldr	r3, [pc, #16]	@ (80013c4 <__NVIC_GetPriorityGrouping+0x18>)
 80013b2:	68db      	ldr	r3, [r3, #12]
 80013b4:	0a1b      	lsrs	r3, r3, #8
 80013b6:	f003 0307 	and.w	r3, r3, #7
}
 80013ba:	4618      	mov	r0, r3
 80013bc:	46bd      	mov	sp, r7
 80013be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c2:	4770      	bx	lr
 80013c4:	e000ed00 	.word	0xe000ed00

080013c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013c8:	b480      	push	{r7}
 80013ca:	b083      	sub	sp, #12
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	4603      	mov	r3, r0
 80013d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	db0b      	blt.n	80013f2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013da:	79fb      	ldrb	r3, [r7, #7]
 80013dc:	f003 021f 	and.w	r2, r3, #31
 80013e0:	4907      	ldr	r1, [pc, #28]	@ (8001400 <__NVIC_EnableIRQ+0x38>)
 80013e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013e6:	095b      	lsrs	r3, r3, #5
 80013e8:	2001      	movs	r0, #1
 80013ea:	fa00 f202 	lsl.w	r2, r0, r2
 80013ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80013f2:	bf00      	nop
 80013f4:	370c      	adds	r7, #12
 80013f6:	46bd      	mov	sp, r7
 80013f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fc:	4770      	bx	lr
 80013fe:	bf00      	nop
 8001400:	e000e100 	.word	0xe000e100

08001404 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001404:	b480      	push	{r7}
 8001406:	b083      	sub	sp, #12
 8001408:	af00      	add	r7, sp, #0
 800140a:	4603      	mov	r3, r0
 800140c:	6039      	str	r1, [r7, #0]
 800140e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001410:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001414:	2b00      	cmp	r3, #0
 8001416:	db0a      	blt.n	800142e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	b2da      	uxtb	r2, r3
 800141c:	490c      	ldr	r1, [pc, #48]	@ (8001450 <__NVIC_SetPriority+0x4c>)
 800141e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001422:	0112      	lsls	r2, r2, #4
 8001424:	b2d2      	uxtb	r2, r2
 8001426:	440b      	add	r3, r1
 8001428:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800142c:	e00a      	b.n	8001444 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	b2da      	uxtb	r2, r3
 8001432:	4908      	ldr	r1, [pc, #32]	@ (8001454 <__NVIC_SetPriority+0x50>)
 8001434:	79fb      	ldrb	r3, [r7, #7]
 8001436:	f003 030f 	and.w	r3, r3, #15
 800143a:	3b04      	subs	r3, #4
 800143c:	0112      	lsls	r2, r2, #4
 800143e:	b2d2      	uxtb	r2, r2
 8001440:	440b      	add	r3, r1
 8001442:	761a      	strb	r2, [r3, #24]
}
 8001444:	bf00      	nop
 8001446:	370c      	adds	r7, #12
 8001448:	46bd      	mov	sp, r7
 800144a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144e:	4770      	bx	lr
 8001450:	e000e100 	.word	0xe000e100
 8001454:	e000ed00 	.word	0xe000ed00

08001458 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001458:	b480      	push	{r7}
 800145a:	b089      	sub	sp, #36	@ 0x24
 800145c:	af00      	add	r7, sp, #0
 800145e:	60f8      	str	r0, [r7, #12]
 8001460:	60b9      	str	r1, [r7, #8]
 8001462:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	f003 0307 	and.w	r3, r3, #7
 800146a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800146c:	69fb      	ldr	r3, [r7, #28]
 800146e:	f1c3 0307 	rsb	r3, r3, #7
 8001472:	2b04      	cmp	r3, #4
 8001474:	bf28      	it	cs
 8001476:	2304      	movcs	r3, #4
 8001478:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800147a:	69fb      	ldr	r3, [r7, #28]
 800147c:	3304      	adds	r3, #4
 800147e:	2b06      	cmp	r3, #6
 8001480:	d902      	bls.n	8001488 <NVIC_EncodePriority+0x30>
 8001482:	69fb      	ldr	r3, [r7, #28]
 8001484:	3b03      	subs	r3, #3
 8001486:	e000      	b.n	800148a <NVIC_EncodePriority+0x32>
 8001488:	2300      	movs	r3, #0
 800148a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800148c:	f04f 32ff 	mov.w	r2, #4294967295
 8001490:	69bb      	ldr	r3, [r7, #24]
 8001492:	fa02 f303 	lsl.w	r3, r2, r3
 8001496:	43da      	mvns	r2, r3
 8001498:	68bb      	ldr	r3, [r7, #8]
 800149a:	401a      	ands	r2, r3
 800149c:	697b      	ldr	r3, [r7, #20]
 800149e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014a0:	f04f 31ff 	mov.w	r1, #4294967295
 80014a4:	697b      	ldr	r3, [r7, #20]
 80014a6:	fa01 f303 	lsl.w	r3, r1, r3
 80014aa:	43d9      	mvns	r1, r3
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014b0:	4313      	orrs	r3, r2
         );
}
 80014b2:	4618      	mov	r0, r3
 80014b4:	3724      	adds	r7, #36	@ 0x24
 80014b6:	46bd      	mov	sp, r7
 80014b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014bc:	4770      	bx	lr
	...

080014c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b082      	sub	sp, #8
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	3b01      	subs	r3, #1
 80014cc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80014d0:	d301      	bcc.n	80014d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014d2:	2301      	movs	r3, #1
 80014d4:	e00f      	b.n	80014f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014d6:	4a0a      	ldr	r2, [pc, #40]	@ (8001500 <SysTick_Config+0x40>)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	3b01      	subs	r3, #1
 80014dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014de:	210f      	movs	r1, #15
 80014e0:	f04f 30ff 	mov.w	r0, #4294967295
 80014e4:	f7ff ff8e 	bl	8001404 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014e8:	4b05      	ldr	r3, [pc, #20]	@ (8001500 <SysTick_Config+0x40>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014ee:	4b04      	ldr	r3, [pc, #16]	@ (8001500 <SysTick_Config+0x40>)
 80014f0:	2207      	movs	r2, #7
 80014f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014f4:	2300      	movs	r3, #0
}
 80014f6:	4618      	mov	r0, r3
 80014f8:	3708      	adds	r7, #8
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	bf00      	nop
 8001500:	e000e010 	.word	0xe000e010

08001504 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b082      	sub	sp, #8
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800150c:	6878      	ldr	r0, [r7, #4]
 800150e:	f7ff ff29 	bl	8001364 <__NVIC_SetPriorityGrouping>
}
 8001512:	bf00      	nop
 8001514:	3708      	adds	r7, #8
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}

0800151a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800151a:	b580      	push	{r7, lr}
 800151c:	b086      	sub	sp, #24
 800151e:	af00      	add	r7, sp, #0
 8001520:	4603      	mov	r3, r0
 8001522:	60b9      	str	r1, [r7, #8]
 8001524:	607a      	str	r2, [r7, #4]
 8001526:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001528:	f7ff ff40 	bl	80013ac <__NVIC_GetPriorityGrouping>
 800152c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800152e:	687a      	ldr	r2, [r7, #4]
 8001530:	68b9      	ldr	r1, [r7, #8]
 8001532:	6978      	ldr	r0, [r7, #20]
 8001534:	f7ff ff90 	bl	8001458 <NVIC_EncodePriority>
 8001538:	4602      	mov	r2, r0
 800153a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800153e:	4611      	mov	r1, r2
 8001540:	4618      	mov	r0, r3
 8001542:	f7ff ff5f 	bl	8001404 <__NVIC_SetPriority>
}
 8001546:	bf00      	nop
 8001548:	3718      	adds	r7, #24
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}

0800154e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800154e:	b580      	push	{r7, lr}
 8001550:	b082      	sub	sp, #8
 8001552:	af00      	add	r7, sp, #0
 8001554:	4603      	mov	r3, r0
 8001556:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001558:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800155c:	4618      	mov	r0, r3
 800155e:	f7ff ff33 	bl	80013c8 <__NVIC_EnableIRQ>
}
 8001562:	bf00      	nop
 8001564:	3708      	adds	r7, #8
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}

0800156a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800156a:	b580      	push	{r7, lr}
 800156c:	b082      	sub	sp, #8
 800156e:	af00      	add	r7, sp, #0
 8001570:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001572:	6878      	ldr	r0, [r7, #4]
 8001574:	f7ff ffa4 	bl	80014c0 <SysTick_Config>
 8001578:	4603      	mov	r3, r0
}
 800157a:	4618      	mov	r0, r3
 800157c:	3708      	adds	r7, #8
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}
	...

08001584 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b082      	sub	sp, #8
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	2b00      	cmp	r3, #0
 8001590:	d101      	bne.n	8001596 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001592:	2301      	movs	r3, #1
 8001594:	e054      	b.n	8001640 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	7f5b      	ldrb	r3, [r3, #29]
 800159a:	b2db      	uxtb	r3, r3
 800159c:	2b00      	cmp	r3, #0
 800159e:	d105      	bne.n	80015ac <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	2200      	movs	r2, #0
 80015a4:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80015a6:	6878      	ldr	r0, [r7, #4]
 80015a8:	f7ff f9ce 	bl	8000948 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	2202      	movs	r2, #2
 80015b0:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	791b      	ldrb	r3, [r3, #4]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d10c      	bne.n	80015d4 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	4a22      	ldr	r2, [pc, #136]	@ (8001648 <HAL_CRC_Init+0xc4>)
 80015c0:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	689a      	ldr	r2, [r3, #8]
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f022 0218 	bic.w	r2, r2, #24
 80015d0:	609a      	str	r2, [r3, #8]
 80015d2:	e00c      	b.n	80015ee <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	6899      	ldr	r1, [r3, #8]
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	68db      	ldr	r3, [r3, #12]
 80015dc:	461a      	mov	r2, r3
 80015de:	6878      	ldr	r0, [r7, #4]
 80015e0:	f000 f834 	bl	800164c <HAL_CRCEx_Polynomial_Set>
 80015e4:	4603      	mov	r3, r0
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d001      	beq.n	80015ee <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 80015ea:	2301      	movs	r3, #1
 80015ec:	e028      	b.n	8001640 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	795b      	ldrb	r3, [r3, #5]
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d105      	bne.n	8001602 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f04f 32ff 	mov.w	r2, #4294967295
 80015fe:	611a      	str	r2, [r3, #16]
 8001600:	e004      	b.n	800160c <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	687a      	ldr	r2, [r7, #4]
 8001608:	6912      	ldr	r2, [r2, #16]
 800160a:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	689b      	ldr	r3, [r3, #8]
 8001612:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	695a      	ldr	r2, [r3, #20]
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	430a      	orrs	r2, r1
 8001620:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	689b      	ldr	r3, [r3, #8]
 8001628:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	699a      	ldr	r2, [r3, #24]
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	430a      	orrs	r2, r1
 8001636:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	2201      	movs	r2, #1
 800163c:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 800163e:	2300      	movs	r3, #0
}
 8001640:	4618      	mov	r0, r3
 8001642:	3708      	adds	r7, #8
 8001644:	46bd      	mov	sp, r7
 8001646:	bd80      	pop	{r7, pc}
 8001648:	04c11db7 	.word	0x04c11db7

0800164c <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 800164c:	b480      	push	{r7}
 800164e:	b087      	sub	sp, #28
 8001650:	af00      	add	r7, sp, #0
 8001652:	60f8      	str	r0, [r7, #12]
 8001654:	60b9      	str	r1, [r7, #8]
 8001656:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001658:	2300      	movs	r3, #0
 800165a:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 800165c:	231f      	movs	r3, #31
 800165e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8001660:	68bb      	ldr	r3, [r7, #8]
 8001662:	f003 0301 	and.w	r3, r3, #1
 8001666:	2b00      	cmp	r3, #0
 8001668:	d102      	bne.n	8001670 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 800166a:	2301      	movs	r3, #1
 800166c:	75fb      	strb	r3, [r7, #23]
 800166e:	e063      	b.n	8001738 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8001670:	bf00      	nop
 8001672:	693b      	ldr	r3, [r7, #16]
 8001674:	1e5a      	subs	r2, r3, #1
 8001676:	613a      	str	r2, [r7, #16]
 8001678:	2b00      	cmp	r3, #0
 800167a:	d009      	beq.n	8001690 <HAL_CRCEx_Polynomial_Set+0x44>
 800167c:	693b      	ldr	r3, [r7, #16]
 800167e:	f003 031f 	and.w	r3, r3, #31
 8001682:	68ba      	ldr	r2, [r7, #8]
 8001684:	fa22 f303 	lsr.w	r3, r2, r3
 8001688:	f003 0301 	and.w	r3, r3, #1
 800168c:	2b00      	cmp	r3, #0
 800168e:	d0f0      	beq.n	8001672 <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	2b18      	cmp	r3, #24
 8001694:	d846      	bhi.n	8001724 <HAL_CRCEx_Polynomial_Set+0xd8>
 8001696:	a201      	add	r2, pc, #4	@ (adr r2, 800169c <HAL_CRCEx_Polynomial_Set+0x50>)
 8001698:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800169c:	0800172b 	.word	0x0800172b
 80016a0:	08001725 	.word	0x08001725
 80016a4:	08001725 	.word	0x08001725
 80016a8:	08001725 	.word	0x08001725
 80016ac:	08001725 	.word	0x08001725
 80016b0:	08001725 	.word	0x08001725
 80016b4:	08001725 	.word	0x08001725
 80016b8:	08001725 	.word	0x08001725
 80016bc:	08001719 	.word	0x08001719
 80016c0:	08001725 	.word	0x08001725
 80016c4:	08001725 	.word	0x08001725
 80016c8:	08001725 	.word	0x08001725
 80016cc:	08001725 	.word	0x08001725
 80016d0:	08001725 	.word	0x08001725
 80016d4:	08001725 	.word	0x08001725
 80016d8:	08001725 	.word	0x08001725
 80016dc:	0800170d 	.word	0x0800170d
 80016e0:	08001725 	.word	0x08001725
 80016e4:	08001725 	.word	0x08001725
 80016e8:	08001725 	.word	0x08001725
 80016ec:	08001725 	.word	0x08001725
 80016f0:	08001725 	.word	0x08001725
 80016f4:	08001725 	.word	0x08001725
 80016f8:	08001725 	.word	0x08001725
 80016fc:	08001701 	.word	0x08001701
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 8001700:	693b      	ldr	r3, [r7, #16]
 8001702:	2b06      	cmp	r3, #6
 8001704:	d913      	bls.n	800172e <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 8001706:	2301      	movs	r3, #1
 8001708:	75fb      	strb	r3, [r7, #23]
        }
        break;
 800170a:	e010      	b.n	800172e <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 800170c:	693b      	ldr	r3, [r7, #16]
 800170e:	2b07      	cmp	r3, #7
 8001710:	d90f      	bls.n	8001732 <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 8001712:	2301      	movs	r3, #1
 8001714:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8001716:	e00c      	b.n	8001732 <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 8001718:	693b      	ldr	r3, [r7, #16]
 800171a:	2b0f      	cmp	r3, #15
 800171c:	d90b      	bls.n	8001736 <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 800171e:	2301      	movs	r3, #1
 8001720:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8001722:	e008      	b.n	8001736 <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 8001724:	2301      	movs	r3, #1
 8001726:	75fb      	strb	r3, [r7, #23]
        break;
 8001728:	e006      	b.n	8001738 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800172a:	bf00      	nop
 800172c:	e004      	b.n	8001738 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800172e:	bf00      	nop
 8001730:	e002      	b.n	8001738 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8001732:	bf00      	nop
 8001734:	e000      	b.n	8001738 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8001736:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 8001738:	7dfb      	ldrb	r3, [r7, #23]
 800173a:	2b00      	cmp	r3, #0
 800173c:	d10d      	bne.n	800175a <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	68ba      	ldr	r2, [r7, #8]
 8001744:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	689b      	ldr	r3, [r3, #8]
 800174c:	f023 0118 	bic.w	r1, r3, #24
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	687a      	ldr	r2, [r7, #4]
 8001756:	430a      	orrs	r2, r1
 8001758:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 800175a:	7dfb      	ldrb	r3, [r7, #23]
}
 800175c:	4618      	mov	r0, r3
 800175e:	371c      	adds	r7, #28
 8001760:	46bd      	mov	sp, r7
 8001762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001766:	4770      	bx	lr

08001768 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b084      	sub	sp, #16
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001770:	2300      	movs	r3, #0
 8001772:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800177a:	b2db      	uxtb	r3, r3
 800177c:	2b02      	cmp	r3, #2
 800177e:	d00d      	beq.n	800179c <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	2204      	movs	r2, #4
 8001784:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	2201      	movs	r2, #1
 800178a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	2200      	movs	r2, #0
 8001792:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8001796:	2301      	movs	r3, #1
 8001798:	73fb      	strb	r3, [r7, #15]
 800179a:	e047      	b.n	800182c <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	681a      	ldr	r2, [r3, #0]
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f022 020e 	bic.w	r2, r2, #14
 80017aa:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	681a      	ldr	r2, [r3, #0]
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f022 0201 	bic.w	r2, r2, #1
 80017ba:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80017c0:	681a      	ldr	r2, [r3, #0]
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80017c6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80017ca:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017d0:	f003 021f 	and.w	r2, r3, #31
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017d8:	2101      	movs	r1, #1
 80017da:	fa01 f202 	lsl.w	r2, r1, r2
 80017de:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017e4:	687a      	ldr	r2, [r7, #4]
 80017e6:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80017e8:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d00c      	beq.n	800180c <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80017f6:	681a      	ldr	r2, [r3, #0]
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80017fc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001800:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001806:	687a      	ldr	r2, [r7, #4]
 8001808:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800180a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	2201      	movs	r2, #1
 8001810:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	2200      	movs	r2, #0
 8001818:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001820:	2b00      	cmp	r3, #0
 8001822:	d003      	beq.n	800182c <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001828:	6878      	ldr	r0, [r7, #4]
 800182a:	4798      	blx	r3
    }
  }
  return status;
 800182c:	7bfb      	ldrb	r3, [r7, #15]
}
 800182e:	4618      	mov	r0, r3
 8001830:	3710      	adds	r7, #16
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}
	...

08001838 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001838:	b480      	push	{r7}
 800183a:	b087      	sub	sp, #28
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
 8001840:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001842:	2300      	movs	r3, #0
 8001844:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001846:	e15a      	b.n	8001afe <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	681a      	ldr	r2, [r3, #0]
 800184c:	2101      	movs	r1, #1
 800184e:	697b      	ldr	r3, [r7, #20]
 8001850:	fa01 f303 	lsl.w	r3, r1, r3
 8001854:	4013      	ands	r3, r2
 8001856:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	2b00      	cmp	r3, #0
 800185c:	f000 814c 	beq.w	8001af8 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	f003 0303 	and.w	r3, r3, #3
 8001868:	2b01      	cmp	r3, #1
 800186a:	d005      	beq.n	8001878 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001874:	2b02      	cmp	r3, #2
 8001876:	d130      	bne.n	80018da <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	689b      	ldr	r3, [r3, #8]
 800187c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800187e:	697b      	ldr	r3, [r7, #20]
 8001880:	005b      	lsls	r3, r3, #1
 8001882:	2203      	movs	r2, #3
 8001884:	fa02 f303 	lsl.w	r3, r2, r3
 8001888:	43db      	mvns	r3, r3
 800188a:	693a      	ldr	r2, [r7, #16]
 800188c:	4013      	ands	r3, r2
 800188e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	68da      	ldr	r2, [r3, #12]
 8001894:	697b      	ldr	r3, [r7, #20]
 8001896:	005b      	lsls	r3, r3, #1
 8001898:	fa02 f303 	lsl.w	r3, r2, r3
 800189c:	693a      	ldr	r2, [r7, #16]
 800189e:	4313      	orrs	r3, r2
 80018a0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	693a      	ldr	r2, [r7, #16]
 80018a6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	685b      	ldr	r3, [r3, #4]
 80018ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80018ae:	2201      	movs	r2, #1
 80018b0:	697b      	ldr	r3, [r7, #20]
 80018b2:	fa02 f303 	lsl.w	r3, r2, r3
 80018b6:	43db      	mvns	r3, r3
 80018b8:	693a      	ldr	r2, [r7, #16]
 80018ba:	4013      	ands	r3, r2
 80018bc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	091b      	lsrs	r3, r3, #4
 80018c4:	f003 0201 	and.w	r2, r3, #1
 80018c8:	697b      	ldr	r3, [r7, #20]
 80018ca:	fa02 f303 	lsl.w	r3, r2, r3
 80018ce:	693a      	ldr	r2, [r7, #16]
 80018d0:	4313      	orrs	r3, r2
 80018d2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	693a      	ldr	r2, [r7, #16]
 80018d8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	f003 0303 	and.w	r3, r3, #3
 80018e2:	2b03      	cmp	r3, #3
 80018e4:	d017      	beq.n	8001916 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	68db      	ldr	r3, [r3, #12]
 80018ea:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80018ec:	697b      	ldr	r3, [r7, #20]
 80018ee:	005b      	lsls	r3, r3, #1
 80018f0:	2203      	movs	r2, #3
 80018f2:	fa02 f303 	lsl.w	r3, r2, r3
 80018f6:	43db      	mvns	r3, r3
 80018f8:	693a      	ldr	r2, [r7, #16]
 80018fa:	4013      	ands	r3, r2
 80018fc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	689a      	ldr	r2, [r3, #8]
 8001902:	697b      	ldr	r3, [r7, #20]
 8001904:	005b      	lsls	r3, r3, #1
 8001906:	fa02 f303 	lsl.w	r3, r2, r3
 800190a:	693a      	ldr	r2, [r7, #16]
 800190c:	4313      	orrs	r3, r2
 800190e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	693a      	ldr	r2, [r7, #16]
 8001914:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	685b      	ldr	r3, [r3, #4]
 800191a:	f003 0303 	and.w	r3, r3, #3
 800191e:	2b02      	cmp	r3, #2
 8001920:	d123      	bne.n	800196a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001922:	697b      	ldr	r3, [r7, #20]
 8001924:	08da      	lsrs	r2, r3, #3
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	3208      	adds	r2, #8
 800192a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800192e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001930:	697b      	ldr	r3, [r7, #20]
 8001932:	f003 0307 	and.w	r3, r3, #7
 8001936:	009b      	lsls	r3, r3, #2
 8001938:	220f      	movs	r2, #15
 800193a:	fa02 f303 	lsl.w	r3, r2, r3
 800193e:	43db      	mvns	r3, r3
 8001940:	693a      	ldr	r2, [r7, #16]
 8001942:	4013      	ands	r3, r2
 8001944:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	691a      	ldr	r2, [r3, #16]
 800194a:	697b      	ldr	r3, [r7, #20]
 800194c:	f003 0307 	and.w	r3, r3, #7
 8001950:	009b      	lsls	r3, r3, #2
 8001952:	fa02 f303 	lsl.w	r3, r2, r3
 8001956:	693a      	ldr	r2, [r7, #16]
 8001958:	4313      	orrs	r3, r2
 800195a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800195c:	697b      	ldr	r3, [r7, #20]
 800195e:	08da      	lsrs	r2, r3, #3
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	3208      	adds	r2, #8
 8001964:	6939      	ldr	r1, [r7, #16]
 8001966:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001970:	697b      	ldr	r3, [r7, #20]
 8001972:	005b      	lsls	r3, r3, #1
 8001974:	2203      	movs	r2, #3
 8001976:	fa02 f303 	lsl.w	r3, r2, r3
 800197a:	43db      	mvns	r3, r3
 800197c:	693a      	ldr	r2, [r7, #16]
 800197e:	4013      	ands	r3, r2
 8001980:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	685b      	ldr	r3, [r3, #4]
 8001986:	f003 0203 	and.w	r2, r3, #3
 800198a:	697b      	ldr	r3, [r7, #20]
 800198c:	005b      	lsls	r3, r3, #1
 800198e:	fa02 f303 	lsl.w	r3, r2, r3
 8001992:	693a      	ldr	r2, [r7, #16]
 8001994:	4313      	orrs	r3, r2
 8001996:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	693a      	ldr	r2, [r7, #16]
 800199c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	685b      	ldr	r3, [r3, #4]
 80019a2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	f000 80a6 	beq.w	8001af8 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019ac:	4b5b      	ldr	r3, [pc, #364]	@ (8001b1c <HAL_GPIO_Init+0x2e4>)
 80019ae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80019b0:	4a5a      	ldr	r2, [pc, #360]	@ (8001b1c <HAL_GPIO_Init+0x2e4>)
 80019b2:	f043 0301 	orr.w	r3, r3, #1
 80019b6:	6613      	str	r3, [r2, #96]	@ 0x60
 80019b8:	4b58      	ldr	r3, [pc, #352]	@ (8001b1c <HAL_GPIO_Init+0x2e4>)
 80019ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80019bc:	f003 0301 	and.w	r3, r3, #1
 80019c0:	60bb      	str	r3, [r7, #8]
 80019c2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80019c4:	4a56      	ldr	r2, [pc, #344]	@ (8001b20 <HAL_GPIO_Init+0x2e8>)
 80019c6:	697b      	ldr	r3, [r7, #20]
 80019c8:	089b      	lsrs	r3, r3, #2
 80019ca:	3302      	adds	r3, #2
 80019cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019d0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80019d2:	697b      	ldr	r3, [r7, #20]
 80019d4:	f003 0303 	and.w	r3, r3, #3
 80019d8:	009b      	lsls	r3, r3, #2
 80019da:	220f      	movs	r2, #15
 80019dc:	fa02 f303 	lsl.w	r3, r2, r3
 80019e0:	43db      	mvns	r3, r3
 80019e2:	693a      	ldr	r2, [r7, #16]
 80019e4:	4013      	ands	r3, r2
 80019e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80019ee:	d01f      	beq.n	8001a30 <HAL_GPIO_Init+0x1f8>
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	4a4c      	ldr	r2, [pc, #304]	@ (8001b24 <HAL_GPIO_Init+0x2ec>)
 80019f4:	4293      	cmp	r3, r2
 80019f6:	d019      	beq.n	8001a2c <HAL_GPIO_Init+0x1f4>
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	4a4b      	ldr	r2, [pc, #300]	@ (8001b28 <HAL_GPIO_Init+0x2f0>)
 80019fc:	4293      	cmp	r3, r2
 80019fe:	d013      	beq.n	8001a28 <HAL_GPIO_Init+0x1f0>
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	4a4a      	ldr	r2, [pc, #296]	@ (8001b2c <HAL_GPIO_Init+0x2f4>)
 8001a04:	4293      	cmp	r3, r2
 8001a06:	d00d      	beq.n	8001a24 <HAL_GPIO_Init+0x1ec>
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	4a49      	ldr	r2, [pc, #292]	@ (8001b30 <HAL_GPIO_Init+0x2f8>)
 8001a0c:	4293      	cmp	r3, r2
 8001a0e:	d007      	beq.n	8001a20 <HAL_GPIO_Init+0x1e8>
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	4a48      	ldr	r2, [pc, #288]	@ (8001b34 <HAL_GPIO_Init+0x2fc>)
 8001a14:	4293      	cmp	r3, r2
 8001a16:	d101      	bne.n	8001a1c <HAL_GPIO_Init+0x1e4>
 8001a18:	2305      	movs	r3, #5
 8001a1a:	e00a      	b.n	8001a32 <HAL_GPIO_Init+0x1fa>
 8001a1c:	2306      	movs	r3, #6
 8001a1e:	e008      	b.n	8001a32 <HAL_GPIO_Init+0x1fa>
 8001a20:	2304      	movs	r3, #4
 8001a22:	e006      	b.n	8001a32 <HAL_GPIO_Init+0x1fa>
 8001a24:	2303      	movs	r3, #3
 8001a26:	e004      	b.n	8001a32 <HAL_GPIO_Init+0x1fa>
 8001a28:	2302      	movs	r3, #2
 8001a2a:	e002      	b.n	8001a32 <HAL_GPIO_Init+0x1fa>
 8001a2c:	2301      	movs	r3, #1
 8001a2e:	e000      	b.n	8001a32 <HAL_GPIO_Init+0x1fa>
 8001a30:	2300      	movs	r3, #0
 8001a32:	697a      	ldr	r2, [r7, #20]
 8001a34:	f002 0203 	and.w	r2, r2, #3
 8001a38:	0092      	lsls	r2, r2, #2
 8001a3a:	4093      	lsls	r3, r2
 8001a3c:	693a      	ldr	r2, [r7, #16]
 8001a3e:	4313      	orrs	r3, r2
 8001a40:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a42:	4937      	ldr	r1, [pc, #220]	@ (8001b20 <HAL_GPIO_Init+0x2e8>)
 8001a44:	697b      	ldr	r3, [r7, #20]
 8001a46:	089b      	lsrs	r3, r3, #2
 8001a48:	3302      	adds	r3, #2
 8001a4a:	693a      	ldr	r2, [r7, #16]
 8001a4c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001a50:	4b39      	ldr	r3, [pc, #228]	@ (8001b38 <HAL_GPIO_Init+0x300>)
 8001a52:	689b      	ldr	r3, [r3, #8]
 8001a54:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	43db      	mvns	r3, r3
 8001a5a:	693a      	ldr	r2, [r7, #16]
 8001a5c:	4013      	ands	r3, r2
 8001a5e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d003      	beq.n	8001a74 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001a6c:	693a      	ldr	r2, [r7, #16]
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	4313      	orrs	r3, r2
 8001a72:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001a74:	4a30      	ldr	r2, [pc, #192]	@ (8001b38 <HAL_GPIO_Init+0x300>)
 8001a76:	693b      	ldr	r3, [r7, #16]
 8001a78:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001a7a:	4b2f      	ldr	r3, [pc, #188]	@ (8001b38 <HAL_GPIO_Init+0x300>)
 8001a7c:	68db      	ldr	r3, [r3, #12]
 8001a7e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	43db      	mvns	r3, r3
 8001a84:	693a      	ldr	r2, [r7, #16]
 8001a86:	4013      	ands	r3, r2
 8001a88:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d003      	beq.n	8001a9e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001a96:	693a      	ldr	r2, [r7, #16]
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	4313      	orrs	r3, r2
 8001a9c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001a9e:	4a26      	ldr	r2, [pc, #152]	@ (8001b38 <HAL_GPIO_Init+0x300>)
 8001aa0:	693b      	ldr	r3, [r7, #16]
 8001aa2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001aa4:	4b24      	ldr	r3, [pc, #144]	@ (8001b38 <HAL_GPIO_Init+0x300>)
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	43db      	mvns	r3, r3
 8001aae:	693a      	ldr	r2, [r7, #16]
 8001ab0:	4013      	ands	r3, r2
 8001ab2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d003      	beq.n	8001ac8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001ac0:	693a      	ldr	r2, [r7, #16]
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	4313      	orrs	r3, r2
 8001ac6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001ac8:	4a1b      	ldr	r2, [pc, #108]	@ (8001b38 <HAL_GPIO_Init+0x300>)
 8001aca:	693b      	ldr	r3, [r7, #16]
 8001acc:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001ace:	4b1a      	ldr	r3, [pc, #104]	@ (8001b38 <HAL_GPIO_Init+0x300>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	43db      	mvns	r3, r3
 8001ad8:	693a      	ldr	r2, [r7, #16]
 8001ada:	4013      	ands	r3, r2
 8001adc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d003      	beq.n	8001af2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001aea:	693a      	ldr	r2, [r7, #16]
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	4313      	orrs	r3, r2
 8001af0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001af2:	4a11      	ldr	r2, [pc, #68]	@ (8001b38 <HAL_GPIO_Init+0x300>)
 8001af4:	693b      	ldr	r3, [r7, #16]
 8001af6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001af8:	697b      	ldr	r3, [r7, #20]
 8001afa:	3301      	adds	r3, #1
 8001afc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	681a      	ldr	r2, [r3, #0]
 8001b02:	697b      	ldr	r3, [r7, #20]
 8001b04:	fa22 f303 	lsr.w	r3, r2, r3
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	f47f ae9d 	bne.w	8001848 <HAL_GPIO_Init+0x10>
  }
}
 8001b0e:	bf00      	nop
 8001b10:	bf00      	nop
 8001b12:	371c      	adds	r7, #28
 8001b14:	46bd      	mov	sp, r7
 8001b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1a:	4770      	bx	lr
 8001b1c:	40021000 	.word	0x40021000
 8001b20:	40010000 	.word	0x40010000
 8001b24:	48000400 	.word	0x48000400
 8001b28:	48000800 	.word	0x48000800
 8001b2c:	48000c00 	.word	0x48000c00
 8001b30:	48001000 	.word	0x48001000
 8001b34:	48001400 	.word	0x48001400
 8001b38:	40010400 	.word	0x40010400

08001b3c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	b083      	sub	sp, #12
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
 8001b44:	460b      	mov	r3, r1
 8001b46:	807b      	strh	r3, [r7, #2]
 8001b48:	4613      	mov	r3, r2
 8001b4a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001b4c:	787b      	ldrb	r3, [r7, #1]
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d003      	beq.n	8001b5a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001b52:	887a      	ldrh	r2, [r7, #2]
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001b58:	e002      	b.n	8001b60 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001b5a:	887a      	ldrh	r2, [r7, #2]
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001b60:	bf00      	nop
 8001b62:	370c      	adds	r7, #12
 8001b64:	46bd      	mov	sp, r7
 8001b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6a:	4770      	bx	lr

08001b6c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b082      	sub	sp, #8
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	4603      	mov	r3, r0
 8001b74:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001b76:	4b08      	ldr	r3, [pc, #32]	@ (8001b98 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001b78:	695a      	ldr	r2, [r3, #20]
 8001b7a:	88fb      	ldrh	r3, [r7, #6]
 8001b7c:	4013      	ands	r3, r2
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d006      	beq.n	8001b90 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001b82:	4a05      	ldr	r2, [pc, #20]	@ (8001b98 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001b84:	88fb      	ldrh	r3, [r7, #6]
 8001b86:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001b88:	88fb      	ldrh	r3, [r7, #6]
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	f7fe fd36 	bl	80005fc <HAL_GPIO_EXTI_Callback>
  }
}
 8001b90:	bf00      	nop
 8001b92:	3708      	adds	r7, #8
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bd80      	pop	{r7, pc}
 8001b98:	40010400 	.word	0x40010400

08001b9c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	b085      	sub	sp, #20
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d141      	bne.n	8001c2e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001baa:	4b4b      	ldr	r3, [pc, #300]	@ (8001cd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001bb2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001bb6:	d131      	bne.n	8001c1c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001bb8:	4b47      	ldr	r3, [pc, #284]	@ (8001cd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001bbe:	4a46      	ldr	r2, [pc, #280]	@ (8001cd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bc0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001bc4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001bc8:	4b43      	ldr	r3, [pc, #268]	@ (8001cd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001bd0:	4a41      	ldr	r2, [pc, #260]	@ (8001cd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bd2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001bd6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001bd8:	4b40      	ldr	r3, [pc, #256]	@ (8001cdc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	2232      	movs	r2, #50	@ 0x32
 8001bde:	fb02 f303 	mul.w	r3, r2, r3
 8001be2:	4a3f      	ldr	r2, [pc, #252]	@ (8001ce0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001be4:	fba2 2303 	umull	r2, r3, r2, r3
 8001be8:	0c9b      	lsrs	r3, r3, #18
 8001bea:	3301      	adds	r3, #1
 8001bec:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001bee:	e002      	b.n	8001bf6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	3b01      	subs	r3, #1
 8001bf4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001bf6:	4b38      	ldr	r3, [pc, #224]	@ (8001cd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bf8:	695b      	ldr	r3, [r3, #20]
 8001bfa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001bfe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001c02:	d102      	bne.n	8001c0a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d1f2      	bne.n	8001bf0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001c0a:	4b33      	ldr	r3, [pc, #204]	@ (8001cd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c0c:	695b      	ldr	r3, [r3, #20]
 8001c0e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c12:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001c16:	d158      	bne.n	8001cca <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001c18:	2303      	movs	r3, #3
 8001c1a:	e057      	b.n	8001ccc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001c1c:	4b2e      	ldr	r3, [pc, #184]	@ (8001cd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001c22:	4a2d      	ldr	r2, [pc, #180]	@ (8001cd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c24:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001c28:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001c2c:	e04d      	b.n	8001cca <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001c34:	d141      	bne.n	8001cba <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001c36:	4b28      	ldr	r3, [pc, #160]	@ (8001cd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001c3e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001c42:	d131      	bne.n	8001ca8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001c44:	4b24      	ldr	r3, [pc, #144]	@ (8001cd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c46:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001c4a:	4a23      	ldr	r2, [pc, #140]	@ (8001cd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c4c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c50:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001c54:	4b20      	ldr	r3, [pc, #128]	@ (8001cd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001c5c:	4a1e      	ldr	r2, [pc, #120]	@ (8001cd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c5e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001c62:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001c64:	4b1d      	ldr	r3, [pc, #116]	@ (8001cdc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	2232      	movs	r2, #50	@ 0x32
 8001c6a:	fb02 f303 	mul.w	r3, r2, r3
 8001c6e:	4a1c      	ldr	r2, [pc, #112]	@ (8001ce0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001c70:	fba2 2303 	umull	r2, r3, r2, r3
 8001c74:	0c9b      	lsrs	r3, r3, #18
 8001c76:	3301      	adds	r3, #1
 8001c78:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001c7a:	e002      	b.n	8001c82 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	3b01      	subs	r3, #1
 8001c80:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001c82:	4b15      	ldr	r3, [pc, #84]	@ (8001cd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c84:	695b      	ldr	r3, [r3, #20]
 8001c86:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c8a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001c8e:	d102      	bne.n	8001c96 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d1f2      	bne.n	8001c7c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001c96:	4b10      	ldr	r3, [pc, #64]	@ (8001cd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c98:	695b      	ldr	r3, [r3, #20]
 8001c9a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c9e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001ca2:	d112      	bne.n	8001cca <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001ca4:	2303      	movs	r3, #3
 8001ca6:	e011      	b.n	8001ccc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001ca8:	4b0b      	ldr	r3, [pc, #44]	@ (8001cd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001caa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001cae:	4a0a      	ldr	r2, [pc, #40]	@ (8001cd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001cb0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001cb4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001cb8:	e007      	b.n	8001cca <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001cba:	4b07      	ldr	r3, [pc, #28]	@ (8001cd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001cc2:	4a05      	ldr	r2, [pc, #20]	@ (8001cd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001cc4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001cc8:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001cca:	2300      	movs	r3, #0
}
 8001ccc:	4618      	mov	r0, r3
 8001cce:	3714      	adds	r7, #20
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd6:	4770      	bx	lr
 8001cd8:	40007000 	.word	0x40007000
 8001cdc:	20000000 	.word	0x20000000
 8001ce0:	431bde83 	.word	0x431bde83

08001ce4 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001ce8:	4b05      	ldr	r3, [pc, #20]	@ (8001d00 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001cea:	689b      	ldr	r3, [r3, #8]
 8001cec:	4a04      	ldr	r2, [pc, #16]	@ (8001d00 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001cee:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001cf2:	6093      	str	r3, [r2, #8]
}
 8001cf4:	bf00      	nop
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfc:	4770      	bx	lr
 8001cfe:	bf00      	nop
 8001d00:	40007000 	.word	0x40007000

08001d04 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b088      	sub	sp, #32
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d101      	bne.n	8001d16 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d12:	2301      	movs	r3, #1
 8001d14:	e2fe      	b.n	8002314 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f003 0301 	and.w	r3, r3, #1
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d075      	beq.n	8001e0e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d22:	4b97      	ldr	r3, [pc, #604]	@ (8001f80 <HAL_RCC_OscConfig+0x27c>)
 8001d24:	689b      	ldr	r3, [r3, #8]
 8001d26:	f003 030c 	and.w	r3, r3, #12
 8001d2a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001d2c:	4b94      	ldr	r3, [pc, #592]	@ (8001f80 <HAL_RCC_OscConfig+0x27c>)
 8001d2e:	68db      	ldr	r3, [r3, #12]
 8001d30:	f003 0303 	and.w	r3, r3, #3
 8001d34:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001d36:	69bb      	ldr	r3, [r7, #24]
 8001d38:	2b0c      	cmp	r3, #12
 8001d3a:	d102      	bne.n	8001d42 <HAL_RCC_OscConfig+0x3e>
 8001d3c:	697b      	ldr	r3, [r7, #20]
 8001d3e:	2b03      	cmp	r3, #3
 8001d40:	d002      	beq.n	8001d48 <HAL_RCC_OscConfig+0x44>
 8001d42:	69bb      	ldr	r3, [r7, #24]
 8001d44:	2b08      	cmp	r3, #8
 8001d46:	d10b      	bne.n	8001d60 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d48:	4b8d      	ldr	r3, [pc, #564]	@ (8001f80 <HAL_RCC_OscConfig+0x27c>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d05b      	beq.n	8001e0c <HAL_RCC_OscConfig+0x108>
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d157      	bne.n	8001e0c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001d5c:	2301      	movs	r3, #1
 8001d5e:	e2d9      	b.n	8002314 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001d68:	d106      	bne.n	8001d78 <HAL_RCC_OscConfig+0x74>
 8001d6a:	4b85      	ldr	r3, [pc, #532]	@ (8001f80 <HAL_RCC_OscConfig+0x27c>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	4a84      	ldr	r2, [pc, #528]	@ (8001f80 <HAL_RCC_OscConfig+0x27c>)
 8001d70:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d74:	6013      	str	r3, [r2, #0]
 8001d76:	e01d      	b.n	8001db4 <HAL_RCC_OscConfig+0xb0>
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001d80:	d10c      	bne.n	8001d9c <HAL_RCC_OscConfig+0x98>
 8001d82:	4b7f      	ldr	r3, [pc, #508]	@ (8001f80 <HAL_RCC_OscConfig+0x27c>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	4a7e      	ldr	r2, [pc, #504]	@ (8001f80 <HAL_RCC_OscConfig+0x27c>)
 8001d88:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001d8c:	6013      	str	r3, [r2, #0]
 8001d8e:	4b7c      	ldr	r3, [pc, #496]	@ (8001f80 <HAL_RCC_OscConfig+0x27c>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	4a7b      	ldr	r2, [pc, #492]	@ (8001f80 <HAL_RCC_OscConfig+0x27c>)
 8001d94:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d98:	6013      	str	r3, [r2, #0]
 8001d9a:	e00b      	b.n	8001db4 <HAL_RCC_OscConfig+0xb0>
 8001d9c:	4b78      	ldr	r3, [pc, #480]	@ (8001f80 <HAL_RCC_OscConfig+0x27c>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	4a77      	ldr	r2, [pc, #476]	@ (8001f80 <HAL_RCC_OscConfig+0x27c>)
 8001da2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001da6:	6013      	str	r3, [r2, #0]
 8001da8:	4b75      	ldr	r3, [pc, #468]	@ (8001f80 <HAL_RCC_OscConfig+0x27c>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4a74      	ldr	r2, [pc, #464]	@ (8001f80 <HAL_RCC_OscConfig+0x27c>)
 8001dae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001db2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	685b      	ldr	r3, [r3, #4]
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d013      	beq.n	8001de4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dbc:	f7ff faa4 	bl	8001308 <HAL_GetTick>
 8001dc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001dc2:	e008      	b.n	8001dd6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001dc4:	f7ff faa0 	bl	8001308 <HAL_GetTick>
 8001dc8:	4602      	mov	r2, r0
 8001dca:	693b      	ldr	r3, [r7, #16]
 8001dcc:	1ad3      	subs	r3, r2, r3
 8001dce:	2b64      	cmp	r3, #100	@ 0x64
 8001dd0:	d901      	bls.n	8001dd6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001dd2:	2303      	movs	r3, #3
 8001dd4:	e29e      	b.n	8002314 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001dd6:	4b6a      	ldr	r3, [pc, #424]	@ (8001f80 <HAL_RCC_OscConfig+0x27c>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d0f0      	beq.n	8001dc4 <HAL_RCC_OscConfig+0xc0>
 8001de2:	e014      	b.n	8001e0e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001de4:	f7ff fa90 	bl	8001308 <HAL_GetTick>
 8001de8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001dea:	e008      	b.n	8001dfe <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001dec:	f7ff fa8c 	bl	8001308 <HAL_GetTick>
 8001df0:	4602      	mov	r2, r0
 8001df2:	693b      	ldr	r3, [r7, #16]
 8001df4:	1ad3      	subs	r3, r2, r3
 8001df6:	2b64      	cmp	r3, #100	@ 0x64
 8001df8:	d901      	bls.n	8001dfe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001dfa:	2303      	movs	r3, #3
 8001dfc:	e28a      	b.n	8002314 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001dfe:	4b60      	ldr	r3, [pc, #384]	@ (8001f80 <HAL_RCC_OscConfig+0x27c>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d1f0      	bne.n	8001dec <HAL_RCC_OscConfig+0xe8>
 8001e0a:	e000      	b.n	8001e0e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e0c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f003 0302 	and.w	r3, r3, #2
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d075      	beq.n	8001f06 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e1a:	4b59      	ldr	r3, [pc, #356]	@ (8001f80 <HAL_RCC_OscConfig+0x27c>)
 8001e1c:	689b      	ldr	r3, [r3, #8]
 8001e1e:	f003 030c 	and.w	r3, r3, #12
 8001e22:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001e24:	4b56      	ldr	r3, [pc, #344]	@ (8001f80 <HAL_RCC_OscConfig+0x27c>)
 8001e26:	68db      	ldr	r3, [r3, #12]
 8001e28:	f003 0303 	and.w	r3, r3, #3
 8001e2c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001e2e:	69bb      	ldr	r3, [r7, #24]
 8001e30:	2b0c      	cmp	r3, #12
 8001e32:	d102      	bne.n	8001e3a <HAL_RCC_OscConfig+0x136>
 8001e34:	697b      	ldr	r3, [r7, #20]
 8001e36:	2b02      	cmp	r3, #2
 8001e38:	d002      	beq.n	8001e40 <HAL_RCC_OscConfig+0x13c>
 8001e3a:	69bb      	ldr	r3, [r7, #24]
 8001e3c:	2b04      	cmp	r3, #4
 8001e3e:	d11f      	bne.n	8001e80 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001e40:	4b4f      	ldr	r3, [pc, #316]	@ (8001f80 <HAL_RCC_OscConfig+0x27c>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d005      	beq.n	8001e58 <HAL_RCC_OscConfig+0x154>
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	68db      	ldr	r3, [r3, #12]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d101      	bne.n	8001e58 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001e54:	2301      	movs	r3, #1
 8001e56:	e25d      	b.n	8002314 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e58:	4b49      	ldr	r3, [pc, #292]	@ (8001f80 <HAL_RCC_OscConfig+0x27c>)
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	691b      	ldr	r3, [r3, #16]
 8001e64:	061b      	lsls	r3, r3, #24
 8001e66:	4946      	ldr	r1, [pc, #280]	@ (8001f80 <HAL_RCC_OscConfig+0x27c>)
 8001e68:	4313      	orrs	r3, r2
 8001e6a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001e6c:	4b45      	ldr	r3, [pc, #276]	@ (8001f84 <HAL_RCC_OscConfig+0x280>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4618      	mov	r0, r3
 8001e72:	f7ff f9fd 	bl	8001270 <HAL_InitTick>
 8001e76:	4603      	mov	r3, r0
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d043      	beq.n	8001f04 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	e249      	b.n	8002314 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	68db      	ldr	r3, [r3, #12]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d023      	beq.n	8001ed0 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e88:	4b3d      	ldr	r3, [pc, #244]	@ (8001f80 <HAL_RCC_OscConfig+0x27c>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4a3c      	ldr	r2, [pc, #240]	@ (8001f80 <HAL_RCC_OscConfig+0x27c>)
 8001e8e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e92:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e94:	f7ff fa38 	bl	8001308 <HAL_GetTick>
 8001e98:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e9a:	e008      	b.n	8001eae <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e9c:	f7ff fa34 	bl	8001308 <HAL_GetTick>
 8001ea0:	4602      	mov	r2, r0
 8001ea2:	693b      	ldr	r3, [r7, #16]
 8001ea4:	1ad3      	subs	r3, r2, r3
 8001ea6:	2b02      	cmp	r3, #2
 8001ea8:	d901      	bls.n	8001eae <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001eaa:	2303      	movs	r3, #3
 8001eac:	e232      	b.n	8002314 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001eae:	4b34      	ldr	r3, [pc, #208]	@ (8001f80 <HAL_RCC_OscConfig+0x27c>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d0f0      	beq.n	8001e9c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001eba:	4b31      	ldr	r3, [pc, #196]	@ (8001f80 <HAL_RCC_OscConfig+0x27c>)
 8001ebc:	685b      	ldr	r3, [r3, #4]
 8001ebe:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	691b      	ldr	r3, [r3, #16]
 8001ec6:	061b      	lsls	r3, r3, #24
 8001ec8:	492d      	ldr	r1, [pc, #180]	@ (8001f80 <HAL_RCC_OscConfig+0x27c>)
 8001eca:	4313      	orrs	r3, r2
 8001ecc:	604b      	str	r3, [r1, #4]
 8001ece:	e01a      	b.n	8001f06 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ed0:	4b2b      	ldr	r3, [pc, #172]	@ (8001f80 <HAL_RCC_OscConfig+0x27c>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4a2a      	ldr	r2, [pc, #168]	@ (8001f80 <HAL_RCC_OscConfig+0x27c>)
 8001ed6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001eda:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001edc:	f7ff fa14 	bl	8001308 <HAL_GetTick>
 8001ee0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001ee2:	e008      	b.n	8001ef6 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ee4:	f7ff fa10 	bl	8001308 <HAL_GetTick>
 8001ee8:	4602      	mov	r2, r0
 8001eea:	693b      	ldr	r3, [r7, #16]
 8001eec:	1ad3      	subs	r3, r2, r3
 8001eee:	2b02      	cmp	r3, #2
 8001ef0:	d901      	bls.n	8001ef6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001ef2:	2303      	movs	r3, #3
 8001ef4:	e20e      	b.n	8002314 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001ef6:	4b22      	ldr	r3, [pc, #136]	@ (8001f80 <HAL_RCC_OscConfig+0x27c>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d1f0      	bne.n	8001ee4 <HAL_RCC_OscConfig+0x1e0>
 8001f02:	e000      	b.n	8001f06 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001f04:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f003 0308 	and.w	r3, r3, #8
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d041      	beq.n	8001f96 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	695b      	ldr	r3, [r3, #20]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d01c      	beq.n	8001f54 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f1a:	4b19      	ldr	r3, [pc, #100]	@ (8001f80 <HAL_RCC_OscConfig+0x27c>)
 8001f1c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001f20:	4a17      	ldr	r2, [pc, #92]	@ (8001f80 <HAL_RCC_OscConfig+0x27c>)
 8001f22:	f043 0301 	orr.w	r3, r3, #1
 8001f26:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f2a:	f7ff f9ed 	bl	8001308 <HAL_GetTick>
 8001f2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001f30:	e008      	b.n	8001f44 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f32:	f7ff f9e9 	bl	8001308 <HAL_GetTick>
 8001f36:	4602      	mov	r2, r0
 8001f38:	693b      	ldr	r3, [r7, #16]
 8001f3a:	1ad3      	subs	r3, r2, r3
 8001f3c:	2b02      	cmp	r3, #2
 8001f3e:	d901      	bls.n	8001f44 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001f40:	2303      	movs	r3, #3
 8001f42:	e1e7      	b.n	8002314 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001f44:	4b0e      	ldr	r3, [pc, #56]	@ (8001f80 <HAL_RCC_OscConfig+0x27c>)
 8001f46:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001f4a:	f003 0302 	and.w	r3, r3, #2
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d0ef      	beq.n	8001f32 <HAL_RCC_OscConfig+0x22e>
 8001f52:	e020      	b.n	8001f96 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f54:	4b0a      	ldr	r3, [pc, #40]	@ (8001f80 <HAL_RCC_OscConfig+0x27c>)
 8001f56:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001f5a:	4a09      	ldr	r2, [pc, #36]	@ (8001f80 <HAL_RCC_OscConfig+0x27c>)
 8001f5c:	f023 0301 	bic.w	r3, r3, #1
 8001f60:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f64:	f7ff f9d0 	bl	8001308 <HAL_GetTick>
 8001f68:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001f6a:	e00d      	b.n	8001f88 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f6c:	f7ff f9cc 	bl	8001308 <HAL_GetTick>
 8001f70:	4602      	mov	r2, r0
 8001f72:	693b      	ldr	r3, [r7, #16]
 8001f74:	1ad3      	subs	r3, r2, r3
 8001f76:	2b02      	cmp	r3, #2
 8001f78:	d906      	bls.n	8001f88 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001f7a:	2303      	movs	r3, #3
 8001f7c:	e1ca      	b.n	8002314 <HAL_RCC_OscConfig+0x610>
 8001f7e:	bf00      	nop
 8001f80:	40021000 	.word	0x40021000
 8001f84:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001f88:	4b8c      	ldr	r3, [pc, #560]	@ (80021bc <HAL_RCC_OscConfig+0x4b8>)
 8001f8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001f8e:	f003 0302 	and.w	r3, r3, #2
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d1ea      	bne.n	8001f6c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f003 0304 	and.w	r3, r3, #4
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	f000 80a6 	beq.w	80020f0 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001fa8:	4b84      	ldr	r3, [pc, #528]	@ (80021bc <HAL_RCC_OscConfig+0x4b8>)
 8001faa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d101      	bne.n	8001fb8 <HAL_RCC_OscConfig+0x2b4>
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	e000      	b.n	8001fba <HAL_RCC_OscConfig+0x2b6>
 8001fb8:	2300      	movs	r3, #0
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d00d      	beq.n	8001fda <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fbe:	4b7f      	ldr	r3, [pc, #508]	@ (80021bc <HAL_RCC_OscConfig+0x4b8>)
 8001fc0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fc2:	4a7e      	ldr	r2, [pc, #504]	@ (80021bc <HAL_RCC_OscConfig+0x4b8>)
 8001fc4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001fc8:	6593      	str	r3, [r2, #88]	@ 0x58
 8001fca:	4b7c      	ldr	r3, [pc, #496]	@ (80021bc <HAL_RCC_OscConfig+0x4b8>)
 8001fcc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fd2:	60fb      	str	r3, [r7, #12]
 8001fd4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001fda:	4b79      	ldr	r3, [pc, #484]	@ (80021c0 <HAL_RCC_OscConfig+0x4bc>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d118      	bne.n	8002018 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001fe6:	4b76      	ldr	r3, [pc, #472]	@ (80021c0 <HAL_RCC_OscConfig+0x4bc>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	4a75      	ldr	r2, [pc, #468]	@ (80021c0 <HAL_RCC_OscConfig+0x4bc>)
 8001fec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ff0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ff2:	f7ff f989 	bl	8001308 <HAL_GetTick>
 8001ff6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ff8:	e008      	b.n	800200c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ffa:	f7ff f985 	bl	8001308 <HAL_GetTick>
 8001ffe:	4602      	mov	r2, r0
 8002000:	693b      	ldr	r3, [r7, #16]
 8002002:	1ad3      	subs	r3, r2, r3
 8002004:	2b02      	cmp	r3, #2
 8002006:	d901      	bls.n	800200c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002008:	2303      	movs	r3, #3
 800200a:	e183      	b.n	8002314 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800200c:	4b6c      	ldr	r3, [pc, #432]	@ (80021c0 <HAL_RCC_OscConfig+0x4bc>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002014:	2b00      	cmp	r3, #0
 8002016:	d0f0      	beq.n	8001ffa <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	689b      	ldr	r3, [r3, #8]
 800201c:	2b01      	cmp	r3, #1
 800201e:	d108      	bne.n	8002032 <HAL_RCC_OscConfig+0x32e>
 8002020:	4b66      	ldr	r3, [pc, #408]	@ (80021bc <HAL_RCC_OscConfig+0x4b8>)
 8002022:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002026:	4a65      	ldr	r2, [pc, #404]	@ (80021bc <HAL_RCC_OscConfig+0x4b8>)
 8002028:	f043 0301 	orr.w	r3, r3, #1
 800202c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002030:	e024      	b.n	800207c <HAL_RCC_OscConfig+0x378>
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	689b      	ldr	r3, [r3, #8]
 8002036:	2b05      	cmp	r3, #5
 8002038:	d110      	bne.n	800205c <HAL_RCC_OscConfig+0x358>
 800203a:	4b60      	ldr	r3, [pc, #384]	@ (80021bc <HAL_RCC_OscConfig+0x4b8>)
 800203c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002040:	4a5e      	ldr	r2, [pc, #376]	@ (80021bc <HAL_RCC_OscConfig+0x4b8>)
 8002042:	f043 0304 	orr.w	r3, r3, #4
 8002046:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800204a:	4b5c      	ldr	r3, [pc, #368]	@ (80021bc <HAL_RCC_OscConfig+0x4b8>)
 800204c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002050:	4a5a      	ldr	r2, [pc, #360]	@ (80021bc <HAL_RCC_OscConfig+0x4b8>)
 8002052:	f043 0301 	orr.w	r3, r3, #1
 8002056:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800205a:	e00f      	b.n	800207c <HAL_RCC_OscConfig+0x378>
 800205c:	4b57      	ldr	r3, [pc, #348]	@ (80021bc <HAL_RCC_OscConfig+0x4b8>)
 800205e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002062:	4a56      	ldr	r2, [pc, #344]	@ (80021bc <HAL_RCC_OscConfig+0x4b8>)
 8002064:	f023 0301 	bic.w	r3, r3, #1
 8002068:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800206c:	4b53      	ldr	r3, [pc, #332]	@ (80021bc <HAL_RCC_OscConfig+0x4b8>)
 800206e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002072:	4a52      	ldr	r2, [pc, #328]	@ (80021bc <HAL_RCC_OscConfig+0x4b8>)
 8002074:	f023 0304 	bic.w	r3, r3, #4
 8002078:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	689b      	ldr	r3, [r3, #8]
 8002080:	2b00      	cmp	r3, #0
 8002082:	d016      	beq.n	80020b2 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002084:	f7ff f940 	bl	8001308 <HAL_GetTick>
 8002088:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800208a:	e00a      	b.n	80020a2 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800208c:	f7ff f93c 	bl	8001308 <HAL_GetTick>
 8002090:	4602      	mov	r2, r0
 8002092:	693b      	ldr	r3, [r7, #16]
 8002094:	1ad3      	subs	r3, r2, r3
 8002096:	f241 3288 	movw	r2, #5000	@ 0x1388
 800209a:	4293      	cmp	r3, r2
 800209c:	d901      	bls.n	80020a2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800209e:	2303      	movs	r3, #3
 80020a0:	e138      	b.n	8002314 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020a2:	4b46      	ldr	r3, [pc, #280]	@ (80021bc <HAL_RCC_OscConfig+0x4b8>)
 80020a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020a8:	f003 0302 	and.w	r3, r3, #2
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d0ed      	beq.n	800208c <HAL_RCC_OscConfig+0x388>
 80020b0:	e015      	b.n	80020de <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020b2:	f7ff f929 	bl	8001308 <HAL_GetTick>
 80020b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80020b8:	e00a      	b.n	80020d0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020ba:	f7ff f925 	bl	8001308 <HAL_GetTick>
 80020be:	4602      	mov	r2, r0
 80020c0:	693b      	ldr	r3, [r7, #16]
 80020c2:	1ad3      	subs	r3, r2, r3
 80020c4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80020c8:	4293      	cmp	r3, r2
 80020ca:	d901      	bls.n	80020d0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80020cc:	2303      	movs	r3, #3
 80020ce:	e121      	b.n	8002314 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80020d0:	4b3a      	ldr	r3, [pc, #232]	@ (80021bc <HAL_RCC_OscConfig+0x4b8>)
 80020d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020d6:	f003 0302 	and.w	r3, r3, #2
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d1ed      	bne.n	80020ba <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80020de:	7ffb      	ldrb	r3, [r7, #31]
 80020e0:	2b01      	cmp	r3, #1
 80020e2:	d105      	bne.n	80020f0 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020e4:	4b35      	ldr	r3, [pc, #212]	@ (80021bc <HAL_RCC_OscConfig+0x4b8>)
 80020e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020e8:	4a34      	ldr	r2, [pc, #208]	@ (80021bc <HAL_RCC_OscConfig+0x4b8>)
 80020ea:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80020ee:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f003 0320 	and.w	r3, r3, #32
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d03c      	beq.n	8002176 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	699b      	ldr	r3, [r3, #24]
 8002100:	2b00      	cmp	r3, #0
 8002102:	d01c      	beq.n	800213e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002104:	4b2d      	ldr	r3, [pc, #180]	@ (80021bc <HAL_RCC_OscConfig+0x4b8>)
 8002106:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800210a:	4a2c      	ldr	r2, [pc, #176]	@ (80021bc <HAL_RCC_OscConfig+0x4b8>)
 800210c:	f043 0301 	orr.w	r3, r3, #1
 8002110:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002114:	f7ff f8f8 	bl	8001308 <HAL_GetTick>
 8002118:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800211a:	e008      	b.n	800212e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800211c:	f7ff f8f4 	bl	8001308 <HAL_GetTick>
 8002120:	4602      	mov	r2, r0
 8002122:	693b      	ldr	r3, [r7, #16]
 8002124:	1ad3      	subs	r3, r2, r3
 8002126:	2b02      	cmp	r3, #2
 8002128:	d901      	bls.n	800212e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800212a:	2303      	movs	r3, #3
 800212c:	e0f2      	b.n	8002314 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800212e:	4b23      	ldr	r3, [pc, #140]	@ (80021bc <HAL_RCC_OscConfig+0x4b8>)
 8002130:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002134:	f003 0302 	and.w	r3, r3, #2
 8002138:	2b00      	cmp	r3, #0
 800213a:	d0ef      	beq.n	800211c <HAL_RCC_OscConfig+0x418>
 800213c:	e01b      	b.n	8002176 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800213e:	4b1f      	ldr	r3, [pc, #124]	@ (80021bc <HAL_RCC_OscConfig+0x4b8>)
 8002140:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002144:	4a1d      	ldr	r2, [pc, #116]	@ (80021bc <HAL_RCC_OscConfig+0x4b8>)
 8002146:	f023 0301 	bic.w	r3, r3, #1
 800214a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800214e:	f7ff f8db 	bl	8001308 <HAL_GetTick>
 8002152:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002154:	e008      	b.n	8002168 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002156:	f7ff f8d7 	bl	8001308 <HAL_GetTick>
 800215a:	4602      	mov	r2, r0
 800215c:	693b      	ldr	r3, [r7, #16]
 800215e:	1ad3      	subs	r3, r2, r3
 8002160:	2b02      	cmp	r3, #2
 8002162:	d901      	bls.n	8002168 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002164:	2303      	movs	r3, #3
 8002166:	e0d5      	b.n	8002314 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002168:	4b14      	ldr	r3, [pc, #80]	@ (80021bc <HAL_RCC_OscConfig+0x4b8>)
 800216a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800216e:	f003 0302 	and.w	r3, r3, #2
 8002172:	2b00      	cmp	r3, #0
 8002174:	d1ef      	bne.n	8002156 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	69db      	ldr	r3, [r3, #28]
 800217a:	2b00      	cmp	r3, #0
 800217c:	f000 80c9 	beq.w	8002312 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002180:	4b0e      	ldr	r3, [pc, #56]	@ (80021bc <HAL_RCC_OscConfig+0x4b8>)
 8002182:	689b      	ldr	r3, [r3, #8]
 8002184:	f003 030c 	and.w	r3, r3, #12
 8002188:	2b0c      	cmp	r3, #12
 800218a:	f000 8083 	beq.w	8002294 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	69db      	ldr	r3, [r3, #28]
 8002192:	2b02      	cmp	r3, #2
 8002194:	d15e      	bne.n	8002254 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002196:	4b09      	ldr	r3, [pc, #36]	@ (80021bc <HAL_RCC_OscConfig+0x4b8>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4a08      	ldr	r2, [pc, #32]	@ (80021bc <HAL_RCC_OscConfig+0x4b8>)
 800219c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80021a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021a2:	f7ff f8b1 	bl	8001308 <HAL_GetTick>
 80021a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80021a8:	e00c      	b.n	80021c4 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021aa:	f7ff f8ad 	bl	8001308 <HAL_GetTick>
 80021ae:	4602      	mov	r2, r0
 80021b0:	693b      	ldr	r3, [r7, #16]
 80021b2:	1ad3      	subs	r3, r2, r3
 80021b4:	2b02      	cmp	r3, #2
 80021b6:	d905      	bls.n	80021c4 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80021b8:	2303      	movs	r3, #3
 80021ba:	e0ab      	b.n	8002314 <HAL_RCC_OscConfig+0x610>
 80021bc:	40021000 	.word	0x40021000
 80021c0:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80021c4:	4b55      	ldr	r3, [pc, #340]	@ (800231c <HAL_RCC_OscConfig+0x618>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d1ec      	bne.n	80021aa <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80021d0:	4b52      	ldr	r3, [pc, #328]	@ (800231c <HAL_RCC_OscConfig+0x618>)
 80021d2:	68da      	ldr	r2, [r3, #12]
 80021d4:	4b52      	ldr	r3, [pc, #328]	@ (8002320 <HAL_RCC_OscConfig+0x61c>)
 80021d6:	4013      	ands	r3, r2
 80021d8:	687a      	ldr	r2, [r7, #4]
 80021da:	6a11      	ldr	r1, [r2, #32]
 80021dc:	687a      	ldr	r2, [r7, #4]
 80021de:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80021e0:	3a01      	subs	r2, #1
 80021e2:	0112      	lsls	r2, r2, #4
 80021e4:	4311      	orrs	r1, r2
 80021e6:	687a      	ldr	r2, [r7, #4]
 80021e8:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80021ea:	0212      	lsls	r2, r2, #8
 80021ec:	4311      	orrs	r1, r2
 80021ee:	687a      	ldr	r2, [r7, #4]
 80021f0:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80021f2:	0852      	lsrs	r2, r2, #1
 80021f4:	3a01      	subs	r2, #1
 80021f6:	0552      	lsls	r2, r2, #21
 80021f8:	4311      	orrs	r1, r2
 80021fa:	687a      	ldr	r2, [r7, #4]
 80021fc:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80021fe:	0852      	lsrs	r2, r2, #1
 8002200:	3a01      	subs	r2, #1
 8002202:	0652      	lsls	r2, r2, #25
 8002204:	4311      	orrs	r1, r2
 8002206:	687a      	ldr	r2, [r7, #4]
 8002208:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800220a:	06d2      	lsls	r2, r2, #27
 800220c:	430a      	orrs	r2, r1
 800220e:	4943      	ldr	r1, [pc, #268]	@ (800231c <HAL_RCC_OscConfig+0x618>)
 8002210:	4313      	orrs	r3, r2
 8002212:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002214:	4b41      	ldr	r3, [pc, #260]	@ (800231c <HAL_RCC_OscConfig+0x618>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4a40      	ldr	r2, [pc, #256]	@ (800231c <HAL_RCC_OscConfig+0x618>)
 800221a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800221e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002220:	4b3e      	ldr	r3, [pc, #248]	@ (800231c <HAL_RCC_OscConfig+0x618>)
 8002222:	68db      	ldr	r3, [r3, #12]
 8002224:	4a3d      	ldr	r2, [pc, #244]	@ (800231c <HAL_RCC_OscConfig+0x618>)
 8002226:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800222a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800222c:	f7ff f86c 	bl	8001308 <HAL_GetTick>
 8002230:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002232:	e008      	b.n	8002246 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002234:	f7ff f868 	bl	8001308 <HAL_GetTick>
 8002238:	4602      	mov	r2, r0
 800223a:	693b      	ldr	r3, [r7, #16]
 800223c:	1ad3      	subs	r3, r2, r3
 800223e:	2b02      	cmp	r3, #2
 8002240:	d901      	bls.n	8002246 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8002242:	2303      	movs	r3, #3
 8002244:	e066      	b.n	8002314 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002246:	4b35      	ldr	r3, [pc, #212]	@ (800231c <HAL_RCC_OscConfig+0x618>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800224e:	2b00      	cmp	r3, #0
 8002250:	d0f0      	beq.n	8002234 <HAL_RCC_OscConfig+0x530>
 8002252:	e05e      	b.n	8002312 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002254:	4b31      	ldr	r3, [pc, #196]	@ (800231c <HAL_RCC_OscConfig+0x618>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4a30      	ldr	r2, [pc, #192]	@ (800231c <HAL_RCC_OscConfig+0x618>)
 800225a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800225e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002260:	f7ff f852 	bl	8001308 <HAL_GetTick>
 8002264:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002266:	e008      	b.n	800227a <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002268:	f7ff f84e 	bl	8001308 <HAL_GetTick>
 800226c:	4602      	mov	r2, r0
 800226e:	693b      	ldr	r3, [r7, #16]
 8002270:	1ad3      	subs	r3, r2, r3
 8002272:	2b02      	cmp	r3, #2
 8002274:	d901      	bls.n	800227a <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8002276:	2303      	movs	r3, #3
 8002278:	e04c      	b.n	8002314 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800227a:	4b28      	ldr	r3, [pc, #160]	@ (800231c <HAL_RCC_OscConfig+0x618>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002282:	2b00      	cmp	r3, #0
 8002284:	d1f0      	bne.n	8002268 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002286:	4b25      	ldr	r3, [pc, #148]	@ (800231c <HAL_RCC_OscConfig+0x618>)
 8002288:	68da      	ldr	r2, [r3, #12]
 800228a:	4924      	ldr	r1, [pc, #144]	@ (800231c <HAL_RCC_OscConfig+0x618>)
 800228c:	4b25      	ldr	r3, [pc, #148]	@ (8002324 <HAL_RCC_OscConfig+0x620>)
 800228e:	4013      	ands	r3, r2
 8002290:	60cb      	str	r3, [r1, #12]
 8002292:	e03e      	b.n	8002312 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	69db      	ldr	r3, [r3, #28]
 8002298:	2b01      	cmp	r3, #1
 800229a:	d101      	bne.n	80022a0 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 800229c:	2301      	movs	r3, #1
 800229e:	e039      	b.n	8002314 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80022a0:	4b1e      	ldr	r3, [pc, #120]	@ (800231c <HAL_RCC_OscConfig+0x618>)
 80022a2:	68db      	ldr	r3, [r3, #12]
 80022a4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022a6:	697b      	ldr	r3, [r7, #20]
 80022a8:	f003 0203 	and.w	r2, r3, #3
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6a1b      	ldr	r3, [r3, #32]
 80022b0:	429a      	cmp	r2, r3
 80022b2:	d12c      	bne.n	800230e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80022b4:	697b      	ldr	r3, [r7, #20]
 80022b6:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022be:	3b01      	subs	r3, #1
 80022c0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022c2:	429a      	cmp	r2, r3
 80022c4:	d123      	bne.n	800230e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80022c6:	697b      	ldr	r3, [r7, #20]
 80022c8:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022d0:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80022d2:	429a      	cmp	r2, r3
 80022d4:	d11b      	bne.n	800230e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80022d6:	697b      	ldr	r3, [r7, #20]
 80022d8:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022e0:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80022e2:	429a      	cmp	r2, r3
 80022e4:	d113      	bne.n	800230e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80022e6:	697b      	ldr	r3, [r7, #20]
 80022e8:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022f0:	085b      	lsrs	r3, r3, #1
 80022f2:	3b01      	subs	r3, #1
 80022f4:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80022f6:	429a      	cmp	r2, r3
 80022f8:	d109      	bne.n	800230e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80022fa:	697b      	ldr	r3, [r7, #20]
 80022fc:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002304:	085b      	lsrs	r3, r3, #1
 8002306:	3b01      	subs	r3, #1
 8002308:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800230a:	429a      	cmp	r2, r3
 800230c:	d001      	beq.n	8002312 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800230e:	2301      	movs	r3, #1
 8002310:	e000      	b.n	8002314 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8002312:	2300      	movs	r3, #0
}
 8002314:	4618      	mov	r0, r3
 8002316:	3720      	adds	r7, #32
 8002318:	46bd      	mov	sp, r7
 800231a:	bd80      	pop	{r7, pc}
 800231c:	40021000 	.word	0x40021000
 8002320:	019f800c 	.word	0x019f800c
 8002324:	feeefffc 	.word	0xfeeefffc

08002328 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b086      	sub	sp, #24
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
 8002330:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002332:	2300      	movs	r3, #0
 8002334:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	2b00      	cmp	r3, #0
 800233a:	d101      	bne.n	8002340 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800233c:	2301      	movs	r3, #1
 800233e:	e11e      	b.n	800257e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002340:	4b91      	ldr	r3, [pc, #580]	@ (8002588 <HAL_RCC_ClockConfig+0x260>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f003 030f 	and.w	r3, r3, #15
 8002348:	683a      	ldr	r2, [r7, #0]
 800234a:	429a      	cmp	r2, r3
 800234c:	d910      	bls.n	8002370 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800234e:	4b8e      	ldr	r3, [pc, #568]	@ (8002588 <HAL_RCC_ClockConfig+0x260>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f023 020f 	bic.w	r2, r3, #15
 8002356:	498c      	ldr	r1, [pc, #560]	@ (8002588 <HAL_RCC_ClockConfig+0x260>)
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	4313      	orrs	r3, r2
 800235c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800235e:	4b8a      	ldr	r3, [pc, #552]	@ (8002588 <HAL_RCC_ClockConfig+0x260>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f003 030f 	and.w	r3, r3, #15
 8002366:	683a      	ldr	r2, [r7, #0]
 8002368:	429a      	cmp	r2, r3
 800236a:	d001      	beq.n	8002370 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800236c:	2301      	movs	r3, #1
 800236e:	e106      	b.n	800257e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f003 0301 	and.w	r3, r3, #1
 8002378:	2b00      	cmp	r3, #0
 800237a:	d073      	beq.n	8002464 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	2b03      	cmp	r3, #3
 8002382:	d129      	bne.n	80023d8 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002384:	4b81      	ldr	r3, [pc, #516]	@ (800258c <HAL_RCC_ClockConfig+0x264>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800238c:	2b00      	cmp	r3, #0
 800238e:	d101      	bne.n	8002394 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002390:	2301      	movs	r3, #1
 8002392:	e0f4      	b.n	800257e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002394:	f000 f966 	bl	8002664 <RCC_GetSysClockFreqFromPLLSource>
 8002398:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800239a:	693b      	ldr	r3, [r7, #16]
 800239c:	4a7c      	ldr	r2, [pc, #496]	@ (8002590 <HAL_RCC_ClockConfig+0x268>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d93f      	bls.n	8002422 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80023a2:	4b7a      	ldr	r3, [pc, #488]	@ (800258c <HAL_RCC_ClockConfig+0x264>)
 80023a4:	689b      	ldr	r3, [r3, #8]
 80023a6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d009      	beq.n	80023c2 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d033      	beq.n	8002422 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d12f      	bne.n	8002422 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80023c2:	4b72      	ldr	r3, [pc, #456]	@ (800258c <HAL_RCC_ClockConfig+0x264>)
 80023c4:	689b      	ldr	r3, [r3, #8]
 80023c6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80023ca:	4a70      	ldr	r2, [pc, #448]	@ (800258c <HAL_RCC_ClockConfig+0x264>)
 80023cc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80023d0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80023d2:	2380      	movs	r3, #128	@ 0x80
 80023d4:	617b      	str	r3, [r7, #20]
 80023d6:	e024      	b.n	8002422 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	2b02      	cmp	r3, #2
 80023de:	d107      	bne.n	80023f0 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80023e0:	4b6a      	ldr	r3, [pc, #424]	@ (800258c <HAL_RCC_ClockConfig+0x264>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d109      	bne.n	8002400 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80023ec:	2301      	movs	r3, #1
 80023ee:	e0c6      	b.n	800257e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80023f0:	4b66      	ldr	r3, [pc, #408]	@ (800258c <HAL_RCC_ClockConfig+0x264>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d101      	bne.n	8002400 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80023fc:	2301      	movs	r3, #1
 80023fe:	e0be      	b.n	800257e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002400:	f000 f8ce 	bl	80025a0 <HAL_RCC_GetSysClockFreq>
 8002404:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8002406:	693b      	ldr	r3, [r7, #16]
 8002408:	4a61      	ldr	r2, [pc, #388]	@ (8002590 <HAL_RCC_ClockConfig+0x268>)
 800240a:	4293      	cmp	r3, r2
 800240c:	d909      	bls.n	8002422 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800240e:	4b5f      	ldr	r3, [pc, #380]	@ (800258c <HAL_RCC_ClockConfig+0x264>)
 8002410:	689b      	ldr	r3, [r3, #8]
 8002412:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002416:	4a5d      	ldr	r2, [pc, #372]	@ (800258c <HAL_RCC_ClockConfig+0x264>)
 8002418:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800241c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800241e:	2380      	movs	r3, #128	@ 0x80
 8002420:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002422:	4b5a      	ldr	r3, [pc, #360]	@ (800258c <HAL_RCC_ClockConfig+0x264>)
 8002424:	689b      	ldr	r3, [r3, #8]
 8002426:	f023 0203 	bic.w	r2, r3, #3
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	4957      	ldr	r1, [pc, #348]	@ (800258c <HAL_RCC_ClockConfig+0x264>)
 8002430:	4313      	orrs	r3, r2
 8002432:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002434:	f7fe ff68 	bl	8001308 <HAL_GetTick>
 8002438:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800243a:	e00a      	b.n	8002452 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800243c:	f7fe ff64 	bl	8001308 <HAL_GetTick>
 8002440:	4602      	mov	r2, r0
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	1ad3      	subs	r3, r2, r3
 8002446:	f241 3288 	movw	r2, #5000	@ 0x1388
 800244a:	4293      	cmp	r3, r2
 800244c:	d901      	bls.n	8002452 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800244e:	2303      	movs	r3, #3
 8002450:	e095      	b.n	800257e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002452:	4b4e      	ldr	r3, [pc, #312]	@ (800258c <HAL_RCC_ClockConfig+0x264>)
 8002454:	689b      	ldr	r3, [r3, #8]
 8002456:	f003 020c 	and.w	r2, r3, #12
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	685b      	ldr	r3, [r3, #4]
 800245e:	009b      	lsls	r3, r3, #2
 8002460:	429a      	cmp	r2, r3
 8002462:	d1eb      	bne.n	800243c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f003 0302 	and.w	r3, r3, #2
 800246c:	2b00      	cmp	r3, #0
 800246e:	d023      	beq.n	80024b8 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f003 0304 	and.w	r3, r3, #4
 8002478:	2b00      	cmp	r3, #0
 800247a:	d005      	beq.n	8002488 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800247c:	4b43      	ldr	r3, [pc, #268]	@ (800258c <HAL_RCC_ClockConfig+0x264>)
 800247e:	689b      	ldr	r3, [r3, #8]
 8002480:	4a42      	ldr	r2, [pc, #264]	@ (800258c <HAL_RCC_ClockConfig+0x264>)
 8002482:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002486:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f003 0308 	and.w	r3, r3, #8
 8002490:	2b00      	cmp	r3, #0
 8002492:	d007      	beq.n	80024a4 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002494:	4b3d      	ldr	r3, [pc, #244]	@ (800258c <HAL_RCC_ClockConfig+0x264>)
 8002496:	689b      	ldr	r3, [r3, #8]
 8002498:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800249c:	4a3b      	ldr	r2, [pc, #236]	@ (800258c <HAL_RCC_ClockConfig+0x264>)
 800249e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80024a2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024a4:	4b39      	ldr	r3, [pc, #228]	@ (800258c <HAL_RCC_ClockConfig+0x264>)
 80024a6:	689b      	ldr	r3, [r3, #8]
 80024a8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	689b      	ldr	r3, [r3, #8]
 80024b0:	4936      	ldr	r1, [pc, #216]	@ (800258c <HAL_RCC_ClockConfig+0x264>)
 80024b2:	4313      	orrs	r3, r2
 80024b4:	608b      	str	r3, [r1, #8]
 80024b6:	e008      	b.n	80024ca <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80024b8:	697b      	ldr	r3, [r7, #20]
 80024ba:	2b80      	cmp	r3, #128	@ 0x80
 80024bc:	d105      	bne.n	80024ca <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80024be:	4b33      	ldr	r3, [pc, #204]	@ (800258c <HAL_RCC_ClockConfig+0x264>)
 80024c0:	689b      	ldr	r3, [r3, #8]
 80024c2:	4a32      	ldr	r2, [pc, #200]	@ (800258c <HAL_RCC_ClockConfig+0x264>)
 80024c4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80024c8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80024ca:	4b2f      	ldr	r3, [pc, #188]	@ (8002588 <HAL_RCC_ClockConfig+0x260>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f003 030f 	and.w	r3, r3, #15
 80024d2:	683a      	ldr	r2, [r7, #0]
 80024d4:	429a      	cmp	r2, r3
 80024d6:	d21d      	bcs.n	8002514 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024d8:	4b2b      	ldr	r3, [pc, #172]	@ (8002588 <HAL_RCC_ClockConfig+0x260>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f023 020f 	bic.w	r2, r3, #15
 80024e0:	4929      	ldr	r1, [pc, #164]	@ (8002588 <HAL_RCC_ClockConfig+0x260>)
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	4313      	orrs	r3, r2
 80024e6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80024e8:	f7fe ff0e 	bl	8001308 <HAL_GetTick>
 80024ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024ee:	e00a      	b.n	8002506 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024f0:	f7fe ff0a 	bl	8001308 <HAL_GetTick>
 80024f4:	4602      	mov	r2, r0
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	1ad3      	subs	r3, r2, r3
 80024fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80024fe:	4293      	cmp	r3, r2
 8002500:	d901      	bls.n	8002506 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8002502:	2303      	movs	r3, #3
 8002504:	e03b      	b.n	800257e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002506:	4b20      	ldr	r3, [pc, #128]	@ (8002588 <HAL_RCC_ClockConfig+0x260>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f003 030f 	and.w	r3, r3, #15
 800250e:	683a      	ldr	r2, [r7, #0]
 8002510:	429a      	cmp	r2, r3
 8002512:	d1ed      	bne.n	80024f0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f003 0304 	and.w	r3, r3, #4
 800251c:	2b00      	cmp	r3, #0
 800251e:	d008      	beq.n	8002532 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002520:	4b1a      	ldr	r3, [pc, #104]	@ (800258c <HAL_RCC_ClockConfig+0x264>)
 8002522:	689b      	ldr	r3, [r3, #8]
 8002524:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	68db      	ldr	r3, [r3, #12]
 800252c:	4917      	ldr	r1, [pc, #92]	@ (800258c <HAL_RCC_ClockConfig+0x264>)
 800252e:	4313      	orrs	r3, r2
 8002530:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f003 0308 	and.w	r3, r3, #8
 800253a:	2b00      	cmp	r3, #0
 800253c:	d009      	beq.n	8002552 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800253e:	4b13      	ldr	r3, [pc, #76]	@ (800258c <HAL_RCC_ClockConfig+0x264>)
 8002540:	689b      	ldr	r3, [r3, #8]
 8002542:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	691b      	ldr	r3, [r3, #16]
 800254a:	00db      	lsls	r3, r3, #3
 800254c:	490f      	ldr	r1, [pc, #60]	@ (800258c <HAL_RCC_ClockConfig+0x264>)
 800254e:	4313      	orrs	r3, r2
 8002550:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002552:	f000 f825 	bl	80025a0 <HAL_RCC_GetSysClockFreq>
 8002556:	4602      	mov	r2, r0
 8002558:	4b0c      	ldr	r3, [pc, #48]	@ (800258c <HAL_RCC_ClockConfig+0x264>)
 800255a:	689b      	ldr	r3, [r3, #8]
 800255c:	091b      	lsrs	r3, r3, #4
 800255e:	f003 030f 	and.w	r3, r3, #15
 8002562:	490c      	ldr	r1, [pc, #48]	@ (8002594 <HAL_RCC_ClockConfig+0x26c>)
 8002564:	5ccb      	ldrb	r3, [r1, r3]
 8002566:	f003 031f 	and.w	r3, r3, #31
 800256a:	fa22 f303 	lsr.w	r3, r2, r3
 800256e:	4a0a      	ldr	r2, [pc, #40]	@ (8002598 <HAL_RCC_ClockConfig+0x270>)
 8002570:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002572:	4b0a      	ldr	r3, [pc, #40]	@ (800259c <HAL_RCC_ClockConfig+0x274>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	4618      	mov	r0, r3
 8002578:	f7fe fe7a 	bl	8001270 <HAL_InitTick>
 800257c:	4603      	mov	r3, r0
}
 800257e:	4618      	mov	r0, r3
 8002580:	3718      	adds	r7, #24
 8002582:	46bd      	mov	sp, r7
 8002584:	bd80      	pop	{r7, pc}
 8002586:	bf00      	nop
 8002588:	40022000 	.word	0x40022000
 800258c:	40021000 	.word	0x40021000
 8002590:	04c4b400 	.word	0x04c4b400
 8002594:	08004100 	.word	0x08004100
 8002598:	20000000 	.word	0x20000000
 800259c:	20000004 	.word	0x20000004

080025a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025a0:	b480      	push	{r7}
 80025a2:	b087      	sub	sp, #28
 80025a4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80025a6:	4b2c      	ldr	r3, [pc, #176]	@ (8002658 <HAL_RCC_GetSysClockFreq+0xb8>)
 80025a8:	689b      	ldr	r3, [r3, #8]
 80025aa:	f003 030c 	and.w	r3, r3, #12
 80025ae:	2b04      	cmp	r3, #4
 80025b0:	d102      	bne.n	80025b8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80025b2:	4b2a      	ldr	r3, [pc, #168]	@ (800265c <HAL_RCC_GetSysClockFreq+0xbc>)
 80025b4:	613b      	str	r3, [r7, #16]
 80025b6:	e047      	b.n	8002648 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80025b8:	4b27      	ldr	r3, [pc, #156]	@ (8002658 <HAL_RCC_GetSysClockFreq+0xb8>)
 80025ba:	689b      	ldr	r3, [r3, #8]
 80025bc:	f003 030c 	and.w	r3, r3, #12
 80025c0:	2b08      	cmp	r3, #8
 80025c2:	d102      	bne.n	80025ca <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80025c4:	4b26      	ldr	r3, [pc, #152]	@ (8002660 <HAL_RCC_GetSysClockFreq+0xc0>)
 80025c6:	613b      	str	r3, [r7, #16]
 80025c8:	e03e      	b.n	8002648 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80025ca:	4b23      	ldr	r3, [pc, #140]	@ (8002658 <HAL_RCC_GetSysClockFreq+0xb8>)
 80025cc:	689b      	ldr	r3, [r3, #8]
 80025ce:	f003 030c 	and.w	r3, r3, #12
 80025d2:	2b0c      	cmp	r3, #12
 80025d4:	d136      	bne.n	8002644 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80025d6:	4b20      	ldr	r3, [pc, #128]	@ (8002658 <HAL_RCC_GetSysClockFreq+0xb8>)
 80025d8:	68db      	ldr	r3, [r3, #12]
 80025da:	f003 0303 	and.w	r3, r3, #3
 80025de:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80025e0:	4b1d      	ldr	r3, [pc, #116]	@ (8002658 <HAL_RCC_GetSysClockFreq+0xb8>)
 80025e2:	68db      	ldr	r3, [r3, #12]
 80025e4:	091b      	lsrs	r3, r3, #4
 80025e6:	f003 030f 	and.w	r3, r3, #15
 80025ea:	3301      	adds	r3, #1
 80025ec:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	2b03      	cmp	r3, #3
 80025f2:	d10c      	bne.n	800260e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80025f4:	4a1a      	ldr	r2, [pc, #104]	@ (8002660 <HAL_RCC_GetSysClockFreq+0xc0>)
 80025f6:	68bb      	ldr	r3, [r7, #8]
 80025f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80025fc:	4a16      	ldr	r2, [pc, #88]	@ (8002658 <HAL_RCC_GetSysClockFreq+0xb8>)
 80025fe:	68d2      	ldr	r2, [r2, #12]
 8002600:	0a12      	lsrs	r2, r2, #8
 8002602:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002606:	fb02 f303 	mul.w	r3, r2, r3
 800260a:	617b      	str	r3, [r7, #20]
      break;
 800260c:	e00c      	b.n	8002628 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800260e:	4a13      	ldr	r2, [pc, #76]	@ (800265c <HAL_RCC_GetSysClockFreq+0xbc>)
 8002610:	68bb      	ldr	r3, [r7, #8]
 8002612:	fbb2 f3f3 	udiv	r3, r2, r3
 8002616:	4a10      	ldr	r2, [pc, #64]	@ (8002658 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002618:	68d2      	ldr	r2, [r2, #12]
 800261a:	0a12      	lsrs	r2, r2, #8
 800261c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002620:	fb02 f303 	mul.w	r3, r2, r3
 8002624:	617b      	str	r3, [r7, #20]
      break;
 8002626:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002628:	4b0b      	ldr	r3, [pc, #44]	@ (8002658 <HAL_RCC_GetSysClockFreq+0xb8>)
 800262a:	68db      	ldr	r3, [r3, #12]
 800262c:	0e5b      	lsrs	r3, r3, #25
 800262e:	f003 0303 	and.w	r3, r3, #3
 8002632:	3301      	adds	r3, #1
 8002634:	005b      	lsls	r3, r3, #1
 8002636:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002638:	697a      	ldr	r2, [r7, #20]
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002640:	613b      	str	r3, [r7, #16]
 8002642:	e001      	b.n	8002648 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002644:	2300      	movs	r3, #0
 8002646:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002648:	693b      	ldr	r3, [r7, #16]
}
 800264a:	4618      	mov	r0, r3
 800264c:	371c      	adds	r7, #28
 800264e:	46bd      	mov	sp, r7
 8002650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002654:	4770      	bx	lr
 8002656:	bf00      	nop
 8002658:	40021000 	.word	0x40021000
 800265c:	00f42400 	.word	0x00f42400
 8002660:	007a1200 	.word	0x007a1200

08002664 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002664:	b480      	push	{r7}
 8002666:	b087      	sub	sp, #28
 8002668:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800266a:	4b1e      	ldr	r3, [pc, #120]	@ (80026e4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800266c:	68db      	ldr	r3, [r3, #12]
 800266e:	f003 0303 	and.w	r3, r3, #3
 8002672:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002674:	4b1b      	ldr	r3, [pc, #108]	@ (80026e4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002676:	68db      	ldr	r3, [r3, #12]
 8002678:	091b      	lsrs	r3, r3, #4
 800267a:	f003 030f 	and.w	r3, r3, #15
 800267e:	3301      	adds	r3, #1
 8002680:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002682:	693b      	ldr	r3, [r7, #16]
 8002684:	2b03      	cmp	r3, #3
 8002686:	d10c      	bne.n	80026a2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002688:	4a17      	ldr	r2, [pc, #92]	@ (80026e8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002690:	4a14      	ldr	r2, [pc, #80]	@ (80026e4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002692:	68d2      	ldr	r2, [r2, #12]
 8002694:	0a12      	lsrs	r2, r2, #8
 8002696:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800269a:	fb02 f303 	mul.w	r3, r2, r3
 800269e:	617b      	str	r3, [r7, #20]
    break;
 80026a0:	e00c      	b.n	80026bc <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80026a2:	4a12      	ldr	r2, [pc, #72]	@ (80026ec <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80026aa:	4a0e      	ldr	r2, [pc, #56]	@ (80026e4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80026ac:	68d2      	ldr	r2, [r2, #12]
 80026ae:	0a12      	lsrs	r2, r2, #8
 80026b0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80026b4:	fb02 f303 	mul.w	r3, r2, r3
 80026b8:	617b      	str	r3, [r7, #20]
    break;
 80026ba:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80026bc:	4b09      	ldr	r3, [pc, #36]	@ (80026e4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80026be:	68db      	ldr	r3, [r3, #12]
 80026c0:	0e5b      	lsrs	r3, r3, #25
 80026c2:	f003 0303 	and.w	r3, r3, #3
 80026c6:	3301      	adds	r3, #1
 80026c8:	005b      	lsls	r3, r3, #1
 80026ca:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80026cc:	697a      	ldr	r2, [r7, #20]
 80026ce:	68bb      	ldr	r3, [r7, #8]
 80026d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80026d4:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80026d6:	687b      	ldr	r3, [r7, #4]
}
 80026d8:	4618      	mov	r0, r3
 80026da:	371c      	adds	r7, #28
 80026dc:	46bd      	mov	sp, r7
 80026de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e2:	4770      	bx	lr
 80026e4:	40021000 	.word	0x40021000
 80026e8:	007a1200 	.word	0x007a1200
 80026ec:	00f42400 	.word	0x00f42400

080026f0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b084      	sub	sp, #16
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d101      	bne.n	8002702 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80026fe:	2301      	movs	r3, #1
 8002700:	e09d      	b.n	800283e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002706:	2b00      	cmp	r3, #0
 8002708:	d108      	bne.n	800271c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	685b      	ldr	r3, [r3, #4]
 800270e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002712:	d009      	beq.n	8002728 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2200      	movs	r2, #0
 8002718:	61da      	str	r2, [r3, #28]
 800271a:	e005      	b.n	8002728 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2200      	movs	r2, #0
 8002720:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	2200      	movs	r2, #0
 8002726:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2200      	movs	r2, #0
 800272c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002734:	b2db      	uxtb	r3, r3
 8002736:	2b00      	cmp	r3, #0
 8002738:	d106      	bne.n	8002748 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	2200      	movs	r2, #0
 800273e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002742:	6878      	ldr	r0, [r7, #4]
 8002744:	f7fe f920 	bl	8000988 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2202      	movs	r2, #2
 800274c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	681a      	ldr	r2, [r3, #0]
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800275e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	68db      	ldr	r3, [r3, #12]
 8002764:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002768:	d902      	bls.n	8002770 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800276a:	2300      	movs	r3, #0
 800276c:	60fb      	str	r3, [r7, #12]
 800276e:	e002      	b.n	8002776 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002770:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002774:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	68db      	ldr	r3, [r3, #12]
 800277a:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800277e:	d007      	beq.n	8002790 <HAL_SPI_Init+0xa0>
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	68db      	ldr	r3, [r3, #12]
 8002784:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002788:	d002      	beq.n	8002790 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	2200      	movs	r2, #0
 800278e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	689b      	ldr	r3, [r3, #8]
 800279c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80027a0:	431a      	orrs	r2, r3
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	691b      	ldr	r3, [r3, #16]
 80027a6:	f003 0302 	and.w	r3, r3, #2
 80027aa:	431a      	orrs	r2, r3
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	695b      	ldr	r3, [r3, #20]
 80027b0:	f003 0301 	and.w	r3, r3, #1
 80027b4:	431a      	orrs	r2, r3
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	699b      	ldr	r3, [r3, #24]
 80027ba:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80027be:	431a      	orrs	r2, r3
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	69db      	ldr	r3, [r3, #28]
 80027c4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80027c8:	431a      	orrs	r2, r3
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6a1b      	ldr	r3, [r3, #32]
 80027ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80027d2:	ea42 0103 	orr.w	r1, r2, r3
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027da:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	430a      	orrs	r2, r1
 80027e4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	699b      	ldr	r3, [r3, #24]
 80027ea:	0c1b      	lsrs	r3, r3, #16
 80027ec:	f003 0204 	and.w	r2, r3, #4
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027f4:	f003 0310 	and.w	r3, r3, #16
 80027f8:	431a      	orrs	r2, r3
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80027fe:	f003 0308 	and.w	r3, r3, #8
 8002802:	431a      	orrs	r2, r3
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	68db      	ldr	r3, [r3, #12]
 8002808:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800280c:	ea42 0103 	orr.w	r1, r2, r3
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	430a      	orrs	r2, r1
 800281c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	69da      	ldr	r2, [r3, #28]
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800282c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	2200      	movs	r2, #0
 8002832:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2201      	movs	r2, #1
 8002838:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 800283c:	2300      	movs	r3, #0
}
 800283e:	4618      	mov	r0, r3
 8002840:	3710      	adds	r7, #16
 8002842:	46bd      	mov	sp, r7
 8002844:	bd80      	pop	{r7, pc}

08002846 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002846:	b580      	push	{r7, lr}
 8002848:	b088      	sub	sp, #32
 800284a:	af00      	add	r7, sp, #0
 800284c:	60f8      	str	r0, [r7, #12]
 800284e:	60b9      	str	r1, [r7, #8]
 8002850:	603b      	str	r3, [r7, #0]
 8002852:	4613      	mov	r3, r2
 8002854:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002856:	f7fe fd57 	bl	8001308 <HAL_GetTick>
 800285a:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 800285c:	88fb      	ldrh	r3, [r7, #6]
 800285e:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002866:	b2db      	uxtb	r3, r3
 8002868:	2b01      	cmp	r3, #1
 800286a:	d001      	beq.n	8002870 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 800286c:	2302      	movs	r3, #2
 800286e:	e15c      	b.n	8002b2a <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8002870:	68bb      	ldr	r3, [r7, #8]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d002      	beq.n	800287c <HAL_SPI_Transmit+0x36>
 8002876:	88fb      	ldrh	r3, [r7, #6]
 8002878:	2b00      	cmp	r3, #0
 800287a:	d101      	bne.n	8002880 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 800287c:	2301      	movs	r3, #1
 800287e:	e154      	b.n	8002b2a <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002886:	2b01      	cmp	r3, #1
 8002888:	d101      	bne.n	800288e <HAL_SPI_Transmit+0x48>
 800288a:	2302      	movs	r3, #2
 800288c:	e14d      	b.n	8002b2a <HAL_SPI_Transmit+0x2e4>
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	2201      	movs	r2, #1
 8002892:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	2203      	movs	r2, #3
 800289a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	2200      	movs	r2, #0
 80028a2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	68ba      	ldr	r2, [r7, #8]
 80028a8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	88fa      	ldrh	r2, [r7, #6]
 80028ae:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	88fa      	ldrh	r2, [r7, #6]
 80028b4:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	2200      	movs	r2, #0
 80028ba:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	2200      	movs	r2, #0
 80028c0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	2200      	movs	r2, #0
 80028c8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	2200      	movs	r2, #0
 80028d0:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	2200      	movs	r2, #0
 80028d6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	689b      	ldr	r3, [r3, #8]
 80028dc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80028e0:	d10f      	bne.n	8002902 <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	681a      	ldr	r2, [r3, #0]
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80028f0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	681a      	ldr	r2, [r3, #0]
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002900:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800290c:	2b40      	cmp	r3, #64	@ 0x40
 800290e:	d007      	beq.n	8002920 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	681a      	ldr	r2, [r3, #0]
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800291e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	68db      	ldr	r3, [r3, #12]
 8002924:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002928:	d952      	bls.n	80029d0 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d002      	beq.n	8002938 <HAL_SPI_Transmit+0xf2>
 8002932:	8b7b      	ldrh	r3, [r7, #26]
 8002934:	2b01      	cmp	r3, #1
 8002936:	d145      	bne.n	80029c4 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800293c:	881a      	ldrh	r2, [r3, #0]
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002948:	1c9a      	adds	r2, r3, #2
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002952:	b29b      	uxth	r3, r3
 8002954:	3b01      	subs	r3, #1
 8002956:	b29a      	uxth	r2, r3
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800295c:	e032      	b.n	80029c4 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	689b      	ldr	r3, [r3, #8]
 8002964:	f003 0302 	and.w	r3, r3, #2
 8002968:	2b02      	cmp	r3, #2
 800296a:	d112      	bne.n	8002992 <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002970:	881a      	ldrh	r2, [r3, #0]
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800297c:	1c9a      	adds	r2, r3, #2
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002986:	b29b      	uxth	r3, r3
 8002988:	3b01      	subs	r3, #1
 800298a:	b29a      	uxth	r2, r3
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002990:	e018      	b.n	80029c4 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002992:	f7fe fcb9 	bl	8001308 <HAL_GetTick>
 8002996:	4602      	mov	r2, r0
 8002998:	69fb      	ldr	r3, [r7, #28]
 800299a:	1ad3      	subs	r3, r2, r3
 800299c:	683a      	ldr	r2, [r7, #0]
 800299e:	429a      	cmp	r2, r3
 80029a0:	d803      	bhi.n	80029aa <HAL_SPI_Transmit+0x164>
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029a8:	d102      	bne.n	80029b0 <HAL_SPI_Transmit+0x16a>
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d109      	bne.n	80029c4 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	2201      	movs	r2, #1
 80029b4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	2200      	movs	r2, #0
 80029bc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 80029c0:	2303      	movs	r3, #3
 80029c2:	e0b2      	b.n	8002b2a <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80029c8:	b29b      	uxth	r3, r3
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d1c7      	bne.n	800295e <HAL_SPI_Transmit+0x118>
 80029ce:	e083      	b.n	8002ad8 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d002      	beq.n	80029de <HAL_SPI_Transmit+0x198>
 80029d8:	8b7b      	ldrh	r3, [r7, #26]
 80029da:	2b01      	cmp	r3, #1
 80029dc:	d177      	bne.n	8002ace <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80029e2:	b29b      	uxth	r3, r3
 80029e4:	2b01      	cmp	r3, #1
 80029e6:	d912      	bls.n	8002a0e <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029ec:	881a      	ldrh	r2, [r3, #0]
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029f8:	1c9a      	adds	r2, r3, #2
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002a02:	b29b      	uxth	r3, r3
 8002a04:	3b02      	subs	r3, #2
 8002a06:	b29a      	uxth	r2, r3
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002a0c:	e05f      	b.n	8002ace <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	330c      	adds	r3, #12
 8002a18:	7812      	ldrb	r2, [r2, #0]
 8002a1a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a20:	1c5a      	adds	r2, r3, #1
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002a2a:	b29b      	uxth	r3, r3
 8002a2c:	3b01      	subs	r3, #1
 8002a2e:	b29a      	uxth	r2, r3
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8002a34:	e04b      	b.n	8002ace <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	689b      	ldr	r3, [r3, #8]
 8002a3c:	f003 0302 	and.w	r3, r3, #2
 8002a40:	2b02      	cmp	r3, #2
 8002a42:	d12b      	bne.n	8002a9c <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002a48:	b29b      	uxth	r3, r3
 8002a4a:	2b01      	cmp	r3, #1
 8002a4c:	d912      	bls.n	8002a74 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a52:	881a      	ldrh	r2, [r3, #0]
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a5e:	1c9a      	adds	r2, r3, #2
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002a68:	b29b      	uxth	r3, r3
 8002a6a:	3b02      	subs	r3, #2
 8002a6c:	b29a      	uxth	r2, r3
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002a72:	e02c      	b.n	8002ace <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	330c      	adds	r3, #12
 8002a7e:	7812      	ldrb	r2, [r2, #0]
 8002a80:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a86:	1c5a      	adds	r2, r3, #1
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002a90:	b29b      	uxth	r3, r3
 8002a92:	3b01      	subs	r3, #1
 8002a94:	b29a      	uxth	r2, r3
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002a9a:	e018      	b.n	8002ace <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002a9c:	f7fe fc34 	bl	8001308 <HAL_GetTick>
 8002aa0:	4602      	mov	r2, r0
 8002aa2:	69fb      	ldr	r3, [r7, #28]
 8002aa4:	1ad3      	subs	r3, r2, r3
 8002aa6:	683a      	ldr	r2, [r7, #0]
 8002aa8:	429a      	cmp	r2, r3
 8002aaa:	d803      	bhi.n	8002ab4 <HAL_SPI_Transmit+0x26e>
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ab2:	d102      	bne.n	8002aba <HAL_SPI_Transmit+0x274>
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d109      	bne.n	8002ace <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	2201      	movs	r2, #1
 8002abe:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8002aca:	2303      	movs	r3, #3
 8002acc:	e02d      	b.n	8002b2a <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002ad2:	b29b      	uxth	r3, r3
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d1ae      	bne.n	8002a36 <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002ad8:	69fa      	ldr	r2, [r7, #28]
 8002ada:	6839      	ldr	r1, [r7, #0]
 8002adc:	68f8      	ldr	r0, [r7, #12]
 8002ade:	f000 fe15 	bl	800370c <SPI_EndRxTxTransaction>
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d002      	beq.n	8002aee <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	2220      	movs	r2, #32
 8002aec:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	689b      	ldr	r3, [r3, #8]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d10a      	bne.n	8002b0c <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002af6:	2300      	movs	r3, #0
 8002af8:	617b      	str	r3, [r7, #20]
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	68db      	ldr	r3, [r3, #12]
 8002b00:	617b      	str	r3, [r7, #20]
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	689b      	ldr	r3, [r3, #8]
 8002b08:	617b      	str	r3, [r7, #20]
 8002b0a:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	2201      	movs	r2, #1
 8002b10:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	2200      	movs	r2, #0
 8002b18:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d001      	beq.n	8002b28 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 8002b24:	2301      	movs	r3, #1
 8002b26:	e000      	b.n	8002b2a <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 8002b28:	2300      	movs	r3, #0
  }
}
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	3720      	adds	r7, #32
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bd80      	pop	{r7, pc}

08002b32 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b32:	b580      	push	{r7, lr}
 8002b34:	b088      	sub	sp, #32
 8002b36:	af02      	add	r7, sp, #8
 8002b38:	60f8      	str	r0, [r7, #12]
 8002b3a:	60b9      	str	r1, [r7, #8]
 8002b3c:	603b      	str	r3, [r7, #0]
 8002b3e:	4613      	mov	r3, r2
 8002b40:	80fb      	strh	r3, [r7, #6]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002b48:	b2db      	uxtb	r3, r3
 8002b4a:	2b01      	cmp	r3, #1
 8002b4c:	d001      	beq.n	8002b52 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8002b4e:	2302      	movs	r3, #2
 8002b50:	e123      	b.n	8002d9a <HAL_SPI_Receive+0x268>
  }

  if ((pData == NULL) || (Size == 0U))
 8002b52:	68bb      	ldr	r3, [r7, #8]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d002      	beq.n	8002b5e <HAL_SPI_Receive+0x2c>
 8002b58:	88fb      	ldrh	r3, [r7, #6]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d101      	bne.n	8002b62 <HAL_SPI_Receive+0x30>
  {
    return HAL_ERROR;
 8002b5e:	2301      	movs	r3, #1
 8002b60:	e11b      	b.n	8002d9a <HAL_SPI_Receive+0x268>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002b6a:	d112      	bne.n	8002b92 <HAL_SPI_Receive+0x60>
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	689b      	ldr	r3, [r3, #8]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d10e      	bne.n	8002b92 <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	2204      	movs	r2, #4
 8002b78:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002b7c:	88fa      	ldrh	r2, [r7, #6]
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	9300      	str	r3, [sp, #0]
 8002b82:	4613      	mov	r3, r2
 8002b84:	68ba      	ldr	r2, [r7, #8]
 8002b86:	68b9      	ldr	r1, [r7, #8]
 8002b88:	68f8      	ldr	r0, [r7, #12]
 8002b8a:	f000 f90a 	bl	8002da2 <HAL_SPI_TransmitReceive>
 8002b8e:	4603      	mov	r3, r0
 8002b90:	e103      	b.n	8002d9a <HAL_SPI_Receive+0x268>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002b92:	f7fe fbb9 	bl	8001308 <HAL_GetTick>
 8002b96:	6178      	str	r0, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002b9e:	2b01      	cmp	r3, #1
 8002ba0:	d101      	bne.n	8002ba6 <HAL_SPI_Receive+0x74>
 8002ba2:	2302      	movs	r3, #2
 8002ba4:	e0f9      	b.n	8002d9a <HAL_SPI_Receive+0x268>
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	2201      	movs	r2, #1
 8002baa:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	2204      	movs	r2, #4
 8002bb2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	2200      	movs	r2, #0
 8002bba:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	68ba      	ldr	r2, [r7, #8]
 8002bc0:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	88fa      	ldrh	r2, [r7, #6]
 8002bc6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	88fa      	ldrh	r2, [r7, #6]
 8002bce:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	2200      	movs	r2, #0
 8002bdc:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	2200      	movs	r2, #0
 8002be2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	2200      	movs	r2, #0
 8002be8:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	2200      	movs	r2, #0
 8002bee:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	68db      	ldr	r3, [r3, #12]
 8002bf4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002bf8:	d908      	bls.n	8002c0c <HAL_SPI_Receive+0xda>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	685a      	ldr	r2, [r3, #4]
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002c08:	605a      	str	r2, [r3, #4]
 8002c0a:	e007      	b.n	8002c1c <HAL_SPI_Receive+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	685a      	ldr	r2, [r3, #4]
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002c1a:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	689b      	ldr	r3, [r3, #8]
 8002c20:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002c24:	d10f      	bne.n	8002c46 <HAL_SPI_Receive+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	681a      	ldr	r2, [r3, #0]
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002c34:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	681a      	ldr	r2, [r3, #0]
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002c44:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c50:	2b40      	cmp	r3, #64	@ 0x40
 8002c52:	d007      	beq.n	8002c64 <HAL_SPI_Receive+0x132>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	681a      	ldr	r2, [r3, #0]
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002c62:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	68db      	ldr	r3, [r3, #12]
 8002c68:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002c6c:	d875      	bhi.n	8002d5a <HAL_SPI_Receive+0x228>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002c6e:	e037      	b.n	8002ce0 <HAL_SPI_Receive+0x1ae>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	689b      	ldr	r3, [r3, #8]
 8002c76:	f003 0301 	and.w	r3, r3, #1
 8002c7a:	2b01      	cmp	r3, #1
 8002c7c:	d117      	bne.n	8002cae <HAL_SPI_Receive+0x17c>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f103 020c 	add.w	r2, r3, #12
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c8a:	7812      	ldrb	r2, [r2, #0]
 8002c8c:	b2d2      	uxtb	r2, r2
 8002c8e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c94:	1c5a      	adds	r2, r3, #1
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002ca0:	b29b      	uxth	r3, r3
 8002ca2:	3b01      	subs	r3, #1
 8002ca4:	b29a      	uxth	r2, r3
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8002cac:	e018      	b.n	8002ce0 <HAL_SPI_Receive+0x1ae>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002cae:	f7fe fb2b 	bl	8001308 <HAL_GetTick>
 8002cb2:	4602      	mov	r2, r0
 8002cb4:	697b      	ldr	r3, [r7, #20]
 8002cb6:	1ad3      	subs	r3, r2, r3
 8002cb8:	683a      	ldr	r2, [r7, #0]
 8002cba:	429a      	cmp	r2, r3
 8002cbc:	d803      	bhi.n	8002cc6 <HAL_SPI_Receive+0x194>
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cc4:	d102      	bne.n	8002ccc <HAL_SPI_Receive+0x19a>
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d109      	bne.n	8002ce0 <HAL_SPI_Receive+0x1ae>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	2201      	movs	r2, #1
 8002cd0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8002cdc:	2303      	movs	r3, #3
 8002cde:	e05c      	b.n	8002d9a <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002ce6:	b29b      	uxth	r3, r3
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d1c1      	bne.n	8002c70 <HAL_SPI_Receive+0x13e>
 8002cec:	e03b      	b.n	8002d66 <HAL_SPI_Receive+0x234>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	689b      	ldr	r3, [r3, #8]
 8002cf4:	f003 0301 	and.w	r3, r3, #1
 8002cf8:	2b01      	cmp	r3, #1
 8002cfa:	d115      	bne.n	8002d28 <HAL_SPI_Receive+0x1f6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	68da      	ldr	r2, [r3, #12]
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d06:	b292      	uxth	r2, r2
 8002d08:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d0e:	1c9a      	adds	r2, r3, #2
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002d1a:	b29b      	uxth	r3, r3
 8002d1c:	3b01      	subs	r3, #1
 8002d1e:	b29a      	uxth	r2, r3
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8002d26:	e018      	b.n	8002d5a <HAL_SPI_Receive+0x228>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002d28:	f7fe faee 	bl	8001308 <HAL_GetTick>
 8002d2c:	4602      	mov	r2, r0
 8002d2e:	697b      	ldr	r3, [r7, #20]
 8002d30:	1ad3      	subs	r3, r2, r3
 8002d32:	683a      	ldr	r2, [r7, #0]
 8002d34:	429a      	cmp	r2, r3
 8002d36:	d803      	bhi.n	8002d40 <HAL_SPI_Receive+0x20e>
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d3e:	d102      	bne.n	8002d46 <HAL_SPI_Receive+0x214>
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d109      	bne.n	8002d5a <HAL_SPI_Receive+0x228>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	2201      	movs	r2, #1
 8002d4a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	2200      	movs	r2, #0
 8002d52:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8002d56:	2303      	movs	r3, #3
 8002d58:	e01f      	b.n	8002d9a <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002d60:	b29b      	uxth	r3, r3
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d1c3      	bne.n	8002cee <HAL_SPI_Receive+0x1bc>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002d66:	697a      	ldr	r2, [r7, #20]
 8002d68:	6839      	ldr	r1, [r7, #0]
 8002d6a:	68f8      	ldr	r0, [r7, #12]
 8002d6c:	f000 fc76 	bl	800365c <SPI_EndRxTransaction>
 8002d70:	4603      	mov	r3, r0
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d002      	beq.n	8002d7c <HAL_SPI_Receive+0x24a>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	2220      	movs	r2, #32
 8002d7a:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	2201      	movs	r2, #1
 8002d80:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	2200      	movs	r2, #0
 8002d88:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d001      	beq.n	8002d98 <HAL_SPI_Receive+0x266>
  {
    return HAL_ERROR;
 8002d94:	2301      	movs	r3, #1
 8002d96:	e000      	b.n	8002d9a <HAL_SPI_Receive+0x268>
  }
  else
  {
    return HAL_OK;
 8002d98:	2300      	movs	r3, #0
  }
}
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	3718      	adds	r7, #24
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bd80      	pop	{r7, pc}

08002da2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002da2:	b580      	push	{r7, lr}
 8002da4:	b08a      	sub	sp, #40	@ 0x28
 8002da6:	af00      	add	r7, sp, #0
 8002da8:	60f8      	str	r0, [r7, #12]
 8002daa:	60b9      	str	r1, [r7, #8]
 8002dac:	607a      	str	r2, [r7, #4]
 8002dae:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002db0:	2301      	movs	r3, #1
 8002db2:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002db4:	f7fe faa8 	bl	8001308 <HAL_GetTick>
 8002db8:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002dc0:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	685b      	ldr	r3, [r3, #4]
 8002dc6:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8002dc8:	887b      	ldrh	r3, [r7, #2]
 8002dca:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 8002dcc:	887b      	ldrh	r3, [r7, #2]
 8002dce:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002dd0:	7ffb      	ldrb	r3, [r7, #31]
 8002dd2:	2b01      	cmp	r3, #1
 8002dd4:	d00c      	beq.n	8002df0 <HAL_SPI_TransmitReceive+0x4e>
 8002dd6:	69bb      	ldr	r3, [r7, #24]
 8002dd8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002ddc:	d106      	bne.n	8002dec <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	689b      	ldr	r3, [r3, #8]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d102      	bne.n	8002dec <HAL_SPI_TransmitReceive+0x4a>
 8002de6:	7ffb      	ldrb	r3, [r7, #31]
 8002de8:	2b04      	cmp	r3, #4
 8002dea:	d001      	beq.n	8002df0 <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8002dec:	2302      	movs	r3, #2
 8002dee:	e1f3      	b.n	80031d8 <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002df0:	68bb      	ldr	r3, [r7, #8]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d005      	beq.n	8002e02 <HAL_SPI_TransmitReceive+0x60>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d002      	beq.n	8002e02 <HAL_SPI_TransmitReceive+0x60>
 8002dfc:	887b      	ldrh	r3, [r7, #2]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d101      	bne.n	8002e06 <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 8002e02:	2301      	movs	r3, #1
 8002e04:	e1e8      	b.n	80031d8 <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002e0c:	2b01      	cmp	r3, #1
 8002e0e:	d101      	bne.n	8002e14 <HAL_SPI_TransmitReceive+0x72>
 8002e10:	2302      	movs	r3, #2
 8002e12:	e1e1      	b.n	80031d8 <HAL_SPI_TransmitReceive+0x436>
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	2201      	movs	r2, #1
 8002e18:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002e22:	b2db      	uxtb	r3, r3
 8002e24:	2b04      	cmp	r3, #4
 8002e26:	d003      	beq.n	8002e30 <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	2205      	movs	r2, #5
 8002e2c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	2200      	movs	r2, #0
 8002e34:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	687a      	ldr	r2, [r7, #4]
 8002e3a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	887a      	ldrh	r2, [r7, #2]
 8002e40:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	887a      	ldrh	r2, [r7, #2]
 8002e48:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	68ba      	ldr	r2, [r7, #8]
 8002e50:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	887a      	ldrh	r2, [r7, #2]
 8002e56:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	887a      	ldrh	r2, [r7, #2]
 8002e5c:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	2200      	movs	r2, #0
 8002e62:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	2200      	movs	r2, #0
 8002e68:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	68db      	ldr	r3, [r3, #12]
 8002e6e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002e72:	d802      	bhi.n	8002e7a <HAL_SPI_TransmitReceive+0xd8>
 8002e74:	8abb      	ldrh	r3, [r7, #20]
 8002e76:	2b01      	cmp	r3, #1
 8002e78:	d908      	bls.n	8002e8c <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	685a      	ldr	r2, [r3, #4]
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002e88:	605a      	str	r2, [r3, #4]
 8002e8a:	e007      	b.n	8002e9c <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	685a      	ldr	r2, [r3, #4]
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002e9a:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ea6:	2b40      	cmp	r3, #64	@ 0x40
 8002ea8:	d007      	beq.n	8002eba <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	681a      	ldr	r2, [r3, #0]
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002eb8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	68db      	ldr	r3, [r3, #12]
 8002ebe:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002ec2:	f240 8083 	bls.w	8002fcc <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	685b      	ldr	r3, [r3, #4]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d002      	beq.n	8002ed4 <HAL_SPI_TransmitReceive+0x132>
 8002ece:	8afb      	ldrh	r3, [r7, #22]
 8002ed0:	2b01      	cmp	r3, #1
 8002ed2:	d16f      	bne.n	8002fb4 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ed8:	881a      	ldrh	r2, [r3, #0]
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ee4:	1c9a      	adds	r2, r3, #2
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002eee:	b29b      	uxth	r3, r3
 8002ef0:	3b01      	subs	r3, #1
 8002ef2:	b29a      	uxth	r2, r3
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002ef8:	e05c      	b.n	8002fb4 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	689b      	ldr	r3, [r3, #8]
 8002f00:	f003 0302 	and.w	r3, r3, #2
 8002f04:	2b02      	cmp	r3, #2
 8002f06:	d11b      	bne.n	8002f40 <HAL_SPI_TransmitReceive+0x19e>
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002f0c:	b29b      	uxth	r3, r3
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d016      	beq.n	8002f40 <HAL_SPI_TransmitReceive+0x19e>
 8002f12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f14:	2b01      	cmp	r3, #1
 8002f16:	d113      	bne.n	8002f40 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f1c:	881a      	ldrh	r2, [r3, #0]
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f28:	1c9a      	adds	r2, r3, #2
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002f32:	b29b      	uxth	r3, r3
 8002f34:	3b01      	subs	r3, #1
 8002f36:	b29a      	uxth	r2, r3
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	689b      	ldr	r3, [r3, #8]
 8002f46:	f003 0301 	and.w	r3, r3, #1
 8002f4a:	2b01      	cmp	r3, #1
 8002f4c:	d11c      	bne.n	8002f88 <HAL_SPI_TransmitReceive+0x1e6>
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002f54:	b29b      	uxth	r3, r3
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d016      	beq.n	8002f88 <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	68da      	ldr	r2, [r3, #12]
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f64:	b292      	uxth	r2, r2
 8002f66:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f6c:	1c9a      	adds	r2, r3, #2
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002f78:	b29b      	uxth	r3, r3
 8002f7a:	3b01      	subs	r3, #1
 8002f7c:	b29a      	uxth	r2, r3
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002f84:	2301      	movs	r3, #1
 8002f86:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002f88:	f7fe f9be 	bl	8001308 <HAL_GetTick>
 8002f8c:	4602      	mov	r2, r0
 8002f8e:	6a3b      	ldr	r3, [r7, #32]
 8002f90:	1ad3      	subs	r3, r2, r3
 8002f92:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002f94:	429a      	cmp	r2, r3
 8002f96:	d80d      	bhi.n	8002fb4 <HAL_SPI_TransmitReceive+0x212>
 8002f98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f9e:	d009      	beq.n	8002fb4 <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	2201      	movs	r2, #1
 8002fa4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	2200      	movs	r2, #0
 8002fac:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8002fb0:	2303      	movs	r3, #3
 8002fb2:	e111      	b.n	80031d8 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002fb8:	b29b      	uxth	r3, r3
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d19d      	bne.n	8002efa <HAL_SPI_TransmitReceive+0x158>
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002fc4:	b29b      	uxth	r3, r3
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d197      	bne.n	8002efa <HAL_SPI_TransmitReceive+0x158>
 8002fca:	e0e5      	b.n	8003198 <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	685b      	ldr	r3, [r3, #4]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d003      	beq.n	8002fdc <HAL_SPI_TransmitReceive+0x23a>
 8002fd4:	8afb      	ldrh	r3, [r7, #22]
 8002fd6:	2b01      	cmp	r3, #1
 8002fd8:	f040 80d1 	bne.w	800317e <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002fe0:	b29b      	uxth	r3, r3
 8002fe2:	2b01      	cmp	r3, #1
 8002fe4:	d912      	bls.n	800300c <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fea:	881a      	ldrh	r2, [r3, #0]
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ff6:	1c9a      	adds	r2, r3, #2
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003000:	b29b      	uxth	r3, r3
 8003002:	3b02      	subs	r3, #2
 8003004:	b29a      	uxth	r2, r3
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800300a:	e0b8      	b.n	800317e <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	330c      	adds	r3, #12
 8003016:	7812      	ldrb	r2, [r2, #0]
 8003018:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800301e:	1c5a      	adds	r2, r3, #1
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003028:	b29b      	uxth	r3, r3
 800302a:	3b01      	subs	r3, #1
 800302c:	b29a      	uxth	r2, r3
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003032:	e0a4      	b.n	800317e <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	689b      	ldr	r3, [r3, #8]
 800303a:	f003 0302 	and.w	r3, r3, #2
 800303e:	2b02      	cmp	r3, #2
 8003040:	d134      	bne.n	80030ac <HAL_SPI_TransmitReceive+0x30a>
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003046:	b29b      	uxth	r3, r3
 8003048:	2b00      	cmp	r3, #0
 800304a:	d02f      	beq.n	80030ac <HAL_SPI_TransmitReceive+0x30a>
 800304c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800304e:	2b01      	cmp	r3, #1
 8003050:	d12c      	bne.n	80030ac <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003056:	b29b      	uxth	r3, r3
 8003058:	2b01      	cmp	r3, #1
 800305a:	d912      	bls.n	8003082 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003060:	881a      	ldrh	r2, [r3, #0]
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800306c:	1c9a      	adds	r2, r3, #2
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003076:	b29b      	uxth	r3, r3
 8003078:	3b02      	subs	r3, #2
 800307a:	b29a      	uxth	r2, r3
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003080:	e012      	b.n	80030a8 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	330c      	adds	r3, #12
 800308c:	7812      	ldrb	r2, [r2, #0]
 800308e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003094:	1c5a      	adds	r2, r3, #1
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800309e:	b29b      	uxth	r3, r3
 80030a0:	3b01      	subs	r3, #1
 80030a2:	b29a      	uxth	r2, r3
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80030a8:	2300      	movs	r3, #0
 80030aa:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	689b      	ldr	r3, [r3, #8]
 80030b2:	f003 0301 	and.w	r3, r3, #1
 80030b6:	2b01      	cmp	r3, #1
 80030b8:	d148      	bne.n	800314c <HAL_SPI_TransmitReceive+0x3aa>
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80030c0:	b29b      	uxth	r3, r3
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d042      	beq.n	800314c <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80030cc:	b29b      	uxth	r3, r3
 80030ce:	2b01      	cmp	r3, #1
 80030d0:	d923      	bls.n	800311a <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	68da      	ldr	r2, [r3, #12]
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030dc:	b292      	uxth	r2, r2
 80030de:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030e4:	1c9a      	adds	r2, r3, #2
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80030f0:	b29b      	uxth	r3, r3
 80030f2:	3b02      	subs	r3, #2
 80030f4:	b29a      	uxth	r2, r3
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003102:	b29b      	uxth	r3, r3
 8003104:	2b01      	cmp	r3, #1
 8003106:	d81f      	bhi.n	8003148 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	685a      	ldr	r2, [r3, #4]
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003116:	605a      	str	r2, [r3, #4]
 8003118:	e016      	b.n	8003148 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f103 020c 	add.w	r2, r3, #12
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003126:	7812      	ldrb	r2, [r2, #0]
 8003128:	b2d2      	uxtb	r2, r2
 800312a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003130:	1c5a      	adds	r2, r3, #1
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800313c:	b29b      	uxth	r3, r3
 800313e:	3b01      	subs	r3, #1
 8003140:	b29a      	uxth	r2, r3
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003148:	2301      	movs	r3, #1
 800314a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800314c:	f7fe f8dc 	bl	8001308 <HAL_GetTick>
 8003150:	4602      	mov	r2, r0
 8003152:	6a3b      	ldr	r3, [r7, #32]
 8003154:	1ad3      	subs	r3, r2, r3
 8003156:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003158:	429a      	cmp	r2, r3
 800315a:	d803      	bhi.n	8003164 <HAL_SPI_TransmitReceive+0x3c2>
 800315c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800315e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003162:	d102      	bne.n	800316a <HAL_SPI_TransmitReceive+0x3c8>
 8003164:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003166:	2b00      	cmp	r3, #0
 8003168:	d109      	bne.n	800317e <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	2201      	movs	r2, #1
 800316e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	2200      	movs	r2, #0
 8003176:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 800317a:	2303      	movs	r3, #3
 800317c:	e02c      	b.n	80031d8 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003182:	b29b      	uxth	r3, r3
 8003184:	2b00      	cmp	r3, #0
 8003186:	f47f af55 	bne.w	8003034 <HAL_SPI_TransmitReceive+0x292>
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003190:	b29b      	uxth	r3, r3
 8003192:	2b00      	cmp	r3, #0
 8003194:	f47f af4e 	bne.w	8003034 <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003198:	6a3a      	ldr	r2, [r7, #32]
 800319a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800319c:	68f8      	ldr	r0, [r7, #12]
 800319e:	f000 fab5 	bl	800370c <SPI_EndRxTxTransaction>
 80031a2:	4603      	mov	r3, r0
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d008      	beq.n	80031ba <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	2220      	movs	r2, #32
 80031ac:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	2200      	movs	r2, #0
 80031b2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 80031b6:	2301      	movs	r3, #1
 80031b8:	e00e      	b.n	80031d8 <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	2201      	movs	r2, #1
 80031be:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	2200      	movs	r2, #0
 80031c6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d001      	beq.n	80031d6 <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 80031d2:	2301      	movs	r3, #1
 80031d4:	e000      	b.n	80031d8 <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 80031d6:	2300      	movs	r3, #0
  }
}
 80031d8:	4618      	mov	r0, r3
 80031da:	3728      	adds	r7, #40	@ 0x28
 80031dc:	46bd      	mov	sp, r7
 80031de:	bd80      	pop	{r7, pc}

080031e0 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b088      	sub	sp, #32
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	685b      	ldr	r3, [r3, #4]
 80031ee:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	689b      	ldr	r3, [r3, #8]
 80031f6:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80031f8:	69bb      	ldr	r3, [r7, #24]
 80031fa:	099b      	lsrs	r3, r3, #6
 80031fc:	f003 0301 	and.w	r3, r3, #1
 8003200:	2b00      	cmp	r3, #0
 8003202:	d10f      	bne.n	8003224 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003204:	69bb      	ldr	r3, [r7, #24]
 8003206:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800320a:	2b00      	cmp	r3, #0
 800320c:	d00a      	beq.n	8003224 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800320e:	69fb      	ldr	r3, [r7, #28]
 8003210:	099b      	lsrs	r3, r3, #6
 8003212:	f003 0301 	and.w	r3, r3, #1
 8003216:	2b00      	cmp	r3, #0
 8003218:	d004      	beq.n	8003224 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800321e:	6878      	ldr	r0, [r7, #4]
 8003220:	4798      	blx	r3
    return;
 8003222:	e0d7      	b.n	80033d4 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8003224:	69bb      	ldr	r3, [r7, #24]
 8003226:	085b      	lsrs	r3, r3, #1
 8003228:	f003 0301 	and.w	r3, r3, #1
 800322c:	2b00      	cmp	r3, #0
 800322e:	d00a      	beq.n	8003246 <HAL_SPI_IRQHandler+0x66>
 8003230:	69fb      	ldr	r3, [r7, #28]
 8003232:	09db      	lsrs	r3, r3, #7
 8003234:	f003 0301 	and.w	r3, r3, #1
 8003238:	2b00      	cmp	r3, #0
 800323a:	d004      	beq.n	8003246 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003240:	6878      	ldr	r0, [r7, #4]
 8003242:	4798      	blx	r3
    return;
 8003244:	e0c6      	b.n	80033d4 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003246:	69bb      	ldr	r3, [r7, #24]
 8003248:	095b      	lsrs	r3, r3, #5
 800324a:	f003 0301 	and.w	r3, r3, #1
 800324e:	2b00      	cmp	r3, #0
 8003250:	d10c      	bne.n	800326c <HAL_SPI_IRQHandler+0x8c>
 8003252:	69bb      	ldr	r3, [r7, #24]
 8003254:	099b      	lsrs	r3, r3, #6
 8003256:	f003 0301 	and.w	r3, r3, #1
 800325a:	2b00      	cmp	r3, #0
 800325c:	d106      	bne.n	800326c <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800325e:	69bb      	ldr	r3, [r7, #24]
 8003260:	0a1b      	lsrs	r3, r3, #8
 8003262:	f003 0301 	and.w	r3, r3, #1
 8003266:	2b00      	cmp	r3, #0
 8003268:	f000 80b4 	beq.w	80033d4 <HAL_SPI_IRQHandler+0x1f4>
 800326c:	69fb      	ldr	r3, [r7, #28]
 800326e:	095b      	lsrs	r3, r3, #5
 8003270:	f003 0301 	and.w	r3, r3, #1
 8003274:	2b00      	cmp	r3, #0
 8003276:	f000 80ad 	beq.w	80033d4 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800327a:	69bb      	ldr	r3, [r7, #24]
 800327c:	099b      	lsrs	r3, r3, #6
 800327e:	f003 0301 	and.w	r3, r3, #1
 8003282:	2b00      	cmp	r3, #0
 8003284:	d023      	beq.n	80032ce <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800328c:	b2db      	uxtb	r3, r3
 800328e:	2b03      	cmp	r3, #3
 8003290:	d011      	beq.n	80032b6 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003296:	f043 0204 	orr.w	r2, r3, #4
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800329e:	2300      	movs	r3, #0
 80032a0:	617b      	str	r3, [r7, #20]
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	68db      	ldr	r3, [r3, #12]
 80032a8:	617b      	str	r3, [r7, #20]
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	689b      	ldr	r3, [r3, #8]
 80032b0:	617b      	str	r3, [r7, #20]
 80032b2:	697b      	ldr	r3, [r7, #20]
 80032b4:	e00b      	b.n	80032ce <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80032b6:	2300      	movs	r3, #0
 80032b8:	613b      	str	r3, [r7, #16]
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	68db      	ldr	r3, [r3, #12]
 80032c0:	613b      	str	r3, [r7, #16]
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	689b      	ldr	r3, [r3, #8]
 80032c8:	613b      	str	r3, [r7, #16]
 80032ca:	693b      	ldr	r3, [r7, #16]
        return;
 80032cc:	e082      	b.n	80033d4 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80032ce:	69bb      	ldr	r3, [r7, #24]
 80032d0:	095b      	lsrs	r3, r3, #5
 80032d2:	f003 0301 	and.w	r3, r3, #1
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d014      	beq.n	8003304 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80032de:	f043 0201 	orr.w	r2, r3, #1
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80032e6:	2300      	movs	r3, #0
 80032e8:	60fb      	str	r3, [r7, #12]
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	689b      	ldr	r3, [r3, #8]
 80032f0:	60fb      	str	r3, [r7, #12]
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	681a      	ldr	r2, [r3, #0]
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003300:	601a      	str	r2, [r3, #0]
 8003302:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8003304:	69bb      	ldr	r3, [r7, #24]
 8003306:	0a1b      	lsrs	r3, r3, #8
 8003308:	f003 0301 	and.w	r3, r3, #1
 800330c:	2b00      	cmp	r3, #0
 800330e:	d00c      	beq.n	800332a <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003314:	f043 0208 	orr.w	r2, r3, #8
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800331c:	2300      	movs	r3, #0
 800331e:	60bb      	str	r3, [r7, #8]
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	689b      	ldr	r3, [r3, #8]
 8003326:	60bb      	str	r3, [r7, #8]
 8003328:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800332e:	2b00      	cmp	r3, #0
 8003330:	d04f      	beq.n	80033d2 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	685a      	ldr	r2, [r3, #4]
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003340:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2201      	movs	r2, #1
 8003346:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800334a:	69fb      	ldr	r3, [r7, #28]
 800334c:	f003 0302 	and.w	r3, r3, #2
 8003350:	2b00      	cmp	r3, #0
 8003352:	d104      	bne.n	800335e <HAL_SPI_IRQHandler+0x17e>
 8003354:	69fb      	ldr	r3, [r7, #28]
 8003356:	f003 0301 	and.w	r3, r3, #1
 800335a:	2b00      	cmp	r3, #0
 800335c:	d034      	beq.n	80033c8 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	685a      	ldr	r2, [r3, #4]
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f022 0203 	bic.w	r2, r2, #3
 800336c:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003372:	2b00      	cmp	r3, #0
 8003374:	d011      	beq.n	800339a <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800337a:	4a18      	ldr	r2, [pc, #96]	@ (80033dc <HAL_SPI_IRQHandler+0x1fc>)
 800337c:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003382:	4618      	mov	r0, r3
 8003384:	f7fe f9f0 	bl	8001768 <HAL_DMA_Abort_IT>
 8003388:	4603      	mov	r3, r0
 800338a:	2b00      	cmp	r3, #0
 800338c:	d005      	beq.n	800339a <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003392:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d016      	beq.n	80033d0 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033a6:	4a0d      	ldr	r2, [pc, #52]	@ (80033dc <HAL_SPI_IRQHandler+0x1fc>)
 80033a8:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033ae:	4618      	mov	r0, r3
 80033b0:	f7fe f9da 	bl	8001768 <HAL_DMA_Abort_IT>
 80033b4:	4603      	mov	r3, r0
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d00a      	beq.n	80033d0 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80033be:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 80033c6:	e003      	b.n	80033d0 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80033c8:	6878      	ldr	r0, [r7, #4]
 80033ca:	f000 f809 	bl	80033e0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80033ce:	e000      	b.n	80033d2 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 80033d0:	bf00      	nop
    return;
 80033d2:	bf00      	nop
  }
}
 80033d4:	3720      	adds	r7, #32
 80033d6:	46bd      	mov	sp, r7
 80033d8:	bd80      	pop	{r7, pc}
 80033da:	bf00      	nop
 80033dc:	080033f5 	.word	0x080033f5

080033e0 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80033e0:	b480      	push	{r7}
 80033e2:	b083      	sub	sp, #12
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80033e8:	bf00      	nop
 80033ea:	370c      	adds	r7, #12
 80033ec:	46bd      	mov	sp, r7
 80033ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f2:	4770      	bx	lr

080033f4 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b084      	sub	sp, #16
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003400:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	2200      	movs	r2, #0
 8003406:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	2200      	movs	r2, #0
 800340e:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8003410:	68f8      	ldr	r0, [r7, #12]
 8003412:	f7ff ffe5 	bl	80033e0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003416:	bf00      	nop
 8003418:	3710      	adds	r7, #16
 800341a:	46bd      	mov	sp, r7
 800341c:	bd80      	pop	{r7, pc}
	...

08003420 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b088      	sub	sp, #32
 8003424:	af00      	add	r7, sp, #0
 8003426:	60f8      	str	r0, [r7, #12]
 8003428:	60b9      	str	r1, [r7, #8]
 800342a:	603b      	str	r3, [r7, #0]
 800342c:	4613      	mov	r3, r2
 800342e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003430:	f7fd ff6a 	bl	8001308 <HAL_GetTick>
 8003434:	4602      	mov	r2, r0
 8003436:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003438:	1a9b      	subs	r3, r3, r2
 800343a:	683a      	ldr	r2, [r7, #0]
 800343c:	4413      	add	r3, r2
 800343e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003440:	f7fd ff62 	bl	8001308 <HAL_GetTick>
 8003444:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003446:	4b39      	ldr	r3, [pc, #228]	@ (800352c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	015b      	lsls	r3, r3, #5
 800344c:	0d1b      	lsrs	r3, r3, #20
 800344e:	69fa      	ldr	r2, [r7, #28]
 8003450:	fb02 f303 	mul.w	r3, r2, r3
 8003454:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003456:	e054      	b.n	8003502 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800345e:	d050      	beq.n	8003502 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003460:	f7fd ff52 	bl	8001308 <HAL_GetTick>
 8003464:	4602      	mov	r2, r0
 8003466:	69bb      	ldr	r3, [r7, #24]
 8003468:	1ad3      	subs	r3, r2, r3
 800346a:	69fa      	ldr	r2, [r7, #28]
 800346c:	429a      	cmp	r2, r3
 800346e:	d902      	bls.n	8003476 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003470:	69fb      	ldr	r3, [r7, #28]
 8003472:	2b00      	cmp	r3, #0
 8003474:	d13d      	bne.n	80034f2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	685a      	ldr	r2, [r3, #4]
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003484:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	685b      	ldr	r3, [r3, #4]
 800348a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800348e:	d111      	bne.n	80034b4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	689b      	ldr	r3, [r3, #8]
 8003494:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003498:	d004      	beq.n	80034a4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	689b      	ldr	r3, [r3, #8]
 800349e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80034a2:	d107      	bne.n	80034b4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	681a      	ldr	r2, [r3, #0]
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80034b2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034b8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80034bc:	d10f      	bne.n	80034de <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	681a      	ldr	r2, [r3, #0]
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80034cc:	601a      	str	r2, [r3, #0]
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	681a      	ldr	r2, [r3, #0]
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80034dc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	2201      	movs	r2, #1
 80034e2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	2200      	movs	r2, #0
 80034ea:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80034ee:	2303      	movs	r3, #3
 80034f0:	e017      	b.n	8003522 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80034f2:	697b      	ldr	r3, [r7, #20]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d101      	bne.n	80034fc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80034f8:	2300      	movs	r3, #0
 80034fa:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80034fc:	697b      	ldr	r3, [r7, #20]
 80034fe:	3b01      	subs	r3, #1
 8003500:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	689a      	ldr	r2, [r3, #8]
 8003508:	68bb      	ldr	r3, [r7, #8]
 800350a:	4013      	ands	r3, r2
 800350c:	68ba      	ldr	r2, [r7, #8]
 800350e:	429a      	cmp	r2, r3
 8003510:	bf0c      	ite	eq
 8003512:	2301      	moveq	r3, #1
 8003514:	2300      	movne	r3, #0
 8003516:	b2db      	uxtb	r3, r3
 8003518:	461a      	mov	r2, r3
 800351a:	79fb      	ldrb	r3, [r7, #7]
 800351c:	429a      	cmp	r2, r3
 800351e:	d19b      	bne.n	8003458 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003520:	2300      	movs	r3, #0
}
 8003522:	4618      	mov	r0, r3
 8003524:	3720      	adds	r7, #32
 8003526:	46bd      	mov	sp, r7
 8003528:	bd80      	pop	{r7, pc}
 800352a:	bf00      	nop
 800352c:	20000000 	.word	0x20000000

08003530 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b08a      	sub	sp, #40	@ 0x28
 8003534:	af00      	add	r7, sp, #0
 8003536:	60f8      	str	r0, [r7, #12]
 8003538:	60b9      	str	r1, [r7, #8]
 800353a:	607a      	str	r2, [r7, #4]
 800353c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800353e:	2300      	movs	r3, #0
 8003540:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003542:	f7fd fee1 	bl	8001308 <HAL_GetTick>
 8003546:	4602      	mov	r2, r0
 8003548:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800354a:	1a9b      	subs	r3, r3, r2
 800354c:	683a      	ldr	r2, [r7, #0]
 800354e:	4413      	add	r3, r2
 8003550:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8003552:	f7fd fed9 	bl	8001308 <HAL_GetTick>
 8003556:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	330c      	adds	r3, #12
 800355e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003560:	4b3d      	ldr	r3, [pc, #244]	@ (8003658 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8003562:	681a      	ldr	r2, [r3, #0]
 8003564:	4613      	mov	r3, r2
 8003566:	009b      	lsls	r3, r3, #2
 8003568:	4413      	add	r3, r2
 800356a:	00da      	lsls	r2, r3, #3
 800356c:	1ad3      	subs	r3, r2, r3
 800356e:	0d1b      	lsrs	r3, r3, #20
 8003570:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003572:	fb02 f303 	mul.w	r3, r2, r3
 8003576:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003578:	e060      	b.n	800363c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800357a:	68bb      	ldr	r3, [r7, #8]
 800357c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8003580:	d107      	bne.n	8003592 <SPI_WaitFifoStateUntilTimeout+0x62>
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2b00      	cmp	r3, #0
 8003586:	d104      	bne.n	8003592 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003588:	69fb      	ldr	r3, [r7, #28]
 800358a:	781b      	ldrb	r3, [r3, #0]
 800358c:	b2db      	uxtb	r3, r3
 800358e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003590:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003598:	d050      	beq.n	800363c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800359a:	f7fd feb5 	bl	8001308 <HAL_GetTick>
 800359e:	4602      	mov	r2, r0
 80035a0:	6a3b      	ldr	r3, [r7, #32]
 80035a2:	1ad3      	subs	r3, r2, r3
 80035a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80035a6:	429a      	cmp	r2, r3
 80035a8:	d902      	bls.n	80035b0 <SPI_WaitFifoStateUntilTimeout+0x80>
 80035aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d13d      	bne.n	800362c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	685a      	ldr	r2, [r3, #4]
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80035be:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	685b      	ldr	r3, [r3, #4]
 80035c4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80035c8:	d111      	bne.n	80035ee <SPI_WaitFifoStateUntilTimeout+0xbe>
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	689b      	ldr	r3, [r3, #8]
 80035ce:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80035d2:	d004      	beq.n	80035de <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	689b      	ldr	r3, [r3, #8]
 80035d8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80035dc:	d107      	bne.n	80035ee <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	681a      	ldr	r2, [r3, #0]
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80035ec:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035f2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80035f6:	d10f      	bne.n	8003618 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	681a      	ldr	r2, [r3, #0]
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003606:	601a      	str	r2, [r3, #0]
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	681a      	ldr	r2, [r3, #0]
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003616:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	2201      	movs	r2, #1
 800361c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	2200      	movs	r2, #0
 8003624:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8003628:	2303      	movs	r3, #3
 800362a:	e010      	b.n	800364e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800362c:	69bb      	ldr	r3, [r7, #24]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d101      	bne.n	8003636 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8003632:	2300      	movs	r3, #0
 8003634:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8003636:	69bb      	ldr	r3, [r7, #24]
 8003638:	3b01      	subs	r3, #1
 800363a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	689a      	ldr	r2, [r3, #8]
 8003642:	68bb      	ldr	r3, [r7, #8]
 8003644:	4013      	ands	r3, r2
 8003646:	687a      	ldr	r2, [r7, #4]
 8003648:	429a      	cmp	r2, r3
 800364a:	d196      	bne.n	800357a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800364c:	2300      	movs	r3, #0
}
 800364e:	4618      	mov	r0, r3
 8003650:	3728      	adds	r7, #40	@ 0x28
 8003652:	46bd      	mov	sp, r7
 8003654:	bd80      	pop	{r7, pc}
 8003656:	bf00      	nop
 8003658:	20000000 	.word	0x20000000

0800365c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b086      	sub	sp, #24
 8003660:	af02      	add	r7, sp, #8
 8003662:	60f8      	str	r0, [r7, #12]
 8003664:	60b9      	str	r1, [r7, #8]
 8003666:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	685b      	ldr	r3, [r3, #4]
 800366c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003670:	d111      	bne.n	8003696 <SPI_EndRxTransaction+0x3a>
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	689b      	ldr	r3, [r3, #8]
 8003676:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800367a:	d004      	beq.n	8003686 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	689b      	ldr	r3, [r3, #8]
 8003680:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003684:	d107      	bne.n	8003696 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	681a      	ldr	r2, [r3, #0]
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003694:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	9300      	str	r3, [sp, #0]
 800369a:	68bb      	ldr	r3, [r7, #8]
 800369c:	2200      	movs	r2, #0
 800369e:	2180      	movs	r1, #128	@ 0x80
 80036a0:	68f8      	ldr	r0, [r7, #12]
 80036a2:	f7ff febd 	bl	8003420 <SPI_WaitFlagStateUntilTimeout>
 80036a6:	4603      	mov	r3, r0
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d007      	beq.n	80036bc <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036b0:	f043 0220 	orr.w	r2, r3, #32
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80036b8:	2303      	movs	r3, #3
 80036ba:	e023      	b.n	8003704 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	685b      	ldr	r3, [r3, #4]
 80036c0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80036c4:	d11d      	bne.n	8003702 <SPI_EndRxTransaction+0xa6>
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	689b      	ldr	r3, [r3, #8]
 80036ca:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80036ce:	d004      	beq.n	80036da <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	689b      	ldr	r3, [r3, #8]
 80036d4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80036d8:	d113      	bne.n	8003702 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	9300      	str	r3, [sp, #0]
 80036de:	68bb      	ldr	r3, [r7, #8]
 80036e0:	2200      	movs	r2, #0
 80036e2:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80036e6:	68f8      	ldr	r0, [r7, #12]
 80036e8:	f7ff ff22 	bl	8003530 <SPI_WaitFifoStateUntilTimeout>
 80036ec:	4603      	mov	r3, r0
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d007      	beq.n	8003702 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036f6:	f043 0220 	orr.w	r2, r3, #32
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 80036fe:	2303      	movs	r3, #3
 8003700:	e000      	b.n	8003704 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8003702:	2300      	movs	r3, #0
}
 8003704:	4618      	mov	r0, r3
 8003706:	3710      	adds	r7, #16
 8003708:	46bd      	mov	sp, r7
 800370a:	bd80      	pop	{r7, pc}

0800370c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	b086      	sub	sp, #24
 8003710:	af02      	add	r7, sp, #8
 8003712:	60f8      	str	r0, [r7, #12]
 8003714:	60b9      	str	r1, [r7, #8]
 8003716:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	9300      	str	r3, [sp, #0]
 800371c:	68bb      	ldr	r3, [r7, #8]
 800371e:	2200      	movs	r2, #0
 8003720:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8003724:	68f8      	ldr	r0, [r7, #12]
 8003726:	f7ff ff03 	bl	8003530 <SPI_WaitFifoStateUntilTimeout>
 800372a:	4603      	mov	r3, r0
 800372c:	2b00      	cmp	r3, #0
 800372e:	d007      	beq.n	8003740 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003734:	f043 0220 	orr.w	r2, r3, #32
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800373c:	2303      	movs	r3, #3
 800373e:	e027      	b.n	8003790 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	9300      	str	r3, [sp, #0]
 8003744:	68bb      	ldr	r3, [r7, #8]
 8003746:	2200      	movs	r2, #0
 8003748:	2180      	movs	r1, #128	@ 0x80
 800374a:	68f8      	ldr	r0, [r7, #12]
 800374c:	f7ff fe68 	bl	8003420 <SPI_WaitFlagStateUntilTimeout>
 8003750:	4603      	mov	r3, r0
 8003752:	2b00      	cmp	r3, #0
 8003754:	d007      	beq.n	8003766 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800375a:	f043 0220 	orr.w	r2, r3, #32
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003762:	2303      	movs	r3, #3
 8003764:	e014      	b.n	8003790 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	9300      	str	r3, [sp, #0]
 800376a:	68bb      	ldr	r3, [r7, #8]
 800376c:	2200      	movs	r2, #0
 800376e:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8003772:	68f8      	ldr	r0, [r7, #12]
 8003774:	f7ff fedc 	bl	8003530 <SPI_WaitFifoStateUntilTimeout>
 8003778:	4603      	mov	r3, r0
 800377a:	2b00      	cmp	r3, #0
 800377c:	d007      	beq.n	800378e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003782:	f043 0220 	orr.w	r2, r3, #32
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800378a:	2303      	movs	r3, #3
 800378c:	e000      	b.n	8003790 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800378e:	2300      	movs	r3, #0
}
 8003790:	4618      	mov	r0, r3
 8003792:	3710      	adds	r7, #16
 8003794:	46bd      	mov	sp, r7
 8003796:	bd80      	pop	{r7, pc}

08003798 <siprintf>:
 8003798:	b40e      	push	{r1, r2, r3}
 800379a:	b510      	push	{r4, lr}
 800379c:	b09d      	sub	sp, #116	@ 0x74
 800379e:	ab1f      	add	r3, sp, #124	@ 0x7c
 80037a0:	9002      	str	r0, [sp, #8]
 80037a2:	9006      	str	r0, [sp, #24]
 80037a4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80037a8:	480a      	ldr	r0, [pc, #40]	@ (80037d4 <siprintf+0x3c>)
 80037aa:	9107      	str	r1, [sp, #28]
 80037ac:	9104      	str	r1, [sp, #16]
 80037ae:	490a      	ldr	r1, [pc, #40]	@ (80037d8 <siprintf+0x40>)
 80037b0:	f853 2b04 	ldr.w	r2, [r3], #4
 80037b4:	9105      	str	r1, [sp, #20]
 80037b6:	2400      	movs	r4, #0
 80037b8:	a902      	add	r1, sp, #8
 80037ba:	6800      	ldr	r0, [r0, #0]
 80037bc:	9301      	str	r3, [sp, #4]
 80037be:	941b      	str	r4, [sp, #108]	@ 0x6c
 80037c0:	f000 f994 	bl	8003aec <_svfiprintf_r>
 80037c4:	9b02      	ldr	r3, [sp, #8]
 80037c6:	701c      	strb	r4, [r3, #0]
 80037c8:	b01d      	add	sp, #116	@ 0x74
 80037ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80037ce:	b003      	add	sp, #12
 80037d0:	4770      	bx	lr
 80037d2:	bf00      	nop
 80037d4:	2000000c 	.word	0x2000000c
 80037d8:	ffff0208 	.word	0xffff0208

080037dc <memset>:
 80037dc:	4402      	add	r2, r0
 80037de:	4603      	mov	r3, r0
 80037e0:	4293      	cmp	r3, r2
 80037e2:	d100      	bne.n	80037e6 <memset+0xa>
 80037e4:	4770      	bx	lr
 80037e6:	f803 1b01 	strb.w	r1, [r3], #1
 80037ea:	e7f9      	b.n	80037e0 <memset+0x4>

080037ec <__errno>:
 80037ec:	4b01      	ldr	r3, [pc, #4]	@ (80037f4 <__errno+0x8>)
 80037ee:	6818      	ldr	r0, [r3, #0]
 80037f0:	4770      	bx	lr
 80037f2:	bf00      	nop
 80037f4:	2000000c 	.word	0x2000000c

080037f8 <__libc_init_array>:
 80037f8:	b570      	push	{r4, r5, r6, lr}
 80037fa:	4d0d      	ldr	r5, [pc, #52]	@ (8003830 <__libc_init_array+0x38>)
 80037fc:	4c0d      	ldr	r4, [pc, #52]	@ (8003834 <__libc_init_array+0x3c>)
 80037fe:	1b64      	subs	r4, r4, r5
 8003800:	10a4      	asrs	r4, r4, #2
 8003802:	2600      	movs	r6, #0
 8003804:	42a6      	cmp	r6, r4
 8003806:	d109      	bne.n	800381c <__libc_init_array+0x24>
 8003808:	4d0b      	ldr	r5, [pc, #44]	@ (8003838 <__libc_init_array+0x40>)
 800380a:	4c0c      	ldr	r4, [pc, #48]	@ (800383c <__libc_init_array+0x44>)
 800380c:	f000 fc64 	bl	80040d8 <_init>
 8003810:	1b64      	subs	r4, r4, r5
 8003812:	10a4      	asrs	r4, r4, #2
 8003814:	2600      	movs	r6, #0
 8003816:	42a6      	cmp	r6, r4
 8003818:	d105      	bne.n	8003826 <__libc_init_array+0x2e>
 800381a:	bd70      	pop	{r4, r5, r6, pc}
 800381c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003820:	4798      	blx	r3
 8003822:	3601      	adds	r6, #1
 8003824:	e7ee      	b.n	8003804 <__libc_init_array+0xc>
 8003826:	f855 3b04 	ldr.w	r3, [r5], #4
 800382a:	4798      	blx	r3
 800382c:	3601      	adds	r6, #1
 800382e:	e7f2      	b.n	8003816 <__libc_init_array+0x1e>
 8003830:	0800414c 	.word	0x0800414c
 8003834:	0800414c 	.word	0x0800414c
 8003838:	0800414c 	.word	0x0800414c
 800383c:	08004150 	.word	0x08004150

08003840 <__retarget_lock_acquire_recursive>:
 8003840:	4770      	bx	lr

08003842 <__retarget_lock_release_recursive>:
 8003842:	4770      	bx	lr

08003844 <_free_r>:
 8003844:	b538      	push	{r3, r4, r5, lr}
 8003846:	4605      	mov	r5, r0
 8003848:	2900      	cmp	r1, #0
 800384a:	d041      	beq.n	80038d0 <_free_r+0x8c>
 800384c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003850:	1f0c      	subs	r4, r1, #4
 8003852:	2b00      	cmp	r3, #0
 8003854:	bfb8      	it	lt
 8003856:	18e4      	addlt	r4, r4, r3
 8003858:	f000 f8e0 	bl	8003a1c <__malloc_lock>
 800385c:	4a1d      	ldr	r2, [pc, #116]	@ (80038d4 <_free_r+0x90>)
 800385e:	6813      	ldr	r3, [r2, #0]
 8003860:	b933      	cbnz	r3, 8003870 <_free_r+0x2c>
 8003862:	6063      	str	r3, [r4, #4]
 8003864:	6014      	str	r4, [r2, #0]
 8003866:	4628      	mov	r0, r5
 8003868:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800386c:	f000 b8dc 	b.w	8003a28 <__malloc_unlock>
 8003870:	42a3      	cmp	r3, r4
 8003872:	d908      	bls.n	8003886 <_free_r+0x42>
 8003874:	6820      	ldr	r0, [r4, #0]
 8003876:	1821      	adds	r1, r4, r0
 8003878:	428b      	cmp	r3, r1
 800387a:	bf01      	itttt	eq
 800387c:	6819      	ldreq	r1, [r3, #0]
 800387e:	685b      	ldreq	r3, [r3, #4]
 8003880:	1809      	addeq	r1, r1, r0
 8003882:	6021      	streq	r1, [r4, #0]
 8003884:	e7ed      	b.n	8003862 <_free_r+0x1e>
 8003886:	461a      	mov	r2, r3
 8003888:	685b      	ldr	r3, [r3, #4]
 800388a:	b10b      	cbz	r3, 8003890 <_free_r+0x4c>
 800388c:	42a3      	cmp	r3, r4
 800388e:	d9fa      	bls.n	8003886 <_free_r+0x42>
 8003890:	6811      	ldr	r1, [r2, #0]
 8003892:	1850      	adds	r0, r2, r1
 8003894:	42a0      	cmp	r0, r4
 8003896:	d10b      	bne.n	80038b0 <_free_r+0x6c>
 8003898:	6820      	ldr	r0, [r4, #0]
 800389a:	4401      	add	r1, r0
 800389c:	1850      	adds	r0, r2, r1
 800389e:	4283      	cmp	r3, r0
 80038a0:	6011      	str	r1, [r2, #0]
 80038a2:	d1e0      	bne.n	8003866 <_free_r+0x22>
 80038a4:	6818      	ldr	r0, [r3, #0]
 80038a6:	685b      	ldr	r3, [r3, #4]
 80038a8:	6053      	str	r3, [r2, #4]
 80038aa:	4408      	add	r0, r1
 80038ac:	6010      	str	r0, [r2, #0]
 80038ae:	e7da      	b.n	8003866 <_free_r+0x22>
 80038b0:	d902      	bls.n	80038b8 <_free_r+0x74>
 80038b2:	230c      	movs	r3, #12
 80038b4:	602b      	str	r3, [r5, #0]
 80038b6:	e7d6      	b.n	8003866 <_free_r+0x22>
 80038b8:	6820      	ldr	r0, [r4, #0]
 80038ba:	1821      	adds	r1, r4, r0
 80038bc:	428b      	cmp	r3, r1
 80038be:	bf04      	itt	eq
 80038c0:	6819      	ldreq	r1, [r3, #0]
 80038c2:	685b      	ldreq	r3, [r3, #4]
 80038c4:	6063      	str	r3, [r4, #4]
 80038c6:	bf04      	itt	eq
 80038c8:	1809      	addeq	r1, r1, r0
 80038ca:	6021      	streq	r1, [r4, #0]
 80038cc:	6054      	str	r4, [r2, #4]
 80038ce:	e7ca      	b.n	8003866 <_free_r+0x22>
 80038d0:	bd38      	pop	{r3, r4, r5, pc}
 80038d2:	bf00      	nop
 80038d4:	20000454 	.word	0x20000454

080038d8 <sbrk_aligned>:
 80038d8:	b570      	push	{r4, r5, r6, lr}
 80038da:	4e0f      	ldr	r6, [pc, #60]	@ (8003918 <sbrk_aligned+0x40>)
 80038dc:	460c      	mov	r4, r1
 80038de:	6831      	ldr	r1, [r6, #0]
 80038e0:	4605      	mov	r5, r0
 80038e2:	b911      	cbnz	r1, 80038ea <sbrk_aligned+0x12>
 80038e4:	f000 fba4 	bl	8004030 <_sbrk_r>
 80038e8:	6030      	str	r0, [r6, #0]
 80038ea:	4621      	mov	r1, r4
 80038ec:	4628      	mov	r0, r5
 80038ee:	f000 fb9f 	bl	8004030 <_sbrk_r>
 80038f2:	1c43      	adds	r3, r0, #1
 80038f4:	d103      	bne.n	80038fe <sbrk_aligned+0x26>
 80038f6:	f04f 34ff 	mov.w	r4, #4294967295
 80038fa:	4620      	mov	r0, r4
 80038fc:	bd70      	pop	{r4, r5, r6, pc}
 80038fe:	1cc4      	adds	r4, r0, #3
 8003900:	f024 0403 	bic.w	r4, r4, #3
 8003904:	42a0      	cmp	r0, r4
 8003906:	d0f8      	beq.n	80038fa <sbrk_aligned+0x22>
 8003908:	1a21      	subs	r1, r4, r0
 800390a:	4628      	mov	r0, r5
 800390c:	f000 fb90 	bl	8004030 <_sbrk_r>
 8003910:	3001      	adds	r0, #1
 8003912:	d1f2      	bne.n	80038fa <sbrk_aligned+0x22>
 8003914:	e7ef      	b.n	80038f6 <sbrk_aligned+0x1e>
 8003916:	bf00      	nop
 8003918:	20000450 	.word	0x20000450

0800391c <_malloc_r>:
 800391c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003920:	1ccd      	adds	r5, r1, #3
 8003922:	f025 0503 	bic.w	r5, r5, #3
 8003926:	3508      	adds	r5, #8
 8003928:	2d0c      	cmp	r5, #12
 800392a:	bf38      	it	cc
 800392c:	250c      	movcc	r5, #12
 800392e:	2d00      	cmp	r5, #0
 8003930:	4606      	mov	r6, r0
 8003932:	db01      	blt.n	8003938 <_malloc_r+0x1c>
 8003934:	42a9      	cmp	r1, r5
 8003936:	d904      	bls.n	8003942 <_malloc_r+0x26>
 8003938:	230c      	movs	r3, #12
 800393a:	6033      	str	r3, [r6, #0]
 800393c:	2000      	movs	r0, #0
 800393e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003942:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003a18 <_malloc_r+0xfc>
 8003946:	f000 f869 	bl	8003a1c <__malloc_lock>
 800394a:	f8d8 3000 	ldr.w	r3, [r8]
 800394e:	461c      	mov	r4, r3
 8003950:	bb44      	cbnz	r4, 80039a4 <_malloc_r+0x88>
 8003952:	4629      	mov	r1, r5
 8003954:	4630      	mov	r0, r6
 8003956:	f7ff ffbf 	bl	80038d8 <sbrk_aligned>
 800395a:	1c43      	adds	r3, r0, #1
 800395c:	4604      	mov	r4, r0
 800395e:	d158      	bne.n	8003a12 <_malloc_r+0xf6>
 8003960:	f8d8 4000 	ldr.w	r4, [r8]
 8003964:	4627      	mov	r7, r4
 8003966:	2f00      	cmp	r7, #0
 8003968:	d143      	bne.n	80039f2 <_malloc_r+0xd6>
 800396a:	2c00      	cmp	r4, #0
 800396c:	d04b      	beq.n	8003a06 <_malloc_r+0xea>
 800396e:	6823      	ldr	r3, [r4, #0]
 8003970:	4639      	mov	r1, r7
 8003972:	4630      	mov	r0, r6
 8003974:	eb04 0903 	add.w	r9, r4, r3
 8003978:	f000 fb5a 	bl	8004030 <_sbrk_r>
 800397c:	4581      	cmp	r9, r0
 800397e:	d142      	bne.n	8003a06 <_malloc_r+0xea>
 8003980:	6821      	ldr	r1, [r4, #0]
 8003982:	1a6d      	subs	r5, r5, r1
 8003984:	4629      	mov	r1, r5
 8003986:	4630      	mov	r0, r6
 8003988:	f7ff ffa6 	bl	80038d8 <sbrk_aligned>
 800398c:	3001      	adds	r0, #1
 800398e:	d03a      	beq.n	8003a06 <_malloc_r+0xea>
 8003990:	6823      	ldr	r3, [r4, #0]
 8003992:	442b      	add	r3, r5
 8003994:	6023      	str	r3, [r4, #0]
 8003996:	f8d8 3000 	ldr.w	r3, [r8]
 800399a:	685a      	ldr	r2, [r3, #4]
 800399c:	bb62      	cbnz	r2, 80039f8 <_malloc_r+0xdc>
 800399e:	f8c8 7000 	str.w	r7, [r8]
 80039a2:	e00f      	b.n	80039c4 <_malloc_r+0xa8>
 80039a4:	6822      	ldr	r2, [r4, #0]
 80039a6:	1b52      	subs	r2, r2, r5
 80039a8:	d420      	bmi.n	80039ec <_malloc_r+0xd0>
 80039aa:	2a0b      	cmp	r2, #11
 80039ac:	d917      	bls.n	80039de <_malloc_r+0xc2>
 80039ae:	1961      	adds	r1, r4, r5
 80039b0:	42a3      	cmp	r3, r4
 80039b2:	6025      	str	r5, [r4, #0]
 80039b4:	bf18      	it	ne
 80039b6:	6059      	strne	r1, [r3, #4]
 80039b8:	6863      	ldr	r3, [r4, #4]
 80039ba:	bf08      	it	eq
 80039bc:	f8c8 1000 	streq.w	r1, [r8]
 80039c0:	5162      	str	r2, [r4, r5]
 80039c2:	604b      	str	r3, [r1, #4]
 80039c4:	4630      	mov	r0, r6
 80039c6:	f000 f82f 	bl	8003a28 <__malloc_unlock>
 80039ca:	f104 000b 	add.w	r0, r4, #11
 80039ce:	1d23      	adds	r3, r4, #4
 80039d0:	f020 0007 	bic.w	r0, r0, #7
 80039d4:	1ac2      	subs	r2, r0, r3
 80039d6:	bf1c      	itt	ne
 80039d8:	1a1b      	subne	r3, r3, r0
 80039da:	50a3      	strne	r3, [r4, r2]
 80039dc:	e7af      	b.n	800393e <_malloc_r+0x22>
 80039de:	6862      	ldr	r2, [r4, #4]
 80039e0:	42a3      	cmp	r3, r4
 80039e2:	bf0c      	ite	eq
 80039e4:	f8c8 2000 	streq.w	r2, [r8]
 80039e8:	605a      	strne	r2, [r3, #4]
 80039ea:	e7eb      	b.n	80039c4 <_malloc_r+0xa8>
 80039ec:	4623      	mov	r3, r4
 80039ee:	6864      	ldr	r4, [r4, #4]
 80039f0:	e7ae      	b.n	8003950 <_malloc_r+0x34>
 80039f2:	463c      	mov	r4, r7
 80039f4:	687f      	ldr	r7, [r7, #4]
 80039f6:	e7b6      	b.n	8003966 <_malloc_r+0x4a>
 80039f8:	461a      	mov	r2, r3
 80039fa:	685b      	ldr	r3, [r3, #4]
 80039fc:	42a3      	cmp	r3, r4
 80039fe:	d1fb      	bne.n	80039f8 <_malloc_r+0xdc>
 8003a00:	2300      	movs	r3, #0
 8003a02:	6053      	str	r3, [r2, #4]
 8003a04:	e7de      	b.n	80039c4 <_malloc_r+0xa8>
 8003a06:	230c      	movs	r3, #12
 8003a08:	6033      	str	r3, [r6, #0]
 8003a0a:	4630      	mov	r0, r6
 8003a0c:	f000 f80c 	bl	8003a28 <__malloc_unlock>
 8003a10:	e794      	b.n	800393c <_malloc_r+0x20>
 8003a12:	6005      	str	r5, [r0, #0]
 8003a14:	e7d6      	b.n	80039c4 <_malloc_r+0xa8>
 8003a16:	bf00      	nop
 8003a18:	20000454 	.word	0x20000454

08003a1c <__malloc_lock>:
 8003a1c:	4801      	ldr	r0, [pc, #4]	@ (8003a24 <__malloc_lock+0x8>)
 8003a1e:	f7ff bf0f 	b.w	8003840 <__retarget_lock_acquire_recursive>
 8003a22:	bf00      	nop
 8003a24:	2000044c 	.word	0x2000044c

08003a28 <__malloc_unlock>:
 8003a28:	4801      	ldr	r0, [pc, #4]	@ (8003a30 <__malloc_unlock+0x8>)
 8003a2a:	f7ff bf0a 	b.w	8003842 <__retarget_lock_release_recursive>
 8003a2e:	bf00      	nop
 8003a30:	2000044c 	.word	0x2000044c

08003a34 <__ssputs_r>:
 8003a34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003a38:	688e      	ldr	r6, [r1, #8]
 8003a3a:	461f      	mov	r7, r3
 8003a3c:	42be      	cmp	r6, r7
 8003a3e:	680b      	ldr	r3, [r1, #0]
 8003a40:	4682      	mov	sl, r0
 8003a42:	460c      	mov	r4, r1
 8003a44:	4690      	mov	r8, r2
 8003a46:	d82d      	bhi.n	8003aa4 <__ssputs_r+0x70>
 8003a48:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003a4c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003a50:	d026      	beq.n	8003aa0 <__ssputs_r+0x6c>
 8003a52:	6965      	ldr	r5, [r4, #20]
 8003a54:	6909      	ldr	r1, [r1, #16]
 8003a56:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003a5a:	eba3 0901 	sub.w	r9, r3, r1
 8003a5e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003a62:	1c7b      	adds	r3, r7, #1
 8003a64:	444b      	add	r3, r9
 8003a66:	106d      	asrs	r5, r5, #1
 8003a68:	429d      	cmp	r5, r3
 8003a6a:	bf38      	it	cc
 8003a6c:	461d      	movcc	r5, r3
 8003a6e:	0553      	lsls	r3, r2, #21
 8003a70:	d527      	bpl.n	8003ac2 <__ssputs_r+0x8e>
 8003a72:	4629      	mov	r1, r5
 8003a74:	f7ff ff52 	bl	800391c <_malloc_r>
 8003a78:	4606      	mov	r6, r0
 8003a7a:	b360      	cbz	r0, 8003ad6 <__ssputs_r+0xa2>
 8003a7c:	6921      	ldr	r1, [r4, #16]
 8003a7e:	464a      	mov	r2, r9
 8003a80:	f000 fae6 	bl	8004050 <memcpy>
 8003a84:	89a3      	ldrh	r3, [r4, #12]
 8003a86:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8003a8a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003a8e:	81a3      	strh	r3, [r4, #12]
 8003a90:	6126      	str	r6, [r4, #16]
 8003a92:	6165      	str	r5, [r4, #20]
 8003a94:	444e      	add	r6, r9
 8003a96:	eba5 0509 	sub.w	r5, r5, r9
 8003a9a:	6026      	str	r6, [r4, #0]
 8003a9c:	60a5      	str	r5, [r4, #8]
 8003a9e:	463e      	mov	r6, r7
 8003aa0:	42be      	cmp	r6, r7
 8003aa2:	d900      	bls.n	8003aa6 <__ssputs_r+0x72>
 8003aa4:	463e      	mov	r6, r7
 8003aa6:	6820      	ldr	r0, [r4, #0]
 8003aa8:	4632      	mov	r2, r6
 8003aaa:	4641      	mov	r1, r8
 8003aac:	f000 faa6 	bl	8003ffc <memmove>
 8003ab0:	68a3      	ldr	r3, [r4, #8]
 8003ab2:	1b9b      	subs	r3, r3, r6
 8003ab4:	60a3      	str	r3, [r4, #8]
 8003ab6:	6823      	ldr	r3, [r4, #0]
 8003ab8:	4433      	add	r3, r6
 8003aba:	6023      	str	r3, [r4, #0]
 8003abc:	2000      	movs	r0, #0
 8003abe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ac2:	462a      	mov	r2, r5
 8003ac4:	f000 fad2 	bl	800406c <_realloc_r>
 8003ac8:	4606      	mov	r6, r0
 8003aca:	2800      	cmp	r0, #0
 8003acc:	d1e0      	bne.n	8003a90 <__ssputs_r+0x5c>
 8003ace:	6921      	ldr	r1, [r4, #16]
 8003ad0:	4650      	mov	r0, sl
 8003ad2:	f7ff feb7 	bl	8003844 <_free_r>
 8003ad6:	230c      	movs	r3, #12
 8003ad8:	f8ca 3000 	str.w	r3, [sl]
 8003adc:	89a3      	ldrh	r3, [r4, #12]
 8003ade:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003ae2:	81a3      	strh	r3, [r4, #12]
 8003ae4:	f04f 30ff 	mov.w	r0, #4294967295
 8003ae8:	e7e9      	b.n	8003abe <__ssputs_r+0x8a>
	...

08003aec <_svfiprintf_r>:
 8003aec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003af0:	4698      	mov	r8, r3
 8003af2:	898b      	ldrh	r3, [r1, #12]
 8003af4:	061b      	lsls	r3, r3, #24
 8003af6:	b09d      	sub	sp, #116	@ 0x74
 8003af8:	4607      	mov	r7, r0
 8003afa:	460d      	mov	r5, r1
 8003afc:	4614      	mov	r4, r2
 8003afe:	d510      	bpl.n	8003b22 <_svfiprintf_r+0x36>
 8003b00:	690b      	ldr	r3, [r1, #16]
 8003b02:	b973      	cbnz	r3, 8003b22 <_svfiprintf_r+0x36>
 8003b04:	2140      	movs	r1, #64	@ 0x40
 8003b06:	f7ff ff09 	bl	800391c <_malloc_r>
 8003b0a:	6028      	str	r0, [r5, #0]
 8003b0c:	6128      	str	r0, [r5, #16]
 8003b0e:	b930      	cbnz	r0, 8003b1e <_svfiprintf_r+0x32>
 8003b10:	230c      	movs	r3, #12
 8003b12:	603b      	str	r3, [r7, #0]
 8003b14:	f04f 30ff 	mov.w	r0, #4294967295
 8003b18:	b01d      	add	sp, #116	@ 0x74
 8003b1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003b1e:	2340      	movs	r3, #64	@ 0x40
 8003b20:	616b      	str	r3, [r5, #20]
 8003b22:	2300      	movs	r3, #0
 8003b24:	9309      	str	r3, [sp, #36]	@ 0x24
 8003b26:	2320      	movs	r3, #32
 8003b28:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003b2c:	f8cd 800c 	str.w	r8, [sp, #12]
 8003b30:	2330      	movs	r3, #48	@ 0x30
 8003b32:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8003cd0 <_svfiprintf_r+0x1e4>
 8003b36:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003b3a:	f04f 0901 	mov.w	r9, #1
 8003b3e:	4623      	mov	r3, r4
 8003b40:	469a      	mov	sl, r3
 8003b42:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003b46:	b10a      	cbz	r2, 8003b4c <_svfiprintf_r+0x60>
 8003b48:	2a25      	cmp	r2, #37	@ 0x25
 8003b4a:	d1f9      	bne.n	8003b40 <_svfiprintf_r+0x54>
 8003b4c:	ebba 0b04 	subs.w	fp, sl, r4
 8003b50:	d00b      	beq.n	8003b6a <_svfiprintf_r+0x7e>
 8003b52:	465b      	mov	r3, fp
 8003b54:	4622      	mov	r2, r4
 8003b56:	4629      	mov	r1, r5
 8003b58:	4638      	mov	r0, r7
 8003b5a:	f7ff ff6b 	bl	8003a34 <__ssputs_r>
 8003b5e:	3001      	adds	r0, #1
 8003b60:	f000 80a7 	beq.w	8003cb2 <_svfiprintf_r+0x1c6>
 8003b64:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003b66:	445a      	add	r2, fp
 8003b68:	9209      	str	r2, [sp, #36]	@ 0x24
 8003b6a:	f89a 3000 	ldrb.w	r3, [sl]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	f000 809f 	beq.w	8003cb2 <_svfiprintf_r+0x1c6>
 8003b74:	2300      	movs	r3, #0
 8003b76:	f04f 32ff 	mov.w	r2, #4294967295
 8003b7a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003b7e:	f10a 0a01 	add.w	sl, sl, #1
 8003b82:	9304      	str	r3, [sp, #16]
 8003b84:	9307      	str	r3, [sp, #28]
 8003b86:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003b8a:	931a      	str	r3, [sp, #104]	@ 0x68
 8003b8c:	4654      	mov	r4, sl
 8003b8e:	2205      	movs	r2, #5
 8003b90:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003b94:	484e      	ldr	r0, [pc, #312]	@ (8003cd0 <_svfiprintf_r+0x1e4>)
 8003b96:	f7fc fb4b 	bl	8000230 <memchr>
 8003b9a:	9a04      	ldr	r2, [sp, #16]
 8003b9c:	b9d8      	cbnz	r0, 8003bd6 <_svfiprintf_r+0xea>
 8003b9e:	06d0      	lsls	r0, r2, #27
 8003ba0:	bf44      	itt	mi
 8003ba2:	2320      	movmi	r3, #32
 8003ba4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003ba8:	0711      	lsls	r1, r2, #28
 8003baa:	bf44      	itt	mi
 8003bac:	232b      	movmi	r3, #43	@ 0x2b
 8003bae:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003bb2:	f89a 3000 	ldrb.w	r3, [sl]
 8003bb6:	2b2a      	cmp	r3, #42	@ 0x2a
 8003bb8:	d015      	beq.n	8003be6 <_svfiprintf_r+0xfa>
 8003bba:	9a07      	ldr	r2, [sp, #28]
 8003bbc:	4654      	mov	r4, sl
 8003bbe:	2000      	movs	r0, #0
 8003bc0:	f04f 0c0a 	mov.w	ip, #10
 8003bc4:	4621      	mov	r1, r4
 8003bc6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003bca:	3b30      	subs	r3, #48	@ 0x30
 8003bcc:	2b09      	cmp	r3, #9
 8003bce:	d94b      	bls.n	8003c68 <_svfiprintf_r+0x17c>
 8003bd0:	b1b0      	cbz	r0, 8003c00 <_svfiprintf_r+0x114>
 8003bd2:	9207      	str	r2, [sp, #28]
 8003bd4:	e014      	b.n	8003c00 <_svfiprintf_r+0x114>
 8003bd6:	eba0 0308 	sub.w	r3, r0, r8
 8003bda:	fa09 f303 	lsl.w	r3, r9, r3
 8003bde:	4313      	orrs	r3, r2
 8003be0:	9304      	str	r3, [sp, #16]
 8003be2:	46a2      	mov	sl, r4
 8003be4:	e7d2      	b.n	8003b8c <_svfiprintf_r+0xa0>
 8003be6:	9b03      	ldr	r3, [sp, #12]
 8003be8:	1d19      	adds	r1, r3, #4
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	9103      	str	r1, [sp, #12]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	bfbb      	ittet	lt
 8003bf2:	425b      	neglt	r3, r3
 8003bf4:	f042 0202 	orrlt.w	r2, r2, #2
 8003bf8:	9307      	strge	r3, [sp, #28]
 8003bfa:	9307      	strlt	r3, [sp, #28]
 8003bfc:	bfb8      	it	lt
 8003bfe:	9204      	strlt	r2, [sp, #16]
 8003c00:	7823      	ldrb	r3, [r4, #0]
 8003c02:	2b2e      	cmp	r3, #46	@ 0x2e
 8003c04:	d10a      	bne.n	8003c1c <_svfiprintf_r+0x130>
 8003c06:	7863      	ldrb	r3, [r4, #1]
 8003c08:	2b2a      	cmp	r3, #42	@ 0x2a
 8003c0a:	d132      	bne.n	8003c72 <_svfiprintf_r+0x186>
 8003c0c:	9b03      	ldr	r3, [sp, #12]
 8003c0e:	1d1a      	adds	r2, r3, #4
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	9203      	str	r2, [sp, #12]
 8003c14:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003c18:	3402      	adds	r4, #2
 8003c1a:	9305      	str	r3, [sp, #20]
 8003c1c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8003ce0 <_svfiprintf_r+0x1f4>
 8003c20:	7821      	ldrb	r1, [r4, #0]
 8003c22:	2203      	movs	r2, #3
 8003c24:	4650      	mov	r0, sl
 8003c26:	f7fc fb03 	bl	8000230 <memchr>
 8003c2a:	b138      	cbz	r0, 8003c3c <_svfiprintf_r+0x150>
 8003c2c:	9b04      	ldr	r3, [sp, #16]
 8003c2e:	eba0 000a 	sub.w	r0, r0, sl
 8003c32:	2240      	movs	r2, #64	@ 0x40
 8003c34:	4082      	lsls	r2, r0
 8003c36:	4313      	orrs	r3, r2
 8003c38:	3401      	adds	r4, #1
 8003c3a:	9304      	str	r3, [sp, #16]
 8003c3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003c40:	4824      	ldr	r0, [pc, #144]	@ (8003cd4 <_svfiprintf_r+0x1e8>)
 8003c42:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003c46:	2206      	movs	r2, #6
 8003c48:	f7fc faf2 	bl	8000230 <memchr>
 8003c4c:	2800      	cmp	r0, #0
 8003c4e:	d036      	beq.n	8003cbe <_svfiprintf_r+0x1d2>
 8003c50:	4b21      	ldr	r3, [pc, #132]	@ (8003cd8 <_svfiprintf_r+0x1ec>)
 8003c52:	bb1b      	cbnz	r3, 8003c9c <_svfiprintf_r+0x1b0>
 8003c54:	9b03      	ldr	r3, [sp, #12]
 8003c56:	3307      	adds	r3, #7
 8003c58:	f023 0307 	bic.w	r3, r3, #7
 8003c5c:	3308      	adds	r3, #8
 8003c5e:	9303      	str	r3, [sp, #12]
 8003c60:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003c62:	4433      	add	r3, r6
 8003c64:	9309      	str	r3, [sp, #36]	@ 0x24
 8003c66:	e76a      	b.n	8003b3e <_svfiprintf_r+0x52>
 8003c68:	fb0c 3202 	mla	r2, ip, r2, r3
 8003c6c:	460c      	mov	r4, r1
 8003c6e:	2001      	movs	r0, #1
 8003c70:	e7a8      	b.n	8003bc4 <_svfiprintf_r+0xd8>
 8003c72:	2300      	movs	r3, #0
 8003c74:	3401      	adds	r4, #1
 8003c76:	9305      	str	r3, [sp, #20]
 8003c78:	4619      	mov	r1, r3
 8003c7a:	f04f 0c0a 	mov.w	ip, #10
 8003c7e:	4620      	mov	r0, r4
 8003c80:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003c84:	3a30      	subs	r2, #48	@ 0x30
 8003c86:	2a09      	cmp	r2, #9
 8003c88:	d903      	bls.n	8003c92 <_svfiprintf_r+0x1a6>
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d0c6      	beq.n	8003c1c <_svfiprintf_r+0x130>
 8003c8e:	9105      	str	r1, [sp, #20]
 8003c90:	e7c4      	b.n	8003c1c <_svfiprintf_r+0x130>
 8003c92:	fb0c 2101 	mla	r1, ip, r1, r2
 8003c96:	4604      	mov	r4, r0
 8003c98:	2301      	movs	r3, #1
 8003c9a:	e7f0      	b.n	8003c7e <_svfiprintf_r+0x192>
 8003c9c:	ab03      	add	r3, sp, #12
 8003c9e:	9300      	str	r3, [sp, #0]
 8003ca0:	462a      	mov	r2, r5
 8003ca2:	4b0e      	ldr	r3, [pc, #56]	@ (8003cdc <_svfiprintf_r+0x1f0>)
 8003ca4:	a904      	add	r1, sp, #16
 8003ca6:	4638      	mov	r0, r7
 8003ca8:	f3af 8000 	nop.w
 8003cac:	1c42      	adds	r2, r0, #1
 8003cae:	4606      	mov	r6, r0
 8003cb0:	d1d6      	bne.n	8003c60 <_svfiprintf_r+0x174>
 8003cb2:	89ab      	ldrh	r3, [r5, #12]
 8003cb4:	065b      	lsls	r3, r3, #25
 8003cb6:	f53f af2d 	bmi.w	8003b14 <_svfiprintf_r+0x28>
 8003cba:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003cbc:	e72c      	b.n	8003b18 <_svfiprintf_r+0x2c>
 8003cbe:	ab03      	add	r3, sp, #12
 8003cc0:	9300      	str	r3, [sp, #0]
 8003cc2:	462a      	mov	r2, r5
 8003cc4:	4b05      	ldr	r3, [pc, #20]	@ (8003cdc <_svfiprintf_r+0x1f0>)
 8003cc6:	a904      	add	r1, sp, #16
 8003cc8:	4638      	mov	r0, r7
 8003cca:	f000 f879 	bl	8003dc0 <_printf_i>
 8003cce:	e7ed      	b.n	8003cac <_svfiprintf_r+0x1c0>
 8003cd0:	08004110 	.word	0x08004110
 8003cd4:	0800411a 	.word	0x0800411a
 8003cd8:	00000000 	.word	0x00000000
 8003cdc:	08003a35 	.word	0x08003a35
 8003ce0:	08004116 	.word	0x08004116

08003ce4 <_printf_common>:
 8003ce4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003ce8:	4616      	mov	r6, r2
 8003cea:	4698      	mov	r8, r3
 8003cec:	688a      	ldr	r2, [r1, #8]
 8003cee:	690b      	ldr	r3, [r1, #16]
 8003cf0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	bfb8      	it	lt
 8003cf8:	4613      	movlt	r3, r2
 8003cfa:	6033      	str	r3, [r6, #0]
 8003cfc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003d00:	4607      	mov	r7, r0
 8003d02:	460c      	mov	r4, r1
 8003d04:	b10a      	cbz	r2, 8003d0a <_printf_common+0x26>
 8003d06:	3301      	adds	r3, #1
 8003d08:	6033      	str	r3, [r6, #0]
 8003d0a:	6823      	ldr	r3, [r4, #0]
 8003d0c:	0699      	lsls	r1, r3, #26
 8003d0e:	bf42      	ittt	mi
 8003d10:	6833      	ldrmi	r3, [r6, #0]
 8003d12:	3302      	addmi	r3, #2
 8003d14:	6033      	strmi	r3, [r6, #0]
 8003d16:	6825      	ldr	r5, [r4, #0]
 8003d18:	f015 0506 	ands.w	r5, r5, #6
 8003d1c:	d106      	bne.n	8003d2c <_printf_common+0x48>
 8003d1e:	f104 0a19 	add.w	sl, r4, #25
 8003d22:	68e3      	ldr	r3, [r4, #12]
 8003d24:	6832      	ldr	r2, [r6, #0]
 8003d26:	1a9b      	subs	r3, r3, r2
 8003d28:	42ab      	cmp	r3, r5
 8003d2a:	dc26      	bgt.n	8003d7a <_printf_common+0x96>
 8003d2c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003d30:	6822      	ldr	r2, [r4, #0]
 8003d32:	3b00      	subs	r3, #0
 8003d34:	bf18      	it	ne
 8003d36:	2301      	movne	r3, #1
 8003d38:	0692      	lsls	r2, r2, #26
 8003d3a:	d42b      	bmi.n	8003d94 <_printf_common+0xb0>
 8003d3c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003d40:	4641      	mov	r1, r8
 8003d42:	4638      	mov	r0, r7
 8003d44:	47c8      	blx	r9
 8003d46:	3001      	adds	r0, #1
 8003d48:	d01e      	beq.n	8003d88 <_printf_common+0xa4>
 8003d4a:	6823      	ldr	r3, [r4, #0]
 8003d4c:	6922      	ldr	r2, [r4, #16]
 8003d4e:	f003 0306 	and.w	r3, r3, #6
 8003d52:	2b04      	cmp	r3, #4
 8003d54:	bf02      	ittt	eq
 8003d56:	68e5      	ldreq	r5, [r4, #12]
 8003d58:	6833      	ldreq	r3, [r6, #0]
 8003d5a:	1aed      	subeq	r5, r5, r3
 8003d5c:	68a3      	ldr	r3, [r4, #8]
 8003d5e:	bf0c      	ite	eq
 8003d60:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003d64:	2500      	movne	r5, #0
 8003d66:	4293      	cmp	r3, r2
 8003d68:	bfc4      	itt	gt
 8003d6a:	1a9b      	subgt	r3, r3, r2
 8003d6c:	18ed      	addgt	r5, r5, r3
 8003d6e:	2600      	movs	r6, #0
 8003d70:	341a      	adds	r4, #26
 8003d72:	42b5      	cmp	r5, r6
 8003d74:	d11a      	bne.n	8003dac <_printf_common+0xc8>
 8003d76:	2000      	movs	r0, #0
 8003d78:	e008      	b.n	8003d8c <_printf_common+0xa8>
 8003d7a:	2301      	movs	r3, #1
 8003d7c:	4652      	mov	r2, sl
 8003d7e:	4641      	mov	r1, r8
 8003d80:	4638      	mov	r0, r7
 8003d82:	47c8      	blx	r9
 8003d84:	3001      	adds	r0, #1
 8003d86:	d103      	bne.n	8003d90 <_printf_common+0xac>
 8003d88:	f04f 30ff 	mov.w	r0, #4294967295
 8003d8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d90:	3501      	adds	r5, #1
 8003d92:	e7c6      	b.n	8003d22 <_printf_common+0x3e>
 8003d94:	18e1      	adds	r1, r4, r3
 8003d96:	1c5a      	adds	r2, r3, #1
 8003d98:	2030      	movs	r0, #48	@ 0x30
 8003d9a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003d9e:	4422      	add	r2, r4
 8003da0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003da4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003da8:	3302      	adds	r3, #2
 8003daa:	e7c7      	b.n	8003d3c <_printf_common+0x58>
 8003dac:	2301      	movs	r3, #1
 8003dae:	4622      	mov	r2, r4
 8003db0:	4641      	mov	r1, r8
 8003db2:	4638      	mov	r0, r7
 8003db4:	47c8      	blx	r9
 8003db6:	3001      	adds	r0, #1
 8003db8:	d0e6      	beq.n	8003d88 <_printf_common+0xa4>
 8003dba:	3601      	adds	r6, #1
 8003dbc:	e7d9      	b.n	8003d72 <_printf_common+0x8e>
	...

08003dc0 <_printf_i>:
 8003dc0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003dc4:	7e0f      	ldrb	r7, [r1, #24]
 8003dc6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003dc8:	2f78      	cmp	r7, #120	@ 0x78
 8003dca:	4691      	mov	r9, r2
 8003dcc:	4680      	mov	r8, r0
 8003dce:	460c      	mov	r4, r1
 8003dd0:	469a      	mov	sl, r3
 8003dd2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003dd6:	d807      	bhi.n	8003de8 <_printf_i+0x28>
 8003dd8:	2f62      	cmp	r7, #98	@ 0x62
 8003dda:	d80a      	bhi.n	8003df2 <_printf_i+0x32>
 8003ddc:	2f00      	cmp	r7, #0
 8003dde:	f000 80d1 	beq.w	8003f84 <_printf_i+0x1c4>
 8003de2:	2f58      	cmp	r7, #88	@ 0x58
 8003de4:	f000 80b8 	beq.w	8003f58 <_printf_i+0x198>
 8003de8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003dec:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003df0:	e03a      	b.n	8003e68 <_printf_i+0xa8>
 8003df2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003df6:	2b15      	cmp	r3, #21
 8003df8:	d8f6      	bhi.n	8003de8 <_printf_i+0x28>
 8003dfa:	a101      	add	r1, pc, #4	@ (adr r1, 8003e00 <_printf_i+0x40>)
 8003dfc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003e00:	08003e59 	.word	0x08003e59
 8003e04:	08003e6d 	.word	0x08003e6d
 8003e08:	08003de9 	.word	0x08003de9
 8003e0c:	08003de9 	.word	0x08003de9
 8003e10:	08003de9 	.word	0x08003de9
 8003e14:	08003de9 	.word	0x08003de9
 8003e18:	08003e6d 	.word	0x08003e6d
 8003e1c:	08003de9 	.word	0x08003de9
 8003e20:	08003de9 	.word	0x08003de9
 8003e24:	08003de9 	.word	0x08003de9
 8003e28:	08003de9 	.word	0x08003de9
 8003e2c:	08003f6b 	.word	0x08003f6b
 8003e30:	08003e97 	.word	0x08003e97
 8003e34:	08003f25 	.word	0x08003f25
 8003e38:	08003de9 	.word	0x08003de9
 8003e3c:	08003de9 	.word	0x08003de9
 8003e40:	08003f8d 	.word	0x08003f8d
 8003e44:	08003de9 	.word	0x08003de9
 8003e48:	08003e97 	.word	0x08003e97
 8003e4c:	08003de9 	.word	0x08003de9
 8003e50:	08003de9 	.word	0x08003de9
 8003e54:	08003f2d 	.word	0x08003f2d
 8003e58:	6833      	ldr	r3, [r6, #0]
 8003e5a:	1d1a      	adds	r2, r3, #4
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	6032      	str	r2, [r6, #0]
 8003e60:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003e64:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003e68:	2301      	movs	r3, #1
 8003e6a:	e09c      	b.n	8003fa6 <_printf_i+0x1e6>
 8003e6c:	6833      	ldr	r3, [r6, #0]
 8003e6e:	6820      	ldr	r0, [r4, #0]
 8003e70:	1d19      	adds	r1, r3, #4
 8003e72:	6031      	str	r1, [r6, #0]
 8003e74:	0606      	lsls	r6, r0, #24
 8003e76:	d501      	bpl.n	8003e7c <_printf_i+0xbc>
 8003e78:	681d      	ldr	r5, [r3, #0]
 8003e7a:	e003      	b.n	8003e84 <_printf_i+0xc4>
 8003e7c:	0645      	lsls	r5, r0, #25
 8003e7e:	d5fb      	bpl.n	8003e78 <_printf_i+0xb8>
 8003e80:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003e84:	2d00      	cmp	r5, #0
 8003e86:	da03      	bge.n	8003e90 <_printf_i+0xd0>
 8003e88:	232d      	movs	r3, #45	@ 0x2d
 8003e8a:	426d      	negs	r5, r5
 8003e8c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003e90:	4858      	ldr	r0, [pc, #352]	@ (8003ff4 <_printf_i+0x234>)
 8003e92:	230a      	movs	r3, #10
 8003e94:	e011      	b.n	8003eba <_printf_i+0xfa>
 8003e96:	6821      	ldr	r1, [r4, #0]
 8003e98:	6833      	ldr	r3, [r6, #0]
 8003e9a:	0608      	lsls	r0, r1, #24
 8003e9c:	f853 5b04 	ldr.w	r5, [r3], #4
 8003ea0:	d402      	bmi.n	8003ea8 <_printf_i+0xe8>
 8003ea2:	0649      	lsls	r1, r1, #25
 8003ea4:	bf48      	it	mi
 8003ea6:	b2ad      	uxthmi	r5, r5
 8003ea8:	2f6f      	cmp	r7, #111	@ 0x6f
 8003eaa:	4852      	ldr	r0, [pc, #328]	@ (8003ff4 <_printf_i+0x234>)
 8003eac:	6033      	str	r3, [r6, #0]
 8003eae:	bf14      	ite	ne
 8003eb0:	230a      	movne	r3, #10
 8003eb2:	2308      	moveq	r3, #8
 8003eb4:	2100      	movs	r1, #0
 8003eb6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003eba:	6866      	ldr	r6, [r4, #4]
 8003ebc:	60a6      	str	r6, [r4, #8]
 8003ebe:	2e00      	cmp	r6, #0
 8003ec0:	db05      	blt.n	8003ece <_printf_i+0x10e>
 8003ec2:	6821      	ldr	r1, [r4, #0]
 8003ec4:	432e      	orrs	r6, r5
 8003ec6:	f021 0104 	bic.w	r1, r1, #4
 8003eca:	6021      	str	r1, [r4, #0]
 8003ecc:	d04b      	beq.n	8003f66 <_printf_i+0x1a6>
 8003ece:	4616      	mov	r6, r2
 8003ed0:	fbb5 f1f3 	udiv	r1, r5, r3
 8003ed4:	fb03 5711 	mls	r7, r3, r1, r5
 8003ed8:	5dc7      	ldrb	r7, [r0, r7]
 8003eda:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003ede:	462f      	mov	r7, r5
 8003ee0:	42bb      	cmp	r3, r7
 8003ee2:	460d      	mov	r5, r1
 8003ee4:	d9f4      	bls.n	8003ed0 <_printf_i+0x110>
 8003ee6:	2b08      	cmp	r3, #8
 8003ee8:	d10b      	bne.n	8003f02 <_printf_i+0x142>
 8003eea:	6823      	ldr	r3, [r4, #0]
 8003eec:	07df      	lsls	r7, r3, #31
 8003eee:	d508      	bpl.n	8003f02 <_printf_i+0x142>
 8003ef0:	6923      	ldr	r3, [r4, #16]
 8003ef2:	6861      	ldr	r1, [r4, #4]
 8003ef4:	4299      	cmp	r1, r3
 8003ef6:	bfde      	ittt	le
 8003ef8:	2330      	movle	r3, #48	@ 0x30
 8003efa:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003efe:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003f02:	1b92      	subs	r2, r2, r6
 8003f04:	6122      	str	r2, [r4, #16]
 8003f06:	f8cd a000 	str.w	sl, [sp]
 8003f0a:	464b      	mov	r3, r9
 8003f0c:	aa03      	add	r2, sp, #12
 8003f0e:	4621      	mov	r1, r4
 8003f10:	4640      	mov	r0, r8
 8003f12:	f7ff fee7 	bl	8003ce4 <_printf_common>
 8003f16:	3001      	adds	r0, #1
 8003f18:	d14a      	bne.n	8003fb0 <_printf_i+0x1f0>
 8003f1a:	f04f 30ff 	mov.w	r0, #4294967295
 8003f1e:	b004      	add	sp, #16
 8003f20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f24:	6823      	ldr	r3, [r4, #0]
 8003f26:	f043 0320 	orr.w	r3, r3, #32
 8003f2a:	6023      	str	r3, [r4, #0]
 8003f2c:	4832      	ldr	r0, [pc, #200]	@ (8003ff8 <_printf_i+0x238>)
 8003f2e:	2778      	movs	r7, #120	@ 0x78
 8003f30:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003f34:	6823      	ldr	r3, [r4, #0]
 8003f36:	6831      	ldr	r1, [r6, #0]
 8003f38:	061f      	lsls	r7, r3, #24
 8003f3a:	f851 5b04 	ldr.w	r5, [r1], #4
 8003f3e:	d402      	bmi.n	8003f46 <_printf_i+0x186>
 8003f40:	065f      	lsls	r7, r3, #25
 8003f42:	bf48      	it	mi
 8003f44:	b2ad      	uxthmi	r5, r5
 8003f46:	6031      	str	r1, [r6, #0]
 8003f48:	07d9      	lsls	r1, r3, #31
 8003f4a:	bf44      	itt	mi
 8003f4c:	f043 0320 	orrmi.w	r3, r3, #32
 8003f50:	6023      	strmi	r3, [r4, #0]
 8003f52:	b11d      	cbz	r5, 8003f5c <_printf_i+0x19c>
 8003f54:	2310      	movs	r3, #16
 8003f56:	e7ad      	b.n	8003eb4 <_printf_i+0xf4>
 8003f58:	4826      	ldr	r0, [pc, #152]	@ (8003ff4 <_printf_i+0x234>)
 8003f5a:	e7e9      	b.n	8003f30 <_printf_i+0x170>
 8003f5c:	6823      	ldr	r3, [r4, #0]
 8003f5e:	f023 0320 	bic.w	r3, r3, #32
 8003f62:	6023      	str	r3, [r4, #0]
 8003f64:	e7f6      	b.n	8003f54 <_printf_i+0x194>
 8003f66:	4616      	mov	r6, r2
 8003f68:	e7bd      	b.n	8003ee6 <_printf_i+0x126>
 8003f6a:	6833      	ldr	r3, [r6, #0]
 8003f6c:	6825      	ldr	r5, [r4, #0]
 8003f6e:	6961      	ldr	r1, [r4, #20]
 8003f70:	1d18      	adds	r0, r3, #4
 8003f72:	6030      	str	r0, [r6, #0]
 8003f74:	062e      	lsls	r6, r5, #24
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	d501      	bpl.n	8003f7e <_printf_i+0x1be>
 8003f7a:	6019      	str	r1, [r3, #0]
 8003f7c:	e002      	b.n	8003f84 <_printf_i+0x1c4>
 8003f7e:	0668      	lsls	r0, r5, #25
 8003f80:	d5fb      	bpl.n	8003f7a <_printf_i+0x1ba>
 8003f82:	8019      	strh	r1, [r3, #0]
 8003f84:	2300      	movs	r3, #0
 8003f86:	6123      	str	r3, [r4, #16]
 8003f88:	4616      	mov	r6, r2
 8003f8a:	e7bc      	b.n	8003f06 <_printf_i+0x146>
 8003f8c:	6833      	ldr	r3, [r6, #0]
 8003f8e:	1d1a      	adds	r2, r3, #4
 8003f90:	6032      	str	r2, [r6, #0]
 8003f92:	681e      	ldr	r6, [r3, #0]
 8003f94:	6862      	ldr	r2, [r4, #4]
 8003f96:	2100      	movs	r1, #0
 8003f98:	4630      	mov	r0, r6
 8003f9a:	f7fc f949 	bl	8000230 <memchr>
 8003f9e:	b108      	cbz	r0, 8003fa4 <_printf_i+0x1e4>
 8003fa0:	1b80      	subs	r0, r0, r6
 8003fa2:	6060      	str	r0, [r4, #4]
 8003fa4:	6863      	ldr	r3, [r4, #4]
 8003fa6:	6123      	str	r3, [r4, #16]
 8003fa8:	2300      	movs	r3, #0
 8003faa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003fae:	e7aa      	b.n	8003f06 <_printf_i+0x146>
 8003fb0:	6923      	ldr	r3, [r4, #16]
 8003fb2:	4632      	mov	r2, r6
 8003fb4:	4649      	mov	r1, r9
 8003fb6:	4640      	mov	r0, r8
 8003fb8:	47d0      	blx	sl
 8003fba:	3001      	adds	r0, #1
 8003fbc:	d0ad      	beq.n	8003f1a <_printf_i+0x15a>
 8003fbe:	6823      	ldr	r3, [r4, #0]
 8003fc0:	079b      	lsls	r3, r3, #30
 8003fc2:	d413      	bmi.n	8003fec <_printf_i+0x22c>
 8003fc4:	68e0      	ldr	r0, [r4, #12]
 8003fc6:	9b03      	ldr	r3, [sp, #12]
 8003fc8:	4298      	cmp	r0, r3
 8003fca:	bfb8      	it	lt
 8003fcc:	4618      	movlt	r0, r3
 8003fce:	e7a6      	b.n	8003f1e <_printf_i+0x15e>
 8003fd0:	2301      	movs	r3, #1
 8003fd2:	4632      	mov	r2, r6
 8003fd4:	4649      	mov	r1, r9
 8003fd6:	4640      	mov	r0, r8
 8003fd8:	47d0      	blx	sl
 8003fda:	3001      	adds	r0, #1
 8003fdc:	d09d      	beq.n	8003f1a <_printf_i+0x15a>
 8003fde:	3501      	adds	r5, #1
 8003fe0:	68e3      	ldr	r3, [r4, #12]
 8003fe2:	9903      	ldr	r1, [sp, #12]
 8003fe4:	1a5b      	subs	r3, r3, r1
 8003fe6:	42ab      	cmp	r3, r5
 8003fe8:	dcf2      	bgt.n	8003fd0 <_printf_i+0x210>
 8003fea:	e7eb      	b.n	8003fc4 <_printf_i+0x204>
 8003fec:	2500      	movs	r5, #0
 8003fee:	f104 0619 	add.w	r6, r4, #25
 8003ff2:	e7f5      	b.n	8003fe0 <_printf_i+0x220>
 8003ff4:	08004121 	.word	0x08004121
 8003ff8:	08004132 	.word	0x08004132

08003ffc <memmove>:
 8003ffc:	4288      	cmp	r0, r1
 8003ffe:	b510      	push	{r4, lr}
 8004000:	eb01 0402 	add.w	r4, r1, r2
 8004004:	d902      	bls.n	800400c <memmove+0x10>
 8004006:	4284      	cmp	r4, r0
 8004008:	4623      	mov	r3, r4
 800400a:	d807      	bhi.n	800401c <memmove+0x20>
 800400c:	1e43      	subs	r3, r0, #1
 800400e:	42a1      	cmp	r1, r4
 8004010:	d008      	beq.n	8004024 <memmove+0x28>
 8004012:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004016:	f803 2f01 	strb.w	r2, [r3, #1]!
 800401a:	e7f8      	b.n	800400e <memmove+0x12>
 800401c:	4402      	add	r2, r0
 800401e:	4601      	mov	r1, r0
 8004020:	428a      	cmp	r2, r1
 8004022:	d100      	bne.n	8004026 <memmove+0x2a>
 8004024:	bd10      	pop	{r4, pc}
 8004026:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800402a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800402e:	e7f7      	b.n	8004020 <memmove+0x24>

08004030 <_sbrk_r>:
 8004030:	b538      	push	{r3, r4, r5, lr}
 8004032:	4d06      	ldr	r5, [pc, #24]	@ (800404c <_sbrk_r+0x1c>)
 8004034:	2300      	movs	r3, #0
 8004036:	4604      	mov	r4, r0
 8004038:	4608      	mov	r0, r1
 800403a:	602b      	str	r3, [r5, #0]
 800403c:	f7fd f88e 	bl	800115c <_sbrk>
 8004040:	1c43      	adds	r3, r0, #1
 8004042:	d102      	bne.n	800404a <_sbrk_r+0x1a>
 8004044:	682b      	ldr	r3, [r5, #0]
 8004046:	b103      	cbz	r3, 800404a <_sbrk_r+0x1a>
 8004048:	6023      	str	r3, [r4, #0]
 800404a:	bd38      	pop	{r3, r4, r5, pc}
 800404c:	20000448 	.word	0x20000448

08004050 <memcpy>:
 8004050:	440a      	add	r2, r1
 8004052:	4291      	cmp	r1, r2
 8004054:	f100 33ff 	add.w	r3, r0, #4294967295
 8004058:	d100      	bne.n	800405c <memcpy+0xc>
 800405a:	4770      	bx	lr
 800405c:	b510      	push	{r4, lr}
 800405e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004062:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004066:	4291      	cmp	r1, r2
 8004068:	d1f9      	bne.n	800405e <memcpy+0xe>
 800406a:	bd10      	pop	{r4, pc}

0800406c <_realloc_r>:
 800406c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004070:	4607      	mov	r7, r0
 8004072:	4614      	mov	r4, r2
 8004074:	460d      	mov	r5, r1
 8004076:	b921      	cbnz	r1, 8004082 <_realloc_r+0x16>
 8004078:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800407c:	4611      	mov	r1, r2
 800407e:	f7ff bc4d 	b.w	800391c <_malloc_r>
 8004082:	b92a      	cbnz	r2, 8004090 <_realloc_r+0x24>
 8004084:	f7ff fbde 	bl	8003844 <_free_r>
 8004088:	4625      	mov	r5, r4
 800408a:	4628      	mov	r0, r5
 800408c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004090:	f000 f81a 	bl	80040c8 <_malloc_usable_size_r>
 8004094:	4284      	cmp	r4, r0
 8004096:	4606      	mov	r6, r0
 8004098:	d802      	bhi.n	80040a0 <_realloc_r+0x34>
 800409a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800409e:	d8f4      	bhi.n	800408a <_realloc_r+0x1e>
 80040a0:	4621      	mov	r1, r4
 80040a2:	4638      	mov	r0, r7
 80040a4:	f7ff fc3a 	bl	800391c <_malloc_r>
 80040a8:	4680      	mov	r8, r0
 80040aa:	b908      	cbnz	r0, 80040b0 <_realloc_r+0x44>
 80040ac:	4645      	mov	r5, r8
 80040ae:	e7ec      	b.n	800408a <_realloc_r+0x1e>
 80040b0:	42b4      	cmp	r4, r6
 80040b2:	4622      	mov	r2, r4
 80040b4:	4629      	mov	r1, r5
 80040b6:	bf28      	it	cs
 80040b8:	4632      	movcs	r2, r6
 80040ba:	f7ff ffc9 	bl	8004050 <memcpy>
 80040be:	4629      	mov	r1, r5
 80040c0:	4638      	mov	r0, r7
 80040c2:	f7ff fbbf 	bl	8003844 <_free_r>
 80040c6:	e7f1      	b.n	80040ac <_realloc_r+0x40>

080040c8 <_malloc_usable_size_r>:
 80040c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80040cc:	1f18      	subs	r0, r3, #4
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	bfbc      	itt	lt
 80040d2:	580b      	ldrlt	r3, [r1, r0]
 80040d4:	18c0      	addlt	r0, r0, r3
 80040d6:	4770      	bx	lr

080040d8 <_init>:
 80040d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040da:	bf00      	nop
 80040dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80040de:	bc08      	pop	{r3}
 80040e0:	469e      	mov	lr, r3
 80040e2:	4770      	bx	lr

080040e4 <_fini>:
 80040e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040e6:	bf00      	nop
 80040e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80040ea:	bc08      	pop	{r3}
 80040ec:	469e      	mov	lr, r3
 80040ee:	4770      	bx	lr
